g2g2h3j3k3k2l2n3o4q3q3r3t3u3v4w4y4z3z4z4{4|4}4~6Ä6Ä6Ä7Å7É9É9É:Ñ:Ü:á9ä;ç<ê=ì=ï=ò@ö@õ@úAüA°A£A§B¶
C¶B•C•C£D£C¢C°C°C°C°C°C°E•E¶D•CßCßE®E©E©E©CßC¶C§B°Aü
Aú
@õ
?ô	>ñ
=ñ
<í
;ê	;è	:ç	7å
9ã@ëDì?é9ä7à
7á	6Ö	6Ñ	4É
3Å
3Å
2
1}
1{
1y
1x	0u	/t	.r
.q.p.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K-J-J-J-J-J.J.J-J-J.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J/K/K/K/K/K/K/K/K.L.M.M.M/M/M0N0N0N0N0N0N0N0N0N0N1O1O0O0P/O/O/P/P/R0S/S/R0S0S0S0S1T1T0S/R/S0U1V0U0U1V1V0U0U1U1V1V5Y9]:]6Z3Y2W1W1W1W2X1W1W3X3X4X4X5X5Y4Y3Y3Z4[4[4[4[4[5]6_6`6a8c8c8a7_7^7^7^8_8_8a8a8c8d9f:f:f:e:e:e:e:e:f:f:f;g:f:f:f;f=h>h=h<h=h=h=g@hAhAj@j@j@jBkClClClBnBnCnCmCoCoCoCoCoDpCoCoDpEpGpLvR~Q}JvFsDsEqEqFrFrFsFsEsEsEsEuEtEsFtFtFtFuFvFvFvFvFvFvFvFvFvFvFvGwGwHwIxIxIxIxHwHwIxHwHwHxIyIzI{IyHyHyHyGxHyHyHyIzJ{J{L|K|K|L}I|I|I}K}J}ML~L}M}L~MMÄNÅNÉNÉOÑNÉNÉOÑOÑOÖOÖNÑNÑNÑMÉMÉNÑOÖOÜRÜRÖRÖTÜTÜTÜTáTáSáQàQâSâRàQáPÜPÜPÜPáPàOàNáOàOáOÜOÜOÜOÜNÜLÑLÑLÑLÑLÑLÑLÑLÑKÉKÉJÇNÖSäQàLÉJÄKÄJÅIÅIÅIIÅHH~H~H~H}H}H}H}H|H|H}H}H~G|G|H|G{FzFzG{G{H|G}G~G~IJÄK~KÄLÅMÇMÇMÇMÇMÅPÇQÉRÑ!Uá$Xâ$Yâ!VÜ!SÖ RÉ RÑ!TÜ TÜ TÜ Uá!Và!Và!Và!Và!Và!Vâ!Wã"Wã#Wå"Wå"Wç#Vé#Wè"Zê#^í"]í#Zê$Wé#Vç#Vå$Wå#Wå#Xã#Xã"Wä"Wâ#Wâ#Wâ#Wâ#Vá#Vá"UÜ"UÜ"UÜ"UÜ#VÜ#VÜ$VÜ"UÑ"UÑ#UÖ"TÑ"TÑ"SÑ"SÑ!TÉ!TÇ SÅ!TÅ%XÖ(\â&Zá"UÇ!R!Q!Q~"RR}R}!R}!Q|!P| P{ O|O{ P{PzOxNwNwNwLvLvKuKuKuKuKuJtJtKtKtJsIrIrIrIqHoGnGnFmFmDlDlDlDlCkCkBkAj?h@gAg@g@g@fAf?e>e>e>d>c>c<c<c<c;b:`:_;`;`:_:_9^9^9_9^9]9]9]8\8\8\8\8\8\8\8\8\7[7[7[7[7[7[7\6[4Z4Z4Z5[6[7[7[8\9]9]8\8\8\8`9c8_7[8\9]>a<_9\6Z7[8\8\7[7Z8Z?_CaCb>^;[<[;Z;[;Z>\>\>\>\>\>\>\>\>\>\>\>\>\>\?^EdKjHhBa?\>\>]>]?^?]?^@_@^A^A^FcLgIfEbFeMk$Rp"QoJiGcEaB^B]B]B]B]@]A]A^B]C]C]C_E`B_?\>\>\?\?\>]=]<\<\<\<];]<^>a>a<]<Z<Z<Z<Z<Z<Z<Z<Z:X9W9W8U8U8U8U8U8W7V7V7V8W7V7V8W7V7V8X8Y8Y:Z;[;\9]8]9]7]7^7^;bFlQwHn>f>f?e:`7^7^6[6[6[7[8Y9Y8Y8Y8Y8X8X8X7X7V7V5U5U5U5U5U5V5W4V4V3V3U4U4U4U4U4T4T4T4T4T3Q3Q3S3R4R4R4R3Q2P2O1O5S;W<Y9V4R1O1N1M1M1M1M1M1M1M/N/N2P6S1O/N/N1O2Q2Q2P0O.M-L.M.M.M.M-K-J-J-J-J-J-J-J-J-J-J-J-I,I+H+J+J+J+J+J+J+J+J+J+J+J+J*J*J+K+J*I+I+I*H+J+H+I+I+I+I+I+I+H+H+J+J+J*I*I
+J/N0Q-M,I*I)K)I(I)I,K-L)I(H(H)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H)K(J(J(I'H'H(I)K*L+M+M,N+M*M*M+M+M+M+M+M+M,N,N-P-Q.R8\9]3V0S/S.R.Q.Q/R/S/S/U/U/U/U/U/U/V/V/V/V/V/V/X/X/X/X/X/Y/Y/Y/[/]/]/]1^0^0_0_0_0a0a1a1c1c1d2e2e2g2g2h3i3j2k1l1l3o3o3p3p3s3t3t4v4w3x2x3x4z4z4z4|5}6~6~6~6Å8Ç9Ç9Ç9Ñ9Ö9â;å;è<ë<í=ï>ô?ö?ö@úAû@ü?†@¢A¢A°A†BûBûBùBùBùBúBùBùBùC†B†B†C¢C¢C£B§B•B•A£A°A†Aù@ú@õ?ò
=ï
=ì
;í
:è
:ç
:å
9ä	7à;âCéBé;à8Ü
5Ñ
5Ñ
5É
4Ç
3Å	3
3
2}
1{
1z
0x	0v	/t	/s	.q
.p-o.M.M.M.M.M.M.M.M.M.M.M.M.L/K.K.K.K-J-J-J-J-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J.J/K/K/K/K/K/K/K/K.K.L.M.M.M/M/M0N0N0N0N0N0N0N0N0N2O1O0P0P/O/O/O/P/R/R/T/S0S1R1S1T0S0T0S/S/S0T0U0U0U1V1V0U0U1V4Y7[8\7[6Y3V2V2V1V1V1V2W1W1W3X4X4X4X5X5X5Y4Z3Y4Z4Z4Z5\6]7^6_6_6`7`7_7`7^7^7^7^7^8]7^7_8b8d9e:e9e9d:e;e;e:e:e:f:e;f:f:f:f;g=h=g=h<h<i<h>h@iBhBjAj@j@jAjBkBkBkBlClClClCmBlBlBlBmCnCnCoEpFpJsQzP{IuEpEpErEqEqEqEqEqEqEsEsEsEsEsEsEsEtEtFtFuFuFvFvFvFvFvFvFvFvFvFvFvHwHwHwHwHxGwGwHxGwGwGxHyIyIyHxHxHyHyHyHyHyHyHzH{I{I{I|I|I|I|H}I~I}J}K}J}H~I}K~MMNNÅNÇNÇOÇNÇNÇOÉNÇOÉNÉMÉMÉMÉMÉNÉQÑPÑQÑRÑQÉPÉRÑSÖSÖSÖTÖQÜPÖPÜOÖPÖPÖPÖPÜPÜPáOáNÖMÖMÖMÑMÑNÖMÑMÖLÑLÑLÑLÑKÉKÑKÇKÇJÅJÅMÑTâQáLÉIÅIJHGHÄHÄHÄGF}G}H}H}H}H~G}G|G}G}G}G}G|G|G|F{FyFzG{H|H|G|G}G~H~IJJKÄLÅMÇMÅNÅNÅNÅOÑSá"Vâ"Uà SÜ QÑ RÉ RÉ!SÜ!SÜ TÜ TÜ TÜ Uá!Uá Uá Uá!Và!Và!Wä!Wä!Wã Wã"Wç#Vé"Vè"Yë$]ì#\ë#Xè#Vç#Vç#Vå#Wã#Wä"Wâ"Wâ"Wà"Wà#Wà#Wà#Wà"Vá"Vá"Uá"UÜ"UÜ"UÜ"UÜ"UÖ#UÜ"TÑ"UÑ"UÑ"TÑ!TÉ!SÉ"SÉ"TÇ!TÅ!TÅ&YÜ([à$YÖ TÄR R Q~ R}!R}!Q}R}!R} O{ O{O{N|O|PzPyNwNwNwMwLvLvLvKuKuKuKuJtJtKtJsIrIrHpHpGoGnGnGnElElDlDlCkCkBjAiAi@h?h@gAg?h?g>e?f>e>e>e>b>b=b;b9a9b:a:`:`:_:_9^9^8]8^9^9]9]8\8\8\8\8\8\8\8\8\8\8\7[6Z6Z7[7[6Z7[6Z4Z5Z5Z6Z6Z6Z6[7\8\8]7\7[7[8_9b8^7[9]<`;_9\7Z6Y7[7[7[8Z9Z;\BaB`>^;\;[<[;Z;Z;Z>\>\>\>\>\>\>\>\>\>\>\>\>\?\DcJjJiDb?\>\>\>\?\?]?]?]?_@^A^EbJfJfFcFbJh!Qo"QoKiGdF`D^B]B]A]A]A]@]@]A^B^C]C]D^A]@]?\>\>\?\>[=\<\<\<\<\<\<\<]>a>a<]<Z<Z;Y;Y;Y;Y<Z;Y9X8W8W8U8U8U8U8U7V7V7U6T7V6U6U7V7V7U7V8W8X;[:\9\7[8]9]7]6]7^8_>fLrLrEmAi;a7]6]6]6[6[6Z7Z8Y8Y8Y8Y8X7W7V7V6U7V7V5U5U5U5U5U4V4V4U3U3U3T4T4T4T4T4T4T4S4S4S3Q3Q3Q3Q3Q4R3Q3Q1O3Q8V<Y;X7T3Q2O1N1M1M1M1M1M1M1M0M/N2P4R3P1N1O2P3Q0O/N.M.M-L.M.M.M.M.M-K-J-J-J-J-J-J-J-J-J-J-J-I-J,J+J+J+J+J+J+J+J+J+J+J+J*J*I*I+J,K+K+K+J*H*H+H+I+I+I+I+I+I+I*J*I
*I*I(H)I/N2Q/O,K+I)I*J
)H(H*J-L+J(H(H(H)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H)K(K(K(I(I(I)J+K+L+M+M+M+M*N*N+M+M+M+M,N+M,N,N-P-Q3X;_6[1U/R.R.R.R.R/S/S/S/U/U/U/U/U/U/V/V/V/V/V/W/X/X0Y/X/X/Z.[/[/\/]/]0]1^0^0_0_0_0a0a1a1a1b1c2d2e2g2g2h3i2h0k0l1m2n3o4o5p3q3q3s4u3v2u2u3w4x4y4z3z4{5|5~5~6Ä6Å6Å7Å8Ñ9Ö9á:ã:å:é;ê<í=ï>ñ>ò?ö@ú?ú>ú?û@ù@ù@õ?õ@õ@ô@ô@ô@ô@ô@ô@öAúAúAúBûBûAû@ü@üA†@ü@ù@ú?ö?ô?ò=ï
<í
<ê
;ê
:ç
9ã
9ä
8à
7á=âCç=â9Ö5Ñ
4Ç
5Å	4Å	3	3~	2}
1{
2{
1y
0x
/v	/u	.s
.r
-p-o-m.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K.K-J-J-J-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J.J.J/K/K/K/K/K/K/K/K.K.L.M.M/M/M/M0N0N0N0N0N0N/M/M0N1O0N0N0O0O0O0P.Q.Q/R/R/R/R0R0S/R/S0T0T0T0T0S0S0T1V1V1U1V4X8\:]6Z3W3U3T3U2U2V3W2V2W3W3W4V4X4X4X4X5X5X5Y4Y6Z6Z6Z6[7[7\7^7_6^7\6\4\5\5\6]6]6]6]7\7\8_8a8b9c9b9d:e:e:e;e:e:e:e;e:e:e;f:f;g<f=g=h<h<h>i>h?hAiAjAj@iAiBjAjAiAkBkBkBkBlAkAkBlBlBlCmDoEpItNyNzIuErEpEoDpDpDpEqEqEqErEsEsEsEsEsEsEsDtEtFtFtFtFtFtFuFtFtFtFvFvFvFvFvFvFvFvFvFvFwFwFwFwGxGxGxHyHwHxHxHyHyHyHyHyHyHyHyHyHyHzH{I|I|H}I~I~J}J|K~J~I|J|K}L~L~L~MÅMÅMÇMÇMÅMÅMÅMÅMÅOÉOÉOÉOÉOÉOÉNÉNÉPÉOÉNÑPÑRÉQÉQÉQÑRÑOÉOÑOÑOÉOÉPÉOÑOÑOÖOÖMÑLÑLÑLÉLÉKÇKÇKÉLÇLÇLÇLÇKÅKÅKÄIJÄOÉSáRÜLÅIÄIÅIIHGHH~GF~F}G}E{F{H~H}G}G}G}G}G|G|G|G|G|F{FyFzG{G{G{G{H|H}H~IJJKÄLÅMÇMÅNÅNÅOÉSÜ!TáRÖQÉPÇQÇQÇQÇ RÖ!SÜ!SÜ!SÜ SÜ TÖ!UÖ Uá Uá!Và!Và!Và!Vâ VäVä!Wã"Wç"Wê"Yë"Zí#Xè"Uå"Uå"Uå"Vã"Wä#Xä"Wâ"Wà#Wá#Wá#Wá#Wá#WÜ#UÜ$VÜ#UÖ#UÖ#UÖ#UÖ#UÖ"UÖ"TÑ"TÑ"UÑ"UÑ"UÑ!TÉ!TÅ!TÅ!TÅ"UÇ'Zá'Zá#VÉRÅRRQ~Q}R}Q|!P|!Q}!P} O|N{N{NzOzOxNwNwNwMvLvLvLvKuKuKuKuJtJtJsJsJsIrHrGnFmEmEmElEmDlDlDlCkCkAi@h@h@h@h?h@f?f>f?e>d=d>c=c=d<b<a;a:b9a9a:`9_8^8^9^8]8]8[8\9]8\8\8\7\8\8\8\8\8\8\7[7\8\6[5Z5Z5[5[4Y4Y4Y5Z5Y6Z5Y5Y5Y5Y5Z5[6[5Z5Z5[7]8a7^8\:^;^8\7[7Z7Z7[7[7[8Y;\?^@_=\:[9[9Z:Y;Z<[<[<[>\>\>\>\>\>\>\>Z>Z>Z=[>\DaKiJiEdA^>\>\>\>\?\?\>\>\?]@]B_HeHeGcFcJfOm"SqMjHeDaC_B^A^B^A^@]@]@^@]@]A^C_B^B^?\?\?\?\?\=[<Z<Z<Z<[<\<[<Z<[<]=`=`;];\:Y;Y;Y;Y:Y:Y9X8W8W7V8U8V7U7V7V6U6U7T7T7U6U5U6V5U6T7U7V8W:[9[7[6Z6[7[7]6]6]6^9aElQvMs@h8_6]5]6\6[6Z6Y7X6X6X6X7X7V6V6V6V6U6V6U5U5U5U4U4U4U3T4T4T4T4T4T4T4S4R4R4R4R4R4R3Q3Q3Q3Q3Q3Q3Q3Q6U:Y<Z:Y6S2O2N1M1M1M1M1M1M1M1M/L.M2P5R3Q1N1P1O0N/N-L-L-L-L.M.M.M.M.M.M.K-J-J-J-J-J-J-J-J-J-J-J-I-J,J+J+J+J+J+J+J+J+J+J+J+J*J*I*H+J+K+K*J*J*J+I+J+K+K+K+J+J+J*I)I)I)I(I'I*K1Q0Q-L*J(H(I)I)H(H+K+J(H'H(H)H)I)I(H(H(H(H(H(H(H(H(I(I(I(I(I'J'J(K(I(I(I*K+K+L*M*N*M+M*M*M+M+M+M+M+M+M+O-O-P.R8\:]3X.S.R.R.R.R/R/S/T/U/U/U/U/U/U/V/V/V/W/W/W/W/X/V0W0Y1Z0[/[/]0]0]0]1^1_2_2`1`1`1a2b2b2b2b1c1c2e2g3h2h2h2h1k1k1l1l1m2n3p2p2p3r3s3s4u4u3v3w3w3x3x4z3z4|4|4}5~5~67Ç8Ö8Ü9â9ä:å;ç<è<ë;ì=ï>ò>ô=ô=ô=õ>ö=ô=ò>ò>ò>ñ>ñ>ñ>ñ>ñ>ñ=ï>ò?ö@õ@õ?õ?ö?ú?ú?ú>õ>ö>ô=ó=ï<î;í<ê:è:é
8ä	7à6Ü6Ö9Ü?â@â9É8É	3Ä	3Ä
4	3~	2}
2{
2{
1x
2x
0w
/v
/u
/t
.r
,p,o-n-n.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K-J-J,I,I-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J/K/K/K/K/K/K/K/K.K.L.M.M/M/L0L0M0N0N0N0N/M/M0N1O0N0N1O1O1O0P/P/P/Q/R0R0R1S1S0S0S0S1T1T1T1S1S1T1T2T3V6Z9]7[5Y3V2U2S4U4U3U3V4X3V3U4V4V4V4V4X4X4X5X5X4X4Y6Z6Z7[7\7[7\7]8]7\7[7[5[5Z5[5\5\5\6]7\7\8]8]8^8`7_8b9d:e:e;e;e;e;e:e:e;e;e:e;g<f<f=h=h=h=h=h>h?h@jBjAiAiAjAjAjAkAkBkBkBlAkBkBlBlBlBlDoGrLxMxHtErDqCnCmDpDpDpDpDpEqEqEqEqEqEqEqEqErDsEsEsEsEsFtFtFtFtFtFtFtFtFtFtFtFtFtFuFvFvFvFvFvFvFvFvFvGxGwGxHyGxGxGxHyHyGxGxGxGxHxGxHyHzI{I|I|I|I|I|K}L~K}J}I|I|J~LLMMÅMÅMÅMÅMÅMÅMÅNÇOÉNÇNÇNÇMÅMÉMÉOÉNÉNÖOÑPÉOÉOÇPÇPÇPÉOÉNÑMÇMÇMÇMÇMÇMÇMÉMÇMÇMÑLÇLÅKÄKÅKÇLÇLÇLÇKÅKÄJI~I~MÇTàQÜJÄJIHIHÄHÄGH~H}G}G}G~G~DzEzH}H}G|G|G|G|G|GzGzF{F{F{FzFzFzFzG{G{H|I}I}I}IJÄLÅLÅMÇMÅNÅOÇRÑ TÜ RÖQÑPÇPÅQÇQÇQÇQÉQÑ RÖ!SÜ!SÜ!SÖ!TÖ!Uá!Uá!Uá!Và!Và!Uá!Uà Và!Vâ!Vã!Wé!Yë"Xë#Wé!Uå!Uä!Uä!Tâ!Uà!Và"Wâ#Wà#Vá#Vá#UÜ"UÖ"VÖ!UÑ!VÑ VÑVÑVÉ UÉ UÉ UÉ!UÑ!UÇ!TÇ TÇ TÇ TÅ SÅ!TÇ"UÉ%XÖ([à"UÇSQRQ~Q~Q~P}P| P} P} O} O}N|NzOzOzOxNwMvLvLvLvKuKuKuJtJsJsJsJsJsJsIrGqGqGnFmEmDmDlDlCkCkCkBjAi@h@h@g@f@f>f>e>e>d>c>b=b>b<b<c:a:a:`:`:`9_8^8]8\8\8\7\7[7[8\7\6[6[6Z5Z6[6[6[6[6[6Z5Z5Z5[4Z5[5[5[5[4Y4Y4Y5Y5Y5Y5Y5Y5Y5Y5Y4Y4Z4Z4Z5Y6\6`7^8]9^8[7[7[7[7[7Z7Y7Y:[>^@_<[9Z9Z9[9Y:Y;Z<[<[;Z<Z<Z>Z>\>\>\>Z>Z>Z>Z=[A^HeJgEc@_>\>[>Z>Z>[>[>\>\>\?\A^FcHeEbEcHeNk#Sq OmHeFcC`B_B_A^A^@^?\?\@^@]@]A^C`A^?\>\?[?Z>Z=Z<Z<Z<Z<Z<Z<[<[<Z<Z;[;^<`;^;\:Y;Z;Y:Y:Y9X8W8W8W7V7T7U6T6T7T6T6T7U8U8U7U6T6T6T6S5T7V8W9Y8Y7Y6X6Z6Z5[5\6[6\8_AgPvPv@g7^6]5[6[4Z4Y5X6X6X6X6X6V6V6V6V6V5V5U5U4T4T4T4T4T4T3S4T4T4R4R4R4R4R4R4R4R4R4R4R3R3Q3Q3Q3Q3Q5R:V>\=[7T4R3O2M2M1M1M1M1M1M1M0L/L.L/N3Q4R1N1M/N.M.M.M-L-L-L-L.M.M.M.M.M.M-K-J-J-J-J-J-J,I+H+H+H,I,I,J+J+J+J+J+J+J+J+J+J+J+J+J+J+J+I+I+J+J*J*J*J+J+J+J+J+J+J+J+J*I(H'H'I(J*K/P2S-M*I)I(I(I(H)H)I+K)I(H(H(H(H(H)I(H(H)I(H(H(H(H(I(J(J(J(J(J'J'J(I(I(I)I+K+K+M*M*O*M+M+M+M+M+M+M+M+N,O,P-O.O3U;_8[2V.S.R/S/S/S/S/T/U/U/U/U/U/V/V/V/V/V/X0Y0Y0Y0Y/W0W1Z1[0[0[0]/]/]0]1^0_1_2`2`2`2b2b2b2b1b1d1d2e2g3i2h2h2h3i3i2j1j1l1n2p2p2p3q3q3r3s3s3t3u3u3u3v3x3y3y4z4{5}5~5~68É8Ñ8Ü9à9ä9ã:ç:é:ê<í<ï<ï<ó<ó<ó<ó<ó;î<î<î<í<í=ì<í<í=ì=í>ï>ñ>ó>ò>ò>ò?ô=ô=ò>ò>ó=ï<î<ì;ë:è:ç
9å
9ä	7à	6Ö	6Ñ6É;Ü@à=É
5}5	3}	3}	3}
3{
2{2y3y
2w
1v	/u	.t	.s
.r.q,p,n,m+l.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K-J-J,I,I-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J-I-I.J.J/K/K/K/K/K/K/K/K.L.M.M.M.L0L0M0N0N0N0N/M/M0N0N0N0N1O1O0N0O0O0P0P0P2R2R2R1Q1Q1Q1Q2T2T2T2R2R2T2T4U7Y;_8\2X1V3V3U3T3U3U4U4V3U4U4U4V5V5V4V4X4X4X5X4X4X4Y6Z6Z6\6\7\7]7]6Z6Z7[7[7[6Z6[5\4[5\6]7]7]7]8]7\7]7_8b9d9d:e:e;e;e:e:e:e:e9e9e;g;g;f<g>h=g=g>h?h=h>i?i@iAj?i=i=j=j>k@j@jAkAkBkBlAkBlBlEoLwMxHsDpDpDpCmCmDpDpDpDpDpEqDpEqEqEqEqEqEqErEsEsEsEsEsEsEsEsEsFtFtFtFtFtFtFtFtFtFtFtFtFtFuFtFvFvFvFvFwFwFwFwFwGxGxHyHyGxGxGxGxHxGxHyHyIzI{I|I|I|I|I|I~I|I|I|H}H}I}L|L~L~L~L~MÄNÅMÉMÇNÅNÅNÅMÇMÇMÇMÉMÉLÅLÅMÅMÇMÇMÑMÑNÇNÅMÇNÇMÇLÅLÅLÅLÅLÅLÅMÇLÅLÅKÄKÄLÅKÄKÅLÇKÇJÇJÇJÅJÄJI~NÇTàOÑKÄH~H~HH}E}E~F~GH~H}H}G|D|D|D{DzG|G|G|G|G|G|G|GzFyFzF{F{F{F{FzFzG{G{G{H|H|H}IJÄLÅMÇLÅLÄOÇ!PÑ!QÖPÖOÉPÉPÅPÅPÅPÅPÅPÅQÇ RÖQÑ RÖ RÉ RÉ!Uá!Uá TÜ TÜ!Uá!Tá!Tá!Tá!UáVâXçXèVé TåUã Vä!Uä!Tâ!Uá Uá Uá"Và"Uá"TÖ"TÖ!TÑ!UÑ UÑ UÑUÉUÉTÉTÉSÇSÇSÇ TÇSÅSÅSÇRÄSÅ"UÑ'Wá#UÉ SÄQ~SRR~Q~P}O}O}N|N|N|N|N|N|NzNyLxLvMvMvLvLvLvKuKuJtJtJsIsJsJsJsIrGqFpEoFnFmDlDmDlDlCkBkBiAh@h?h?g@f?f?f>e>e>e>b>b>b>b<a:a9a8`8`9^9^8]8\8]7\7\8\7\7\6[4Z5[5[4Z4Z4Z4Z4Z4Z4Z4Z5[4Z4Z4Z4Z4Z4Z4Z4Z4Z4X4W5W5W5W4W4W3W3W4Y5Y4Y4Y4Z4Y5Y6\6`8_8^5[5Y5Y5Y7[6Z6Y8Y9Z>_@^=[9X8Z9Z9Z9Y:Y:Y;Z<[:Y<[<Z>Z>\>\>\>Z>Z>Z>Z?]GdJgFcA^=\=\=Z=Z>Z>[>[>\?[?[?\EbHeDaDaFdKi$Qp#PoJhEbC`B_B_A^@]@]@^?\?\?]?]@]@]@]@]>\>\?[<X<X<Z<Z<Z<Y<Y<Z<Z<Z;Z;Z;[;]<`;^:[:Y;Z;Y:Y:Y9X8W8W8W8W7T7T6S7T7T7T7T8U8U7T7T7T7T7T6T5U7V8W7V7V7W6W6X6Y5Z5[6[5[4[=dJrMtBi9`6]4Z4Z4Z4Y5X5W6X6X5W5V6V5U5U4U3V4U4T4T4T4T4T3S3S4T4T4R4R4R4R4R4S4S4R4R4R4R4R3R3Q3P2P3Q7T=Y>\:W5S2P1N1M2M2M1M1M1M1M1M0L/L.L.M1P3Q1O0L.J.M-L.M.M-L-L.M.M.M.M.M.M.M.M-K-J-J-J-J-J-J,I,I,I,I,I+H+J+J+J+J+J+J+J+J+J+J+J+J+J+J+J+I+I+I+J+J+J+J+J+J+J+J+J+J+J+J*I(H'H'I)K/P4T/P(I(I(I(I'J(J)H*H(I(I(I)I(H(H(H)I(H(H(H(H'H'I)J)J)K)K)K)K(K(K(J'I'I(I)I+K+K+M*M*O*M+M+M+K+M+M+M,P,P-Q-Q,N1Q9Z<`6Z1U/S/T/S0S/S/S/U/U/U/U/U/U/V/V/V0W/W/X0Y/X/X/X.Y.Y/Z/Z/[0]/]/]/]0]0^0_0_2`2`2`2b2b2b2b1c1d2e2e3g3i2h2h3i2h2h2j2j2k1m1m0n1o2p3q3q3r3r3s3r3r3s3t3w3w3y4z4{4{4{5}6~7Ç6Ç7Ö8Ü9á9à9å:ç:é;ê;ë:í:í;ì;ì;ì;ì;ë;ë;ë:ê:ê:è:ê;ê;ê;ê<í<ì<í;ì;ì;î;ï<ñ<ñ;ï;ì;ì:ê:ê9é9ç8ã	6á	6á	6Ö	5Ñ
5Ç
8Ç?Ü@Ü9Ä4|3{	3{	2z	2y
2x
2x
1x
1v
1v	0u	/t	.t
.r
.q-p-n,m,l+k.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K.K.K-I-I-I-I-I-I-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J-I-I.J.J.J.J.J/K/K/K/K/K.K.L.M.M.L/L0L0L0M0N0N/M/M0N0N0N0N1O1O1N1O1O1N0O0P1Q1Q1Q1Q1Q1Q1Q1Q1S1S1R2R1Q4V8\:^6Z4V2U2U2T3T3U3U3U4U4V3U4U4U4U4U4W4W4X4X4Y4Y4X4X5Y7[6[6]6\7[7[6Z6Z6Z7[7Z7Z7Z6[5Z4[5\5\5\5[5Z7\7\7]7\8`8a9d:e:e;e;d:d:e:e:e9e9f9f:f:f:f;g;g<g>h@h@g@i?i>h>h?i?i?j?i>i>i=j=k=j>i?i=iBlEoKuNyGqDnCmCmAm?l?m@mDoDpDpDpBo@m@mCpEqEqEqEqEqDpCpDqEsEsEsEsEsEsEsEsEsDtDtCtDtFtDtDtCtCtFuFuFtFtEsEsEuFvFvFvFvFvFwFwFwFvFvFwGxGxGxGxGxFwFwGxGxH{I|I|I|I|I|I|I|I|I|K}KI~I~L~L~L~M~NÅNÇNÅNÅNÅMÇMÅMÅMÅMÉLÇLÇMÇMÇLÅLÅLÅMÇMÇMÇNÇMÇMÅLÅLÅLÅLÅLÅKÄKÄKÄKÄKÄKÄKÄKÄJKÅJÅJÅJÅJI~MÇTàQáIHIH~G}E}E}E~F~E}E}F}H}G|E{DzDzDzDzD|D{EzG{GzGzFzFzFzF{F{F{FzFzFzFzF|G{H{I{I}J~KLLÄLÄNÅPÉPÉOÇMÄNÅPÉPÅPÅ PÅPÅPÅPÅQÉQÑPÑ OÉ RÑ RÖ RÖ!SÜ SÜ TÜ TÖ TÖ!Tá!SÜ SáTàVå VåTä SàRá Sà TáTÜ Sá Sá TÜ TÜ TÜSÖSÖSÉSÉTÉ TÑSÉRÅSÇRÅRÅSÇSÇRÅRÅRÅQÄR"UÉ$WÜ"UÑQÄQO~N~OO~O~O~N}N}N|MzMyMyNyMxLxLxLxLvLvLvKuKuJuIvItJtJtJsJsJsHrGqFpEoEoEoDnDmDlDlClAkAk@j@hAh@f?f?g>f=e=d=b>b>b=a<`;`;a:a9`9_8^8^8\8[8[7[6[6[5[5[6\4Z5Z4Y5Y5Y4Y4Y4Y4X4Y4Y4Y4Y5Y4Y4Y5Y5Y4Y4Y4Y4Y4Y4W4W4X4W4W3W3W3W3W3X3X3X4Y3X3X4Y6]8a9_7\5Y5Y5W5W5W6Y7Y8Y;[>];Z9X9X8Y9Z8Y8Y9Y:Z:Z:Z:Y;X;X=Z>Z>Z>Z>Z>Z=Y>\FdLgIeA_=[=[=Z=Y=Y>Y>Y>[?\?[>[C`GdC`C`FcJh"Qo$RpNjIeD`C^B^A^@]@]@\@\?\?\?[?[@[@]?[?Z>Z?Z=X=X=X<X<Y<Z<Y<Y<Z:Y:Y:Y;Z;Z;\;_;^;[:Y9X9X9X9X8W8W7V7V8U7T7T7T7T7T7T6S6S5T5T5T6U6U6T6T6T7T8V7V7V8W6W6X6Y5Z5Z5Z5[9^>dCiKqFm;a5Z4[4Z4Z2X2W3W4X4W4W4V4V4U4U4U3T3U3U3T4T4R4R3R3R4R4R4R4R3Q3Q2Q2Q3Q4Q3Q2Q2Q3O3O2P3P4Q:X?^>[8V3Q2P1M1M1M1M1M1M1M1M1M0L.L.L/L1N2P/N-L-L.L.M.M.M.M.M.M.M.M.M.M.L.K-J-J-J-J-J-J-J-J-J-J,I+I+J+I+I+J+J+J+I+H+H+H+H+H+J+J+J+I+H+H+H+I+I+J+J+J+J+J+J+J+J+H+H+J+J*I*J'I'I-L3S2R,K(I(H(I(I'H(H)I(H(H(H(H(H(H(H(H(H(H(H(H(H'I'I'H(H)J(J'J'J'J(K(J'I'I)I*K+L+L+M*M*O*M+M+M+L+M+M,N-Q-Q-P.O,N3U=_8\3X1T.R.S.S/T/T/T.T/U/U/U/V/V/V/V/V/X0X1X1X1X1X0Y0Y1Z2Z2Z1[0[/[/\0]0^0^1_1_2_2`2`2`2b2b2b1d1d2e3f3g3h2h1f1f2j2j2j3k3k2k2k0n0o2m2o1n1p3o3p3q3r2q2s2t3w3w3x3w3x4y5{5}6~67Å7É7Ü8á8à8â9ç9é9é9é9ê:ê:ê9ê9é9å9å9å9å:å9å9å:å:å;ç;é:è:è:è:ê:ê:ê;ë;ë:ë:ê:è:è:ç9ä9ä8â
6Ö
6Ö	5É
5Ç
5Ä8Å@Ñ=Ç7~
5z
3y
1x
1x
0x	/w	/v
/u
/u
/u	/s	/r	.o
-o
-n
-m
-m
,k+k+k.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K.K.K-I-I-J-I-I-I-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J/K.J.J/K/K/K/L/M/M.M.L0L0L0M0N0N0N0N0N0N0N0N0N1N1N1O1O1N1O1Q1Q1Q1Q1Q1Q1Q1Q1Q1R1S1S2S5Y;^:^4Y3U3U3U3U2T2T3U4U4U4U5V4V4U4U4U3U3W4X3W3W3X4Y5Y5Y6Z7[6\5\5[6Z6Z6Z6Z6Z6Z7Z7Z7Z7[6Z6[5[5[5\5[5Z5Z7\7\7\8`8a8a:d:d;e;d:d:e:e:e9e9e9f9f:f:f;g<g<g=g@h?g?h>i=h=h=h=h?h@i@i>i=j=j=j?j@j>iCoJuKvGrCpAnBm@m?l?l?mAoCoCoDpAm?l@m@m@mBoDpDpEpEqDp@m?o@oApCrCrAp@p@pApCrDsCrBqAp@pBrCtCtCtDuDtDrEsEsEsEtFtFtFvEuDuDvEwFwFvFvFwFwGxGxGxGxFwFwGxGxHyIzHzH{I|I|I|H{H{H{H{H{I{I|K}K}L~L~NÅNÇMÅMÅMÅMÅMÅLÄLÄLÇMÉMÇMÅMÇLÅLÅLÅLÅLÅLÅMÇMÇMÇLÅLÅLÅKÄKÄKÄKÄKÄKÄKÄJJJJKKJI~J}MRÖMÇG|HHIG|E|E|E{E|E}D|E|E{DzDzDzDzDzDzDzC|C{D{F{G{FzFzE{FzFyEyEyEyFzFzFzF}G|H|J}J}J~I}J~LÅMÇNÇMÄMÄMÄMÄNÅOÅPÅPÅ PÅPÅPÅPÉQÑQÑ PÑ OÉ OÉ OÉ PÑ PÑ RÖ SÜ!TÜ TÜ!SÜ!SÜ SáTàUã Uä Tà SàRá SÜSÖSÖSÜRÜ RÖ SÜ SÑSÉSÉSÉSÉTÉQÇQÇRÇSÇRÅRÅSÇRÅRÅQÄPQÄ!TÉ#VÑ"UÑQÄQÄPO~N~M}N~N}N}N~N|N|MzMyMyMxLxLxLxLvLvKuKuKuKuJtIsIsJtJsJsJsHqGpFpEoEoDnDnDnDnCmCkCkAk@j@h@h?f@f?e=d=d=d=d=c;b;b<b;a:`:a9_8]9^9^8]7\7[7[7[6[6Z5Y5Y5Y4Y5Y5Y5Y5Y5Y5W5W4W5W5W5W5W5W5W5W3V3V3V3V3V4W4W4W4W3V3V3V3V3X3W3W3X3X3X3X3X3Y4Y7]8a5\5Z5Y5X5W5W5W5W8Y:Z<[<[:Y9X8W8W9X8X8X9Y:[:[:Y;Y;Y;X=Y>Y>Y>Y=Y=Z<XEbKhJfC`>\=[=[>Y=Y=Y>Y>Y>[?\?\A^DaB_B_DaHe Nl#Rp OmJfEbC`A^@]@]@]@]@\?\?\>[?[?[@[@[>Y>Y=X=X=X=X=X=X<X<Z<Z<Z;Y:Y:Y:Y:Y:Y;\;_<_;[9W8W8W8W8V7T7U7V7U8U8U8U8U7T7T6S6S6S5S5S5U5T6S6S6S6S7T7U7V8W7V7W6X5W5X6Z5Z7\:`:a<bFkHn?d5[4[5[4Z2X2W2W4V4V4V4V4V4T4T4T4T3T3T3T4R4R4R3Q3Q4R4R3Q3Q3Q3R2Q2Q3Q3Q3Q2Q2Q3O2O2P6S=Z?\<Y6S4Q2P1O1M1M1M1M1M1M1M1M0L/L.M.L0L2O0N.M-L-L.M.M.M.M.M.M.M.M.M.M.M.L.K-J-J-J-J-J-J-J-J-J-J,I+I+J+J+J+J+J+J+I+H+H+H+H+H+J+J+I+H+H+H+H+I+J+J+J+J+J+J+J+J+J+I+I)I)I(H(H(H*K2R2Q.M*I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(J'I'I(I(J(J(J(J'J'J(J(I)J*J+L+M+M+M*M*M*M+M+M+M+M+M,N-Q-Q-P-O/Q7Y=`5Y1T/S.R.S.T.T/U/U.T/U/V/U/V/V0W0W0X/V0W2X2X2X2Y1Z1Z2[3[3[2[0[/[0\1^1^1^2_2_2_2`2`2`2a2b2b2e2e3e4g4h3g2g1f1f3i2h2h3k3k3k3k0l0m0m2n1n1n2n3p3q3q2q1q2t2t2v2v2v3w4y4z4{6~6~6Ä6Ç6Ñ7Ö7Ü8à8â9ä9å9å9é9é9é9é9å9å8ã8ä8â9ä8ä8â8â9ä9ä:å:å:è9é9é9é9é:è9è8è9è9é9ç8ä
7à6à6Ü6Ö
5É
4Ç
4
4~9Å@É;	5y	2x
2w
1v
0v
0w	/v	/u
/u	.t	.r	.r	.p	-o
-m
-m
,l
,k
+k+i+i.M.M.M.M.M.M.M.M.M.K.K.K.K.K.J.J.J-J-J-J-I-I-I-I-I-I-I-I-I-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J/K/K/K/K/K/K.L.M.M.M-L-L.L/M/M.M.M/N.M.M.M/M/M0N1N1O0N0N0N0O0P1Q1Q1R1Q1Q1Q1R1R1Q2S6Z9]8[3W2T2T3U3U3U3U2T1S2T2T2T2T3T4U4U3V3W3W3W4X4X5X6Y6Z7[6Z5[6[5Z5Y5Y5Y6Z6Z6Z6Z6Z7Z7Z7Z7Z7Z7Z7Z7[6Z5Z4[5\6\7\7]7^8`9b9d:d:d:d:d:e:e:e:e9e9e:e:e;f<g;e;e<f?h?h>h>g?h?i=h<h=h>h?i?iAiAh?h@jClItJuFqBm>k=k>k>k>k>nDqDpDpBn?l@mAnAn?lBnBnBnBnBo@n>n>n>n>n>n?n>n>n>n?o?o?p?p?p@p@p@o@p@q@q@qBsCtCtCtCrDrEsEsEsEsDtDtCtDuDuDuDuDuEvEvFwFwFwFvFvGwFwGxGxGxGxHyHyHyGyGzG{GzH{I|I|I|J|J|K}L~L~KL~L~LÄLÄLÄLÄLÄLÄKÄKÄKÄKÄKÄKÄLÅLÅLÅLÅLÅLÅLÅKÄKÄKÄKÄJJJ~J~JJI~I~I~I~H}H|J|NÄQÉLÅH}G|G|EzCyDyCyCzCzCzCzDzDzDzCzCzCzCzCzByByByByC{CzCyDzDzDyF{FzFyEyEyEzEyEyEzF{H|I~II~I}KÄMÇLÇLLÄLÄMÄMÅNÅOÄOÄ PÅ OÇOÇPÉPÉPÉPÉOÉ OÉOÉ PÉOÉOÖQÜ RÜ RÖ RÖ RÖRÑRÜ Uâ UâSáRÜ SÖRÖRÑRÉQÇQÑ QÑQÑRÑQÉQÉQÅQÅQÅQÅQÇQÅPÅQÇQÇQÅQÄQÄPQÄRÅ!TÉ"UÑQÄO}M{M{M{N|N|N|M{M{LzLzLzMzMyMyLxKwKuKuKuJtJtJtJtJtIsHrGrHrGrGqGqFpEoEoDnDnDnDlElCkBjBjAi?h>g>g>e>e=d=d=c=a=a=a;a;b;b:a9_9^8]8]8]7\7\6[5Z6[5Z4Z4Y4X4X4Y3X3X3X3X4X4X4V4V4V4V4V3V3V3V3V3V3V3V3V3V3V3V3V3V3V3V3V2U2U3U3V3V3W3V3U3U3U3U4X5Y4Z6]5_4[4Y4X4W5W5W5W6X9Z;Z9X8W9W8V8V8V8W8W8W8W9X9X9X:X;Y;X<X<X<X=X<X<Y@]KhKgB_<Z<Y<Y<Y<Y<Y>Z>Z>[=Z>[B]E_C]?\C`Hf Ml$Sq!PnJhDaB_A^A^@]@]@\>\>Z>[>[>[>Z>Y>Y>Y=Y=Y<X<X<X<X<X<X<X<Z;Y;Y:Y:Y;Z;Z;Y;Y;[:\:]:Z:X9W9W:W:V9V8U8U8U8U6S6S7T7T6S6S6S6S6S6S6S6S6S6S6S7T6S5R6V7V6V6U5V5W5W5Y6Z:_:_7[7\?dHmDj:_5Y5Z4Y4X4X4X4V4V4U4T4T4T3S3R3Q3Q3Q3Q4R4R3Q3Q3P3P3Q3Q3Q2P2P2P2P1O1O2O2P2O2P3Q;X@]>[8U3P1O1M1M1M1M1M1M0L0L0M0M0M0N.M.M.L0L/M.M.M-L-L.M.M.M.M.M.M.M.L-J-K.K.K-J-J-J-J-J-J-J-J-J,I,I+H+I+J+J+J+I+I+J+I+H+H+H+H+I+I+I+H+H+H+H+H+H+I+I+I+I+I+I+I*I)I(I(H(H(H(H)H+J1Q3S-M)I)I)I)I(H(H(H)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J(J'J'J'I'H(H)I(I)J+K+L+M+M+M+M+M+M+M+M+M+M+M,N,N-Q.R.Q+N,O3V<^9]2V/S.R.S.T.T/U/U/U/U/U/U/U0V0V1V2W0V2X2X2X2X1Y1Z2[2[2[2[3[3]3^3^2]2^1^1^2_1_1_1_2`2`2`2a2b2c2e4f4g2f2f2f3g3g2g2h2h3i2i2i3j2i1i0k0k0k2k2m1m1m2o3p0o1q2s1r1s2t2u2v4y5z4{3|4~45Å5Ç5É5Ñ7Ö7Ü6à5â5â6â7ä5â5à6à5á5Ü6Ö7Ü6Ü5Ö6Ö6Ö5Ü7à8à8ã7ä6ä6ä7ä8ã8å7å6å6ã6â5á
5Ñ
5Ñ
5Ç
43
33|6}=Å;6{
1v
0u
0u	.r	.q	.q
/r	.q	-q	-q
-o
-o
-m
,l
,l
,k	+i
*i*h+g+h.M.M.M.M.M.M.M.M.M.K.K.K.K-J-J.J.J-J-J-I-I-I-I-I-I-I-I-I-I.J-I-I-I-I.J.J.J.J.J.J.J.J.J.J.J.J.J.J.J/K/K/K/K/K.K-L-L-L-L,K,K,K-L-L.M.N.M.M.M-L-L/M0N1O1O0N0N0N1P1Q1Q1Q1Q1Q1Q1Q1R3T7Z:^6[2V0S2T2T2T3U2T2T2T0S1S2T3U3U3U4U4U3V2V2V2V3W4X5X6Y6Z6Z6Z6Z5Y4Y4Y4Y5Y6Z6Z6Z6Z6Y6Y6Y7Z7Z7Z7Z7Z6Z6Z5Z4Z5[6[7\7]7^7^8a9c9d:d:d:d:d:d;e;e;e:e:e;e;e;e;e;e<f<f<f>h?h?h=h=g<h=h=h=h>h@hAh?h@jEnHsFqBn?j>i=j>j>j>kBoDpDoCo@m>k=k=k=k>l>l?m?m>m>n>n?n?n?m?m?m?m>m>n>n>n?n?o?o?o?p?o@n@p@q@q@q?q?q@r?q@qCqDrDrDsDrDrDrDtDtDtDtDtCtCtDuEvFvEvEuEvFwFvFvFvFvGwHxHxHyGxFyFzFzGzH{G{G{G{H{K}L}K}K}L~L~LKKLLÄLKKKÄKÄKÄKÄKÄLÅKÄKÄKÄKÄKÄKÄKÄKKJ~J~I~I~J~I~H}H}HH}H|F{L~PÇLI{FzEyEyExDwCxCxCyCyCyCyDyDxDxCyCyCyCyCyBxBxBxBxByByBxBxBxBxEzEyFyEyEyEyEyEyFzG{H|III~KLLLK~MÄLÄMÄMÄNÄOÄOÄ PÅ OÅOÄOÄOÄPÅPÇOÇOÇOÇOÇOÇOÑPÖQÜQÖQÖ RÖRáRáTàSáRÖQÑQÑ RÑ RÉQÇQÇQÅ!QÅQÅQÅPÄPÄPÄPÄPÄQÅQÅPÅPÅQÅPÅPÄOPPQÄ!SÇ SÇQÄO}N{MzMzMzM{M{N{MzMzLyLyLxLxLxLxKwJvJtJtJtJtJtHrHrGrFqFpFpGqFqFpEoEnDnDnDmCkCkCkCkBjAi@h?g?g=e=d=d<c<c=c<b;`:`;a:`:a9^9^8]8]7\7\7[7\6[4Z4Z4Z3Y2W4X3X3X3X3V3V3W3W3X3W3V3V3V3V3V2U2U2U2U2U2U2U2U2U2U2U2U2U2U2U2U2T2T3S2U2U2U2U3T3T4T3U3V5Y4Y4Z4\4Z3W3V4V4V5W6W8Y:Y8W8W8V8U8U8U8U8V8W8W8W8W9W9W:X:X:X<X;X;W<X=Y@]JgJfDa=[;X<X<X<Y<Y<Y>Y=Y=Y=Y>\D_D_@]B_FcJh#Rp#RpMjFdC`A^@]@]@\@[@[>[>Z>[>[=Z=Y=Y>Y>Y=Y<X<Y<X<X<X<X;W;W;Y:Y;Y:Y:Y;Z;Y;Y:Y:Z:[:\:Z9W9W:X9W9V9U8U8U8U7T6S6S6S6S6S6S6S5R5R5R5R6S6S6S6S5R5R5R5U5U6V5U5V5W5W5Y7[9^7\4Z5Z;`EjGm<b5Y4Z4Y5Y5Y4X4V4U4T3S3S3S3S3R3Q3Q3Q3Q3Q3Q3Q3Q2P2N2P2P2P1P1P1P1P2O2N1M1O3P8U>]?^<Y7T3P1N1M1M1M1M1M1M0L/L.L.M.M.M.M.M.M.M/L.K.M-L-L-L-L.M.M.M.M.M.L.K-J-J-J-J-J-J-J-J-J-J-J-J,I,I,I+H+I+J+J+J+H+H+J+I+H+H+H+H+I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*I(H(I(I)J(H(H)H.N3R0P+K)I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(J'J'J(K(I(I(I*K*K+K+L+M+M+M+M+M+L+L+L+L+M+M+M-N.O.R.R-Q-O-P7Y;_3X0S/R/U.T.T.T.T/U/U/U/U/V0V0V0V1V2W2X3Y3Y2Y2Y1Z1Z2[2\2]3]3]3]3^3^3^3^2^1^0]1^2a1`1`1`1`3c3c2c4g5g3e2e2e2e3f3g3g4h3h3h3i3i3i3h2h1j0i0i1j1l1l1l2n3o1o2p1q0q1r3s2t2v3x4y4z3|4|4~5~55Ç5É5Ñ5Ö5á5á5à5à4Ü4Ñ4Ñ4É5Ñ5É5É5É5É5É5É5É5É6Ö7Ü6á5á4Ü4Ü5á5á6â5â5à5à5Ü4Ñ4É5É
4Ä
4~3}	3~3{9}>Ä8}2w
0u
/s
/r	.p	/o	.o
.o.o
-n	,n	,n
-m
-l	,k	+j	+j	+h
+g*g*f*f.M.M.M.M.M.M.M.M.L.K.K.K.K-J-J.J.J-J.J-I-I-H-H-H-I-I-I-H-H.I-I-I-I-I.J.J.J.J.J.J.J.J.J.J-I-I.J.J.J/K/K/K.J.J.K-L-L-L-L,K,K,K-L-L.M.O.O.O.N-L-L.M/M0N1O0N0N0N0P0P1Q1Q0P1Q1Q2R4V9[9\4X1U0R/R1S1S1S2T2T2T1T0S0S1S2T2T2T3T4U3V2V2V2V3W4X6Y6Y6Z6Z6Z6Z5Y4X4X4Y4Y5Y6Z6Z6Y6Y6Y6Y6Y6Y6Z7Z7Z6Y6Z6Z5Z6[6[7\7\7^7^8`8a9c9d9d9d9d9d:e:e:e:e:e:e;e;e;e:e;f;f;f>g>g>h>h<f<g=h=h=h=h=h=h@jDmGpEp@l>k=i>i>j>i?iBnEpEpCn?k>j=j=k=m=m=l>k>l>l>m=m>n>n>m?l?l>k>k>k?m?m?m?m?m?m?n?n?n?n?o?p?p?p?p?p@q?p@o@pApBqBrDrDrDrDrDrEsEsDsCsCtCtDuEuEuDuDuEvFvFvFvFvFvGwGwGxGxFyFzFzG{GzFzG{G{GzJ|K|K}K}L~K}K}K~K~LKKK~K}KKKKÄKÄKÄKÄKK~KKKKKKJ~J~I~I~I~I~H}H}H~H}H|L~OÅLF{EyEyDxDxCwCwDxDxDxDxDxDxDxDxDxCwCwCwCwCwCwCvCvCwBxBxBvBvBvBvExExFxFyExExExExEyG{H|I~I~J~KKKK~J}LÄLÄLÄLÄNÄOÄOÄ PÅOÄOÄOÄOÄOÄOÄOÄOÄOÅOÅNÅNÅOÑOÑPÑPÑPÜQÜRáRáQÜQÑPÉQÉ RÉQÇQÇQÇ QÄ QÄ PÄOO P POOPÄPÄQÄRÅ QÄOON~N~ P"RÅ!QÄN}M{M{NzNyNyMyLxMyMyMyLxLxKwKwKwKuKwJvHuItIsIsIsIsFqFqEpEoEoEoEoEoEoDnDmDlDnDmCkAkAkAk@h@h?g?f>e<c<c=d<c;b<`;a:a9`9`8_8]9^8]8]8]7\6[6\6[4Z4Z4Z4X3W2W4W3X2W2W3V2U2U2U2W2V3V3V2U2U2U2U2U2U2U2U2U2U2U2U2U2U2U2U2U2T2S2S2S3S2S2T2U2U3V3T3T3U3X4X4X4Y4[4Y3V3U3T3T5V8W8W8W8W8W8U8U8U8U8U9V9V8V8V8W9W9W:X:X:X;Y;X;W<XA^IfKhEa>[=Y=X<W<X<Y<Y=Z>Y=Y=Y>YA\D^A^A^DbIg!Pn#TrOlHeC`B_A]@[@\@[?[?Z>Z=Z=Z=Z=Z>Y>Y>Y>Y=Y<X<Y<X<X<X<X;W;W:W:X;Y:Y:Y:Y:X:X9X9W9Y:Z;[;Y9W9W9W9V9U8U8U8U7T6S6S6S5R5R5R5R4R4R4Q4Q5R5R5S5S4R4Q4Q4T4T5U4T5U5W5W6Z8\7\3Y4Z4Y8\@eHm@g9]3Y3X4X4X4W3U3S3T2S3S3S3S3R3Q3Q3Q3Q3Q3Q2P2P1P1N1N2N1O1P1P1P1P2O1M1M5R;X?\>[8W4Q2O1M1M1M1M2M1M1M1M0L/L.M.M.M.M.M.M.M.M.M.M.M-L-L.M-L.M.M.M.M.M.K-J-J-J-J-J-J-J-J-J-J-J-J,I+H+H+I+I+J+J+J+J+H+H+J+I+H+H+H+H+I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+I*J)I(I(H(H)I-M2S2Q,L)K(J'H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(J'J'J(J(I)J*K+K+K+K+L+M+M+M+L+L+K+K+K+L+M+M,N-N.P.R-Q,P-P2U;^9]1U/R/R/U.U.T.T.T/U/U/U/U/U/U1W2X2W2W2X3Y2Y1Y2[1Z1Z2[2\2]3^3^4^4^4^4^4^3_3`2_2_1`0`1`1`1a3c2b1d5g4f2e2e2e2e3f3g3g3g3g2g3h3i3i3g2g2i/i0g0j1k1k1k1m2n2n1o1o0o2q2r3s3v3w3x3y2{3{4|4}5~44Å5Ç4É4Ñ4Ö4Ö4Ö4É4É4Ç4Ä5É4Ç4Ä4Ä5Å4Å4Ä5Å4Ä5É6Ñ5Ñ4Ñ4Ñ4Ñ4Ö5Ü5Ü4Ü4Ü4Ö4Ñ3É3Ä4Ä
3
3}	3|	2{4z<~=}5y1u
/s/s	/p	.n	.m	-m
.m
.m
-l	,l	,k
,l
-k	,j	+i	+h
+g*f*f*f*f.M.M.M.M.M.M.M.L.K.K.J.J.K-J-J.J.J-J-I-I-I-H-H-H-I-I-I-H-H-H-I-I-I.J-I-I-I.J.J.J.J.J.J.J-I-I.J-I-I.J.J.K-I-I-J-K-K-K-L-L-L-L-L-L-L.N.N.N-M-M-M.M.L/M0N0N0N0N0P0P0P/P/P0P2S7W:\9[3V0S/R0R/R/R0R0R1S1S1S0S1S0S0S1S1S1T2U4V3W2V3W3W4Y4Y5Y6Z6Z6Z5Z5Z5Y5X4X4Y4Y4Y5Y5Y6Y6Y6Y6Y6Y6Y6Y6Z6Z5Y5Z5Z5Z5Z6[6[7\7]7^8_8`9b9c9c9d9d9d9d:e:e:e:e:e:e:e:e:e9e9e9f;f;e<f<f;f;f<h<h<h=g=h?iDmHpGpAk=i=j=j=i=h?iBlDnDoBn?j>i=i=j=j>l>l=k>k>k>k>k>l>m>m>l>k>k>k>k>k?l?l?l?l?l?l?m?m?m?m?m>n>n?n@n?n@o@o@o@o?p?p?pCrCrCrCrCrDsEsEsEsCsCtCtDuDuDuDuDuEuFvFvFvFvFvFvFwFwFyFyFyFzFzFzFzFzFzH{J|J}J}K}K}K}K}L~L~JJJ~K}K~K~K~K~J~JJJJKKKKKKJ~I~I~I~H}H}H}G|G|I|K}NÄL~I|EyDxDxDxDxDxDxDxDxDxCwCwCwCwCwCwCwBvBvCwBvBvCvCuCvCwCvBuBuBuBtDvEvEvFwEvDvEwExExGzI}I}I|J}J}K}K}K|K|LL~L~LMNOÄ PÄOÄOOOOOOOOOÄNÄMÄOÅNÇMÅMÇNÑPÖQÜQÜPÑPÉOÉOÅOÄPÅPÅPÅPPO~N}N}O~N~N}N}OPQÄQÄO~N|N|N|N|O}N|M{MyMyKxKxLxMyMyKwKwKwKxKwKwJvJvJvIuHuGtGtHsGrGrGrFqEpEpEoEoEoEoEnEnDnCmClDkClClBjAjAj@i?g?g>f>d>e<c<c<c;a;a;`:a9`8_8_8]8]8]7\7\6\6[5[5[4Z4Z3Y3Y3X3X3W3W2V1V1V2W2U2U2U2V2U2T3T2T2T1T2T2T2T2T2T2T2T2T2T2T2T3T3T3T3S3S3S3S3S4T3T2U2U2U3U3U3U3W4V4U4W5Z4W4T3T3S3S6V7V6U6U7V7V7U8U8U8U8U8U8U8U8U8V8W8W:X:X:X:X;Y<Y@]HeJgFcA]=X=X>X<X<Y<Y<Y>Z>Y>Y?Z@[C^A\?[A^Ig!Pn$Tq!QnJgEbB^A\@[?[?[?Z>Z>Z>Z=Z=Z=Z=Z>Y>Y>Y>Y=Y<X<X<X<X<X<X<X;W:W:X:Y;Z;Z:Y:X:X9W9W9X:Z;[:Z8W8W9W9V8U8U8V8U7T6S6S6S5R5R4R4R4R4S3Q3Q4Q3Q3R4R3Q3Q3Q4S4T4T4T4T5V6W7Z7Z5Y3X4Y3Y3Y:_EiDi:^3Y3X3X2W2V2T2S2S2S3R3R3R3Q3Q3Q3Q3Q3Q3Q2P2P1P1P1P2P2P2P2P2P2O0N2O7S>Z?[;X5R2O1N1M1M1M1M1M1M1M1M1M0N.M.M.M.M.M.M.M.M.M.M.M.M.M-L-L.M.M.M.M.L.L-J-J-J-J-J-J-J-J-J-J-J-J-J,I+H+H+J+J+J+J+J+J+H+H+J+J+J+H+H+H+I+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H*I)I)I)I
(H
(H,K1Q1R-M)I
(I
(I'H(H(H(H(H)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(J(J(J(J(I(I*J*J*J+K+L+M+M+M+M+L+K+K+K+K+L+M,N,N-O/S.R,O+O-Q6Z<`5Y0V.R/S/U.U.T.T/U0V0V0V/V0U0U1W2X2X2X2X2Y2Y1Z2[2[2[2[3\2]3^3^4^4^4^4^4^3_3`3`2_0_0`1b1b3c3c2b5f5g4e2d2e2e3e3e2f3g2g2g2g2g3h3h3g2g2g/g/f0i1i1j0j0j1k1l0m0o1o2p2q2s2u3u3u2u2x3y4z4{4|4}44Ä4Ä4Å4Ç4Å4Å3Ä3Ä3Ä4~4Ä44}4~44~4}4}45Ä4Ä4Ç4Å4Ç4Ç4Ç4Ç4Ç3É4É4Ç3Å3Ä33}3}
3|	2y
2x6z<}9z2u
/s
/r.p	.o	-m
-l
-l
-k	-k
-k
-k	+i	+i	+i	+i	+g	*f
*d*d*d*e*e.M.M.M.M.M.M.M.K.K.K.J.J.K-J-J.J.J-I-I-I,I,H-H-H-I-I-I-H,H,H-I.J.J.J-I-I-I-I-I-I-I-I-I,I+H+H-I-I-I-I-J-L,J,J,J-K-J-J-L-L-L-L-L-L-J.M.M-L-L-L.M.M-M.M.M/M/M/N/O/O/P.P.Q2S7Y:[7X2T0R/R/R/R0S/S/R/R0S0S0S0S1T0T0S1T2U2V2V2V1U2V3W4X4Y4Y4Y4Y4X3X3X3X3X3X3X3X3X4Y4X5X6Y6Y6Y6Y6Y5Y5Y5Y5Z5Z5Z4Z4Z4Z5[6[7\7\7\8_8_8`8`8a9d9d9d9d:e:e:e:e:e:e:e:e:e:e:d:e9e;e<f<f<f;f<f<g;g=g?iBlDmEnBl>h=h=j=j<i?jBlDnBl?k>j=i=i=j>i>i>i>i=k>k>k>k>k>k>k>k>k>k>k?l?l?l?l?l?l?l?l?l?l?l?l?l?l?l>m>l>l>l?n?n?n?o?p?p?q?pAr@q@qArCrCrDrDrCrCrCtCtCtCtCtDuDuFvFvFvFvFvEuDuDvEwFxFxEyFzFzFzFzFzFzH{H{H{I{I{K}K}K}K}JKK~L~L~L~L~K}J|I}I~I~JJ~J~J~J~JJI~H}G|G|F{G|H}G|G|K~LI|GzFyDyDxDxCxCxDxDxDxDxDxCwAvAvAvAvBwBvBvAvAv@u@uBuBtCuBvAuAtAtAtBtDvEvEvEvEvEvEwFvFwGxI|I{IzIzJ{J{K|K|J{L}L}L}L}M~NNOOOOOOOOOOOONNMÄLÄMÇOÑPÖQÜPÖNÅNÅMÅMÄNOÄOÄOÄPPN~M~M~L}L|M|M|ORÅQÄN}M|LzM{N|O}M{LzLyLxMxJxJxKxLxLxJwIvIvJwIvHuHtGuGtGtGtGtFrFqFqFpFpEpDoEoEoEoDnDnDkClAm@kAjBiAiAkAi@h@h?g?g?f>d<c<c<c<c;b;`9_8`8_7]7]8]6]6]6]5\5[4Z4Z4Z4Y3X3X3X3X3X3X2W2V1T/T/U/U0U0S1U0T1T2S3S3S1S0S3S3S3S3S3S2R2R2R2R2R3S3S3S3S3S3S3S2R2R2R3S2S2S2S3S3R4S3T3S3S3U5Y4V4T4T3S4T5U4T4T4T4T5T7T8U8U8V8U8U8U8U8U8V8W8W9X8W8V9X:X>[EbKhGdA_>Y>X=X<X;X;Y<Y=Z=Z=Y>Z>[A]A]>Z@\Ec Om&Us#RpLhEbB_A\@[@[?[>Z>Z=Y<X=Y=Z=Z=Z>Z=Y=Y=Y<X<X<X<X<X<X<X;X;W;W:W:X:Y:Y:Y:Y:X:X9W9W9X:Z:Z9Y8W8V8U8U8U8U8U8U8U5R5R5R4R4R3Q3Q3Q3Q3Q3Q3Q3Q3Q3Q3Q3Q3Q3Q3S3S4T4T5U7W7X5W3W3X3X3Y3X7[AeFj=b4Z2W2W2W2V2S2R3S3Q3Q3Q3Q3Q3P3P2P2P2P2P2P2P2O2N2N2N2N2N2N2O2O4Q9V>Z=Y8U4Q1O1N1M1M1M1M2N0L0L0L0L0L/L.M.M.M.M.M.M.M.M.M.M.M.M.M-L-L.M.M.M.M.L.K-J-J-J-J-J-J-J-J-J+J+J+H+H+I+I+J+J+J+J+J+J+J+H+H+J+J+J+J+J+H+H+H+H+H+H+H+H+H)H)H)H)H)H)H)H)H)I)I)I)I(H*I/N2R.N)J(I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J(J(J(I(I(I)I)I*J+M+M+M+M+M+M+L+K+K+K+K+L+M,N,N.P.R.Q,N+N0U;^:^1V.T.T.T/U/U.T.T/U0V0U0V1W2W2W2W2X2X2X2Z2[2[2[3\2[2[3\3[2\3^3^3^3^4^4^4^3_3`3`2`1`0_1a3b3c4d5d8g6f4d2c2e2e3e3e2f3g2g2g2g2g3g3g3g3g2g/f.g/h0i0i0j0j1k1k0m/m0n2n2q2r2s2t2t2s3v3x3y2y2y3{4|3}3~3~343~2}2}3}4|4}4|4|4|4}4|4|4|4|3}3~3~3~333322Ä3Å2Ä
1~
1}2}2|2z
2z
0w3x9{;|5w
0s
.p.p.n
-m
-l
-l
-k
,i	+h
,i
,i	+h	+h
+h
+g+f
*e
*c)c)c)c*d.K.K.M.M.M.M.K.K.K-J-I-I.K-J-J.J.J-I-I-I,I,H-H-I-I-I-I-H,H,H,H,H,H,H+H+H
+H+H+H,I,I,I,I,I+I+H,I,I,I,I-J-J-J,I,I-J-J-J-L-L-L-L-L-L.J.M.M-L-L-L.M-L-L.M.M.N.N/O/O.M-M/Q4U:Z:Z4W1Q/P/R/R/R/R0T/T/S0R/R/R0S0T1U1T2T1T1U0U1V1U1V2V3X4Y4Y4Y2X3X3X3X2X1W2X3X2X2W3W4X4X5X6Y6Y6Y6Y6Y5Y5Y5Y6Y5[3Z3Y4[4Z5Z6\7\7]7\7]8]8_8_8_8a8b9b9d:d:d:d:e:e:e:e:e:e:e9e9e9e:f;f<f<f<f<f<f;f=gAkCm@k=i>h=h=g<g=h@kBmDnBl>j=j=j=i=i>i>i?i?i>i=i>k>k>k>k>k>k>k>k>k>k>k>k>k?l>k>k?l?l>k>k=j=j>k>k>k>l>l>k>k?l?l?l?m?m?n?o>n>o?o?o?p@p@p@q@qBrCqCrCrCrCrCsDuDuDuDuDuEvDuDuDuDvEwEvEwEwFxFxFyFzG{FzGzFzFzG{G{I{J|K{K|J}J}JJ~J~J~J~J~I}I}I~I~I}J|J|J|I}H}G}F|F{F{F{E{G|H}H|J|M~I|E{EzEyDyDxDxCxCxDxDxDxCxBwBwAvAuAvAvBvBuBuAvAvAu@uAuAtAtAtAtAtAtAtAtEvEuDuBtCvEvFvFuGwHxHyHyHxIyJzK{KzKzJzL|M}L}L}M~L}N~OO}O~O~N}N}N}O~O~O~O}O|N|M}M~LMÅOÉPÉQÑOÉMÄMMMOÄOÄOM~N}O~N|M~M~L|L{M|M|PÄOO~M{MzLyNzN{M{LzLzKyJxIwIxJyIwJwJxHvGvHvHuGtGuGtGtFsFrFsFrFqFpFpDoDoDoDnEoDnCmBlBlBkAkAk@k@j@i@h@i?g>f>f>e=d=d<b<a;a:a;b:a9`8^8^8]7\5[6]5]5[5[4[4Z4Z3Y3X3X3V3V3V2W1V0V0U/T/T/S/S/S0T1T1T/S/S0S0S1S/R/R0R0R0R0R0R0R0R0R0R0R0R1S1S0S0S1S1S1R2R2R2R2R2R2R3R3Q3R2R2R3S3U5W4V4T4T4T4T4T4T4T4T4T5T5S7T8U8U8U8U8U8U8U8V8W9W8W8W8V8W;ZDaIgGfC_=[=X=X>Y=Y;Y;Y<Y<Y<Y<Y>[?\@]?\>ZB`Kk$Us'Us!NlGdC`B^@[>Z>Z>[>Z>Y=Y<X=Y=Z=X>X=X=X=Y<X<X<Y<Y<Y<Y<X<X;W:W:W:X:X:X:Y:Y:Y:X:W:W:W9W:Y:Z:Z9X8U8U8U8U8U7T7T7T5R5R4S4R4R3Q2P2P3Q3Q4Q4Q3Q3Q3P3P3P3Q3Q3Q3Q3R4S6U6U5V3V3V2W2W3X2X4Y;`DfAe6]2W1U2U2U2S1R2Q3Q3Q3Q3Q3Q2P2P2P2P2O2N2P2P1O1O1O1N1M2M2M3P7S<X>[;X6S2N1N1M1N1M1M1M1M0N.L.L.L.L.L.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L-J-J-J-J-J-J-J,I+H,I+I,J,I,I,J+H+H+I+J+J+J+H+H+H+H+J+J+J+J+J+I+I+I+H+H+H+H)H)H)H)I)I)I)I)I)I)I)I)I)I)I)I-L2R0P+L(I'H(H(I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(I(I(I(J(J(I(K(J(I(I)J*K*L+M+M+M+M+K+K+K+K+K+K+K+K+M,N,O0Q-Q,O,O-P6Y<_6Z0V.T.T.T/U/U/U0V.U.U.U1V2W2W2W2X2X2X2Y2Z2Y2Y2[2[2[2[3]3[3\2\3^3^3^4^4^4^3^3_3`3a2`1`2a4a4d5e7e8f4c2b2b1c1d1d2e2e2e2e2e2e2e2f3g3g3g3f1f/f/f/h/h/i0h1k2l0l/l0m0n1p1q1q0r0r0s2u2v3w2w2x2y2z1{1|3|3|2}1|0|1{2{2{2z2y2y2z2z2z2z3z2y1y2|2|2{
2{
3|
3|
3|2}2~2~1}
1{
1z1y1y1x
0w	0u4y:{8x3s
.q
-n
.m
.l
-l	,j
,j,i
+h	+h
+g
+g
+f
+f
*f*e)e)d*c)c)c)b*b.L.L.M.M.M.M.K.K-J-J-J-I-J-I-I.J.J-I-I-I-I-I-I-I-I.J-I-I-I-I,H+H+H+H+H+H+H+H+H,I,I,I,I,J,K,I,I,I,I,J,J-K-K-K-K-K-K-J-J-K-L-L-L-J-J-L-L-L-L-L-L-L-L-L-L.M.O/O-O-L/N7W;[9Y4U0P/N/O/Q/R/S/R/R/R0S/R/R/R0S/T.T0S0T0U0U0U1V1V2W3W3W4Y3X2X1W2W3W3X2X1W2X2X2X2W3W3W3W4X6Y6Y6Y6Y6Y6Y6Y6Y5Y5Y4Y5[5[4Z5Z6Z7[7\7\7^8^8_9`8_8`8a9b9b:d:d:d:e:e:e:e:e:e:e9e9e:f:e;e<f<f<f<f;e<f@iDlCl=h;g<g<h<g<f?hBlCmBl?i=g=j=j=i=i=i=i>j>j>j>i>i>k>k>k>k>k>k>k>k>k>k>k>j>i>j>k>k>k>k>k=j=j>k>k>k>k>k>k?l?l?l?l?l?l?l?l>n>n?o?o?o?o?o>p?qBrCqCqCqBrBrBsBsCtDuDtDtDuDuDuEvEvFwDvEwEwEwFwFxFzG{FzGzFzF{F|G|G{GzG{G|H|G|H}I}I|I}I~I~I~I~I~I~I}J|J|J|I}G|F{E{E{G|G{G{F{H{I|K|J|EzE{DyDxDxDxDxDxDxDxDxDxCwBwBwBuBuBuBwBvBtAuAvAvAvAvAuAtAtAtAtAtAtAt@sEuEuBu@tCvEvFvFuGwHxGwHxHxIyJyKzKzKzKzL{L{L{L|L}L{N}N}O|O~O~N}N}N}O~O~O~O|N{N{M}M~MNÅPÉPÉPÉMÅLÄMÄMÄMNNOM}L}L|M{N~M~L{LzO}PÄN~L|LzM{MzMzMzKyKyKyKyJxIxHwIwKwHuHuHuGuGuHuHuGtGtGtGtFsFqFqFqFqEpEpCnCnDoDnDnCmBlBlBlBlAkAkAk@j@h@h?g?g>f>f=d;b;b<b<a;a:`;b:a9`8^8\7\6\5\5]5]5[4Z4Z3Y3X3X3X3X3W2V1V0V/U/U/U.T.T/T/T/S0S0S0S0S/S/S/S/S/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R0Q2R2R2R2R2R2R3R3Q3R2R2R3S3U5W4V4T4T4T4T4T5U5U5U5U5U5T5R7T8U8U8U8U8U8U8V9W9W8W8W8W9W@^GeGeA_>[<Y=X=X>X=X<Y<Y<Y<Y<Y<Y?\?\?\>[@]Hf#Ss&Wv#QoHeC`B_@\?[>Z>Z>[>Z>Y>Y=X=Y>Z>Y>Y=X>X=Y<X<X<Z<Z<Z<X<X<X;W:W:W:X:X:X:Y:Y:X:V:V:V;W9W:Y;[;[:X8U8U8U8U8U7T7T7T6R5R4R3Q3Q3Q2P2P3Q3P3P3P3Q3Q3P3P3P3Q2P2P3Q3Q3R5U5U4T3U3V2V2W3W1W3X8\?bBg:`2X1U2U2U2S1R2R3R3R3Q3Q2P2P2P2P2P2P2O2P2P1P1P1P1O1O2M4O;W>[<X7T3P2N1M1M1M1M1M1M0M/M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K-J-J-J-J-J-J-J-J,I+H,I,I-J-J-J,I+H+H+I+J+J+J+H+H+H+H+J+J+J+J+J+J+J+I+H+H+H*I)H)I)I)I)I)I)I)I)I)I)I)I)I(H+J1P2Q,L)I(H'H(H)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J)K)K(K(J'I'J(K(I(I(I+K+M+M+M+M+M+K+K+K+K+K+L+K+K+M-P/S/R-P+O,P0S:[:]2V/U/U.T/U/U0V0V1V.U.U-U0V2W2W2W2X3Y3Y2Y2Y2Y2Z2[2[2[2[3\3\2[2[3^4^4^4^4^4^4^3^4a4a4a3a3`4a5d6e9f5c3c2b2b1b1c1d2e3e2e2e2e2e2e2f2g1d2d3e2e0e/d/f/f/f0h1i1i0j/i/l/l0n0o0p0p/p0r1u1u1u2u3w2x2x0w1x2{2{1{0z/y0x1x1x1w1w1w1w1w1x1x1x1w1x1x1y1y
1z	2z	2z
2z2z2{1z1z
1z
1y0w0v
0v
/u	0t6y:x5t0p
.o
-m
-l
,k
,j	+h	+h+g
+f
*e
*e
*e
*e
*e
*e
)e)d)c)c)a)a)a*a.M.M.M.M.M.K.K.K-J-J.K-J-J-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I,H+H+H+H+H+H+H+H+H,I,I,I,I,I,I,I,I,J,J,J,K,K-L-L-L-L-L-L-K.J-K-L-L-L-K-K-L-L-L-L-L-L-L.L-L-L-L.M.N-N0P5V:Z7V1Q.O/O/N/O/P/P0P/P/R/R0S/R/R/R/R/R.R/S0U0U0U1V2V2V3W3W3W3X1W1V1V2V2V2W1W1W2X2W2W2W3W3W3W4X4X4X5X6Y6Y6Y6Y4X4X5Y5Y5Z4Y5Z5Z6Z7[7\7]8_8`8_8_8_9`9`9a9b9d9d9d9d9d:e:e:e:e:e:e:e:e:e;e;e<f<f;e<f@iCkBj>h<g<g<g;g<g>hBkClAj>i=h=g=h=h=h=j=j=j=j=j>k>j>i>i>i>k>k>k>k>k>k>j>i>i>i>i=i=j>k>k>k=j<j<j=j=j=j>k>k>k?l?l?l?l?l?l?l?l?l?l?l>n>n?o?o?p?qAqBqBrAq@q@qArBsCrDrDtDtDuCuCtDtEuDuDuEwEwEwEwFxGxGxFxFzFzF|F|F|FzFzF{E{H}F{G|I|J|I|I|I|I|I|I|I|I{I{I{J|I|G|G{G{G{H{GzH|FzH{J|H}DzCzCyDxDvDwDxDxDxDxDxCwCwBwBwBwBuAtAtAvAvAuAvAvAtAvAv@u@sAtAtAt@s@sAt@sBtDuBu@uAuDuEuFvGwGwGwHxIyIyIyJzKzKzKzL{L{L{L{L{L{M|N}O|O~N}N{N{N|N}O~O~O|N{N|M}M}M}MOÇPÉNÇLÄK~M~M~M}M|M|MzLyKyKyL{K|KzKyLzQ~RKyKyKyLzM{KyJzJxJxJxIxIxIxIxIvIvHuHuGtHuGtGtGtGtGtGtGqFqFqFpFpFqDoDoCnBmBlBlBlCmBlBlBlAk@j@h@h@h@h@g?f?g=d=d<c:a:a:a:a9`9`9`9`8_8^7]6\5[5]5]5[4Z3Y3X2W2W2W2W2W2W0U/U.T.T.T/U/S/R/R/R/R/R/R/R/S/S/S/S/S/R/R/R/R/R/R/R/R/R/P/P/R/R/R/R/R/R/R/R/P0P1Q1Q1Q1Q2R3Q3Q2Q2R3S3S3U5W4V4T4T4T4T4T4T4T4T5U5U5U5T5S8U8U8U8U8U8U8V8W8W8W8W9W=ZFcGdB_;Y;Y;W<X=X=X=X<Y<Y<W<Y<Y<Y@[?Z>Y>[Fd"Qo&Wu!RqKhD`B]@]>Z>Z>Z>Z>[>Z>Y>Y=X=Y>Z<Y<Y<Y=Y=Y<X<X<X<X<X<X<X<X;W:W;X:W:W:W:W:W;W:V:V:V:V:W:X;Z:Z9W8U8U8U8U8U7T7T7T5R4Q3Q3Q3P3P3Q3Q3Q3P3P3P3Q3Q3P3P3Q3Q2P2P3Q3Q3Q3R4T4T3T3U2U2U2U1W2W3X:]Ae>b6Z2V1T1T1R2R2R3S3S3Q2P2P2P2P2P2P2P2P1O1O1N1M1M2O2P6S<Y>[:W5R2N1M1M1M1M1M0L/L/M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.K.K.K.L.K.K.K-J-J-J-J-J-I-I-I,I+H,I-J+I+H+H+H+I+H+H+J+J+J+H+H+H+H+H+H+H+H+H+H+H+H*H)H)H)I)I)I)I)I)I)I)I)I)I)I)I)I(H(H.M1R-N*I(H(H(H)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J)K)K(K(J'I'J(I(I(I)I+K+M+M+M+M+M+K+K+K+K+K+K+K+K-M/R1T-Q-N,P-P5X;]6Y/T.T.T.T.T/U0U0V1V/U.T.U0V2W2W2W2X3Y3Y3Y3Y2Z2[2[2[2[2[3\3\2[2[3^4^4^4^4^4^4^4^4^4a4a3a3`4a5b8f9f4b3c2b2b2b2c2c2c3c2c1d2e1d1d1e1f1d2d2e2e1e0e/e/e0f1h0h/h.h.i/j/k0n0o0o0o/o/q/q0r1s1u1u1v2w0v0w1x1x0w/w/w/v0v0v0u0t0t0v0v0v0v0v1w1w0w0w0w
0w
0w
0w
0w0w1z1x0w
0w
0w0v
/u
/s	.r
0r8w7u0p.n.m-l-j
,i,i
+h
+f+f+f
*d
*c
*c
*c
*c
*c
)c)c)b)a)a)a)`*`.M.M.M.M.M.K.K.K-J.K-J-J-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I,H+H+H+H+H+H+H+H+H+H,I,I,I,I,I+H+H+I+J+J+J+J+J+J+J+J+J+J+J+J-K,K,K,K,K+L+L,K,K,K,K,K,K-L-L-L-L-L-L.M2R8X7X3S0P.M.N/O/O/O/O/O0P/P/R/R/R/R/R/R/R/R/R.T0U0U0U1V2V2V3W3W3W2W1V1V1V1V1V1W1W2W2V2V2V2V3W3W4X4X4X4X5X5X6Y6Y5Y4X4Y5Z5Y4Y4[6[6[6Z6Z7[7\8_8_8`8_8_8_8_8_9b9b9d9d9d9d9d:e:e:e:e:e:e;e:e:e;e<f<f;e>gAjBj>g<f<f<f<f<g?iBkCl?i=g=g=g=h=h=h=h=h=h=h=h=h=h=h=h=h=h=h=i=j=j=h=h=h=h>i>i>i=i=j=j>k>k=j=j<i=i=j=j>k>k=j=j>k=j=j>k>k?l?l?l?l?l>l>l?l?l?m>n?o?o@p?q?q?q@qAqCqCrBsCtCtCtCtDtDtDtDuDvDvDvEwEwFxGxFwFxFxFzFzFzFzFzGyHyH{FzGzH{J|I{I{J|I{I{I{I{I{I{I{I{I{H{I{I{H{DxDxDxFzG{G{E{DxCxCxDwDvDwDxDxCwBwBwBwCwBwBwBuAtAtAtAtAvAvAuAtAtAtAt@t@sAtAt@s@s@s@sAtAsAt@t@t@sCtEuFvFvEvFwHxHxHxIyJzKzJzJzL{KzKyL{L{L{M|N}N|N{N{N{MzMzN|M|M|N|M|M|M|M|M}MPÅPÅNL|L|M|M|M|M|L{LzLzKzKyKyJxIwKyP}P}N{JxJxKyKyLzKyIyJxIxIxIvIxIwHuHuHuGtGtFsFrGqFpFrFpFpFpFpEoFoEoDoDoBmBmBmAlAl@j@jAkAkAkAi?i?i@h@h?h>g>f=d<c;b;b;b9`8`8`9`8_7^7^7^7^6[6]5\4Z4Z4Z4Z4Z2W2W2V2U1T0T0U0S/R/R.R.R.R/R/R/R/R/R/R/R/R/R/S/R/R/R/R/R/R/R/R/R/Q/P/Q/R/P/P/P/P/P/R/R/R/R/R/P/P/P0P1Q1Q2R2Q2Q2Q2R2R2R3T4V4U4T4R4R4S4T4T4T4T5U5U4T5U5S7T8U8U7T8U8U7T7V8W8W9W;YEbGdC`>[;Y;Y;X<X<W=X=X<Y<Y<W<Y=Z=Y>Y>Y>YB_ Ol'Wu%VtLjEbA^?]>[>Z>Z>Z>Z>[>Z>Y>Y>Y=Y=Z<Y;X;X<X<X<X<X<X<X<X;W;W;X;W:W;W:W9U8U9U:V;W:V:V:V:V:W;X;Z:Z8V8U8U8U8U8U7T7T7T4Q3Q3Q3Q3P3P3Q3Q3Q4Q4Q4Q4Q3Q3P3P3P3P3P3P3Q3Q3Q3R3S3S4T3S2U2U2T2T2T2U7Z?bAc9\2W1T1T1S1S2R2R2R2Q3P2P3P3N2M1M1M1M1M1M1M1M1M2O7U<Y;X5R3P1M1M1M1M0L0L/M.L.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.K.K.K.K.K.J/K.K-J-J-J-J-J-I-I-I,I+H+I+J+H+H+H+H+I+H+H+J+J+H+H+H+H+H+H+H+H+H+H+H+H+H*G)G)I)I)I)G)H)I)I)I)I)I)I)I)I)I(H-L2Q.P*K(H(H(H)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J)K)K(K(J(I(I(I(I)I*J+K+M+M+M+M+K+K+K+K+K+K+K+K,L.O0S-R-P-N-P0R8Z:\4W/S.T.T.T.T/U/U0V1W/U/U0W1W2X2W2W2X3Y3Y3Y3Y2[2[2[2[2[2[2[2[2[2[2]3]4^4^3^3^4^4^3^3`3`3`4a4a7e9g7d4b3b2b2b2b2b2b2b2b2c1c2e1d1d1d1e1d1d2e2e1e0e/d0e2g2h0f.f.h.g/h0k0m0n0o0o/n/o/o0p0r0s0t1u1u.u/v0v0w/v.u.s/s0t0t0t0t0t0t0t0t0t0t0t/s/t/v
/u
/u
0v
0v
0v0v0w0w0w
0u	0u
/t	.r	.r	.r3t9w4r.n,l,j,i,i,i,g+f+f+e
*c
*c
*c
)`
)`*a
)`
)`(`(`(`(_)_)_*`.M.L.L.L.K.K.J.J.J-I-I-I.J-I-H-H-H-H-I-I-I,I,I,I-I-I,I
+H
+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*G*H*I*I+J+I)H)I)I*I+J+J+J+I,K,J,J+J*J*K*L+M+M+M+M+M+M+M+M+L,L-L.N4S8W8U2O,M-N-N/N/M/N.O.O.O.O.O.Q.P/O/P0R0S0R/R/R/R/R2T2T2T2U3T2V1U0U.U.U/U/U/U/U/T/T1V2V2V2V2V2V2V3W3W4X4X4X4X4X4X4X5Y4Y4Y4W4Z4Z4Y4Z5Z6[7[7[8[8\8_8`7`7`8_8_8_8a9a9a9c9d9d9d9d9d:e:e:e:e:e:e:e;e;d?fAhAj=g<f<f<f<f<f@iClAj=g;f;f;f;g;g=h<g<g<g<g<g<g<g=h<g;g;g;g;g;g;g;g<g<g<i<i<i<i<i<i<i=j=j=j=j=j=i=h=h=h<i<j=k<j<j<j<j<j<j=j=j>k>k>k>k>k>k>k>k>k>l=l>n=n=o=p=o>n?nApApArAqCqCsCsCtCtDtDtDtCtCtCuEvExEyFxExEyEyFyFyEyIyIyFxEyEyEyEyExFyFyGzH{H{I{H{I{I{H{H{I{H{GzFyExDwCwEyDxDxDxCuDvDvDvCuCvCwDxBwAvAvAvAvAvAuAtAtAtAt@s@sAtAt@s@s@s@s@s@s@s@s@s@s@s@s@s@sAtAt@s@sCsDtEuEvEvEvEuGuGvIyIyJzIyIyJzJyKyK{JzKzM|M|K{MzN{N{N{N{N{N|M|M|M{M|L{L{N}O}P~O}L{KzLyKxJxJyJyKzKxKxJwJwJwJxN| P~NzKvJuIwIwIwIvIuIvIwJxIwGtGtGtGtGtGsGsFsErEpFpFpFpFpEoEoEoEoDnDnDnCnBmBmBlAkAkAk@j@j@j@i?h?g>g>f>f<e<e<e;d:b:a:a:a9`8_8_7^6]6]5\5\5\5Z4Z4Z4Z4Z4Z3Y3Y3X3X2W1V0S/S.S.T.R.R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/R/Q/Q/Q/Q/Q/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P/P0P0P0P1Q1Q2Q2P2Q3T4V4T4T3Q3Q4S5R5R4R4T4T5U5S6S6S6S8U8U9U8U8U8U6U7V9W:XD_HeC`>[:X:X:X<Y<Y<X<X<Y<Y<Y<W<Y=Y=X=X>YA\Kh&Ut(Wv!PnEbB_?]>\=Z>Z>Z>Z>Z>Z>Y=X<X<X<X<Y;X;X;X<Z<Y<X<X<X;X;W;W;W;W;W;W;W:V9U9U9U:V:V:V:V9U9U9U9W:X:X9W8U8U7T7T7T6S5S4R3Q3Q4R3Q3P3P3P3O3P3P3P3P3P3P3P3P3P3P3P3P3P3P3P3Q3R3R3R3R2R2R1S1T2T1T4W:\Ac<`4Y2V2T1T1S1Q1Q2R2P3P3P3P2N2M1M1M2N1M1M2N2N4Q:W;Y8U2P1M1M2M1M0M.M.M-M-M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.L.M.L.K.K-J-J-J-J-J-J-J-J-J-J-J-J,I,I+J+J+I+I+H,I-I,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H*I*I*H*H)H)I)I)I)I)I)I)I(H)I,K2Q1P+J(I'H(I)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J)K)K(K(J(I(I(I*J+K+K+K+L+L+L+K+K+K+K+K+K+K+K+L.O2R1S-Q,N,P-O4W<^7Y1T0S.S.T.T.T/U/U/U.T.T0V0W1W2X3Y3Y3Y3Y3Y3Y3Y2Z2Z2[2[2[2[2[2[2[2[2]3]4^4^4^4^3^3^3^3`3`3`4b7d;h8g5b3a3a3c3c2b1b1b1b2b2b3c2b2b1b1c1d0c0c1d1d1d/c/d2e2e1g/d/e.f.g.g/j/k/l/l/m/m/n/n/n/n
/p
/p0r1r/r/s.t.t.s.r.p/p/p.p/p/p.p.p/q.p.p/p.o.p/s/s.r.r-t-r.r.s.t.t/u
.t	.r
-q
-q	.o1q7u8t0n,m+k+h
*g
*g
*e
*e
*c
*c
*c
)a
)`
)`
)_
)_
)_(_(_(_*`)_)_)^*^)].L.K.K.K.K.K.J.J.K-I-I-I-I-I-H-H-H-H-I-I-I,H+H+H,I,I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)G)H)I)H+I+I*H*I*I*I*I+J+J+I,H,I,I+H*H*H*I+L+L+L+L+L+L+L+L+L+M/O4T8W4S0O-M,M,M-M.N.O.O-N-N-N-N-O.Q-P/P/R/R/R.Q.Q/R/R.R1S2T1U1U2V0U/T.T.U.T.T.T/T/T/T/T0U1V2V2V2V2V2V2V3W4W4W4W4X4X4X5Y5Y4Y3X3X3Y4Z4Y4Y5Z6Z6[7[8[8]8_8_7_7_8`8_8_8_8_8_8a9c9c9d9d9d9d9d9d:e:e:e:d;d;c?f@g=g<f;e;e<f<f?hBkAj>h;g:f:f;g;g;g<g;g;g;g;g;g;g;g<g;g;g;g;g;g;g;g;g<g;g;h;h;h;i;i;i;i<i<i<i<i<i<i=h=h<h;i;i<j;i;i;i;i;i;i<j<i>k>k>k>k>k>k>k>k>k>k>k>m=m=m=m=m=m=n=n>n?p@pBpBpBrBsBsBsBrDrCsCtCtCuDwDxExExExEyEyEyEyEyEyEyEyEyDxDxFzFzEyEyFyGzGzFyH{H{GzGzGzGzFyDxEyCwDxDxCwDwDwCuCuCvDwCuBvBvCwAvAvAv@u@uAuAtAtAtAsAs@r@rAsAs@s@s@s@s@r?s@s@s@s@s@s@r@r@sAtAs@r@rBsDtEuDuDuDuEtGuHwHxHxIyIyIxJyJxKxJzJzKzL{M{L{MzMzMzMzMzMzM{L{L{LyL{KzKzL{M|N|M|KzKyKxKxJxJxJxKxJvJvJvJvKvLzO}N{JuItItHuHuHuItItHuHuHvHuFsFrFsFsFrFrFrFrFrFpEoEoEoEoDnDnDnDnCmCmBmBmAlAlAk@j@j@j?i?i?i?h>f>f<f<e<e;d:c:c:c9a9`9`9`8_7^7^6]5\4\4[4[4Z4Z3Y4Y3Y3Y3Y2X2W2W2W1V/S/R/R.S.S.S.R/R.Q/R/Q/Q/Q/R/R/R/Q/Q.Q.Q.Q.Q.Q.O.O.O.O.O.O.O.O.O.O.O.O/O/O/O/O/O/O.O.O/O/P/P/P.O.O0P/P/P0P0P1Q2Q3P3T4V4U4T4R4R4R4Q5R4R4S4T5U5S5S6S7T7T8U8U8U8U8U8U7V9WB]GbDa>[:X:X:X:X;X<Y<Y<Y<Y<Y<Y<W<Y<W<W<Y>[Fd$Sq(Wu#RpIgA^@]?\>[>[>Z>Y>Y>Y=Z=Y<X<X;X;X<Y<Y;X<Y<Z<Y<X<X;W;X;Y;W;W;W;W;W:V:V:V:V:V9U9U9U9U8U8U8U8U8V9W8W7V7V7U7T7T6S5T4T3Q3P3Q3Q3P3P3N3O3P3P3P3P3P3P3P3P2P2P3P3P3P3P3P3P3P3P3P3Q2Q2Q1R1S2S1S2U7Y?b>a7[2V2S1S1S2R2R2R3P3P3P3P2P2N3N2N1M1M1M3Q5T9V8U4S1P0L0L0L1M0L/M.M.M-M-M.M-L-L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.K.K.L.K-J-J-J-J-J-J-J-J-J-J,I,I,I,I+H+H+I+I+H+H+H,I-I,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H*H)H)I)I)I)I)I)I)I)I)I)I)I)I(H)I0O2P,K)I(H'H(H(H)I)I)I)I)I(H(H(H(H(H)I(H(H(H(H(H(H(H'H'I(J)K)K(K(J(I*J+K+K+K+K+K+L+K+K+K+K+K+K+K+K+K+K-M0Q1R.O,O,N.O/Q8[;]4X0T/S.S.T.T.T0V0U/U.T.T0V1W1W2X3X3X3X3X3Y3Y3Y3Y2Y2Z2Z2[2[3\2[2[2\2]3]4^4^4^4^3_3`3`3`4a4a5c:g:g5b4b4b4b4c3b3b1b1b1b2b2b2b2b2b2b1b1c0c0c0c1c1d0c0e2e1d/d/d/e.e-f.g.i.j.k.k.k/k.m.m.m.m.n/o/q/q.p.r.r.r.q.o.n.n.n.n.n.n.m.n.o.n.o.n.m.n.o.p-p-q-q,q,q-q.r.r.r-q.q
-o
-n	.n3q7t2p-l,j+h*g
*f
*e
*d
*d*b)b
)b
)a
(`
)`
)_
)_)_)_)_)^)_)^)^)])])\.K.K.K.K.K.K.J.J.J-I-I.J-I-H-H.I.I-H-I-I-I,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H*H*H*H*H+H+H,H+H+I*H)H)H*I*I*H+H+H+H+H+H+H*H+J+K+K+K+K+J+J+J-L0N5U5U1R-N+M+M+M+L-M-M-M-N-N-N-N-N-P-P-P,P.Q.Q.Q.Q.Q.R/T.S.S.T/U/U.T.T.T.T.T.T.T.T/T/T.T.T/T0U1V2V2V2V2V2V3W4W5V5V4X4X5Y5Y5Y4X3W3X3X3Y4Z5Y5Z6Z6Z7[8\8]8_8_7^7^8_8_8_8_8_8_8`9a9c9d9d9d9c9d9d9d9d9d:c;c>d?f=e:d;e;e;e=f?hCl@i=g;f;g:f:f:f:f;g:f:f:f;g;g;g;g;g;g;g<g<g<g<g<g<g<g;g;g;g;g;g;h;h;i;i;i;i;i;i;i;i<i<i;i;i;i;i:h:h;i;i;i;i<j<i=j=j=j=j=j>k>k>k>k>k>k>k>k>l>k>k=m=n=n=n>n@o@oApBqAqArBsBrCrCrCtCtCtCtDuEvEvDvDxDxDxDxDxExExEyEyDxDxEyEyDxDxEyDxFzGzH{GzEyDxDxDxCxCxDxCwCwCwCvDvDwBuBuBwCvCvAuAuAt@s@s@s@s@s@t@s@s@s@rArArAqBsBs@s@s@s@r?r?s?r@r@r@r@r@rArArAsArAr@rBsCtDtDuDuDtFtGuHvHxHxIyIyIwIwIwJwJyIzJzLzNzN{MzMzLyLyLyLyLzL{LyKxKxKzKzL{M|KzJzJyJwJwJwJwJwJwJwIvIvIuJvMxP|LzIvHtItItHsHsHsIrIrHqHqFqFrEqEpFrFrEqEqEqDqDoDoDoDoCnCmCmCmBlAlAkAkAk@j@jAkAk@j?h?h>h=e=e=e<d<d;c;c:c8a9b9b8a8`7^7^7]6]5[5[5[4Z3Y3Y3Y3Y3Y2X3X2W2W2W2W2W1T0T.T.S/R/R/R/R/R/R/Q.P/Q/P.O.O.Q.Q.P.O.O.N-N-N-N-M-M-N-L-L-L-L-L-L-L-L-L.M/N/M/M/M/M/M.L.M/O/P/P/P.O.O/P/Q.Q.P/P0P2Q3P3T4V4T3S3Q3Q3Q4Q5R5R4R4T5U5U4S5S6S7T8U8U9U9U8U7U8V>\GbF`>[:W9W9X:X:W:W=Z=Z<Y<Y<Y<Y<W<W<W;W<YCb"Pn'Wv%TrKhDa@]?\>[>Y>Y>Z>Y>Y=Y<Y<X<X<X;X;X<Y<Y;X;X;Z;Y;X;W:W;X;Y;Y;W:V:V:V:V:V9U:V9U8U8U8U8U8U8U8U8U8V9W8W7V7V8V8U7T5S5T4T3Q3P3O3Q4Q4Q4O3O3P3P3P3P3P3P3P2P2P2P3P3P3P3P3P3P3P3P3P3P2P2P2R2R2R2R2S2V;\@a:\3W2S2R2R2R2R2R3P3P3P3P2P2P3N2N1M1M4Q7U8W7S3O0O0O.K.L.K.K-L.M.M.M.M.M.M-L-L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K-J-J-J-J-J-J-J-J-J-J,I,I+H+H+H+H+I,I,H+H+H,I-I,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H(H)I)I)I(H(H)I)I)I)I)I)I)I)I(I)I-L1P.M)I(I(H(H(H(H(H)I)I)I)I(H(H(H(H(H)I(H(H(H(H(H(H(H'H'I(J)K)K(K(J(I*J+K+K+K+K+K+L+K+K+K+K+K+K+K+L+K+L.P1R0Q,N,M-O.O4V<^8[1V.T-T-T.T.T.T0V0U2U1T0U0V1W0W0V3X3X3X3X3Y3Y3Y3Y3Y3Y2Y2[2[3\2[2[2\2]3^4^4^4^4`3`3`3`3`4a5a8d=h9e4b4a4a4b4b3a3a3b2c2c2c2b2b2b2a2a2b2c0c0c0b1b1c1d1e3f1d/c/d.d-e-f.g.g.i.i.i.i/j.k.k.k.l.n.n.n.n-n-o.o-o-n-m-m-m.m.m.m.m.m.m-m-m-m.m.m.m.n.p-o-o-p,n,n-o.p.o-o-o.o-m
-l
.m6r7s0o,k+h+g*e)e
*d
*c*c)b)a(a(`(_)_)_)^)^(^(^)])])])])])\(Z.K.K.K.K.K.J.J.J.J-I-I.J-I-I-I-I-I-I-I-H,H+G+H+H+H+H+H*G*G+H+H+H+H+H+H+G+G+G+G+G+G+H*H*G*G*G*G*G*G+G*G*G)G)G)G)G)G)G+H+H+H+H+H+H*H*I*I+K+J+J*J*J-L1O6S5T0P,L+L+L+L+N+N,N-N-M-L-N-N-N-O-O-P-P,Q.Q-Q-Q-Q.R.S.S/T/U.T.T.T.T.T.T.T.T.T.T/T/T/T.T.T/T/T1V2V1V2V2V3W3W4V4V3W4X4Y4Y3X3W4X6X5Y4Y3Y4Z4Y5Z5Z6Z7\8_8_8_8_8_8_8_8_8`8`8a8`8`8a8b8b8b9c9b9d9c9c9c9c:c=d>c=d;c;d:b:c<e@i@j@h<e:d:e:f9f:f:f:f;f:f:f:f;g;g:f:f;g:f;f<g<g<g;g;g<h<h:f:g:h:g:g:g;g;h;i;h;h;h;h:h:h;i;i;i;i;i;i:h:h;i;i;i;i;i;h;i;i;i;i<i=i=i>j=j>k>k>k>k>k>k>k=m=n>o>o>n>n?n?oAp@pArArBsBsCsCsCsCtCtCtDuDuDvDvDuDuDuDvEvEwExEyEyEyExExDwDwDxDxDxEyG{EyDxDxDxDxCxCxDwDvCwCwBvBvBvBwBwBvBuBuAtAuAt@s@s@s@s@s@t@s@s@r@rArArAqArAr@r@r@r@r?r?r?rAr@q@q@q@q@r@r@rAsAs@rBsCsCsDtDuDtFtGtGuGwGxHyIyIwIwIwIwIxIyJzLzLzMzMzLzKyKyKyKzJzJzJyJxJxJzJzK{K{JyIyIwJwIvIvJuJuIuHuHtHsItMxP{MyIvGuGsHsHsHrGrGrGqFqFqFqDqEqEpEpEqDqDpCpCpCoBnBnBnAmBmBmAlAkAkAkAk@j@j@i@iAi@i?h>g=f=e=e<d<d;c:b:a:a9`8`8`8`7_6^6]5]4[4Z4Z4Z4Y3Y3Y3Y3X3X3X2W2W2W0V0V0V0V/S.R.S.S/S/R/R.Q.Q/R/P.O.O.N-M-M-N-N-L-L-L-L,L-M,L,K,K-L-L-K-L-L-L-L-L-L-J.L.M/L/K/K/K/K.L.M.N/O/P/P/P/P/Q/R/R/Q/P/P0P3P3R4T3S3R3Q3Q3Q4Q4R4R4R4S5S5T4T4S6S8U8U8T8T8U8U7U<YEbFaA\:W8V8W9W:W:V;W<Y<Y=Z<Y<X=Y<W<W;W;X>\Jj(Vu'Vv NkFcB_?\>Z>Y>Y>Y>Z>Y=Y<Y<X<X<X<X;X;X<Y;X:W:W;X;X;X:W:W:W:W:W:W:V:V:V:V9V8U8U8U8V8V8U8U8U9V9V8U8V8W8W7V7U7U6T6T5T5T4R3P3P3P3Q3P3P3O3O3P3P3P3P2O2O2O2P2O2O2O3P3P3P3P3P3P3P3P3P2P2P2Q2R2R2R2S2T7Y>`=^6Y2T1R1R1R1R1R2P2P2P2P2P2P2N1N2O5Q7T7U5R1N0L/M.L.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K-J-J-J-J-J-J-J-J-J-I-J-J-I-I,J,I,I,I+I+I,I,I,H+I,I,H,H,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H)I)I)I)I(H(H)I)I)I(H(H(H)I)I(I,K1Q/N+J)I(H(H)I(H(H(H)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(I(J)K(J(J(J(J(I)J+K+K+K+K+K+L+K+K+K+K+K+K+K+K+K.N1S1R.O,L,M-O/Q8Z:\3W/U.T-T-T.T.T.T0V0U1U2U1V1W0W1W2X3X3X3X3X3Y3Y3Z2Y3Y3Y2Y2Z2[2[2[2[2[2\3^3^4^4^4`3_2_3`4a4a7b<g<g7c3a3a3a3a3a3a3a3b2b1b1b3c3c2b2a2`2b2b1b1c1a2b1b1d2e2d/b.b/d.d-d-e-e-f.h.h.h.h.i-i-j.k.k.l.l.m.n-m-m-m-m-l-k,k-k-k-k-k-k-k-k-k-k-k-k.l.l.m.m-l-m-n-m-m-m,m-m-m-m-m
,l
,k0o8r3o-k+h+g*e
*d
)c
*b
*b
*a)a)`(`(`(_(_(^(\(\'[([)\)\)\)\)\)[(Z.K.K.K.K-J-J.J.J.J-I-I.I.I-I-I-I-I-I-I-H+G+G+H+H+H+H+H*G*G+G+G+G+H+G+G+G+G+G+G+G+G*F*F*G*G)G)F)G)G)G)G)G)G)G)G)G)G)G+H+H+H+H+H+H*H*H*H+J+J+J+J,L3R5S3Q.M,K,K,L+K,K,K,N,N-N-N-N-N-N-N-N-N-N-N-P-O-O-P-Q.R.S.S.U.T.T.T.T.T.T.T.T.T.T/T/T0U/T/T.T/T/T2V2V1V2V2V3U3U5V4W3X5Z5Z4X4X4X4X4W4X3Y2Y3Y4Y5Z5Z6Z9]9_7^7^7^7^8_8_8_8_8_8_8a8a8_8_8`8a9c9d9d9c9b9c9d<d=c;c9a9b8a9a<d?h@h<e:b9b9b9c9c9d9e:e;f<f;e:e:f;g:f:f:f;g:f:e:d:d:e9e9f9g:h9f9f9f:f:f:f:f9f9g:e;e:e:f:f:f;f;f;f;g;g;g;g;g;g;g;g;g;h:g:i;i;i;h;h;h<h=i=j>k>k>k>k>k>k>k=k=l=m=n=n=n=n=n>n?o@p?oBrCrCrCsCrCsCsCtCtDuDuDuDuDuDuDuDuDuDuDwDwDwDvEwEwEwDwDxDxEyExDwDvDvDvDvDvDxDwDwCwBwBwAvAvBvBuBuBuAt@s@s@s@s@s@s@s@s@rArArArAr@r@r?r?r?r?q?q@r@r@rArAr@r?q?q?q?q@p@r@q?q@qBqBrBsCsDtDuDuDtGtGuFuGwGxHyIyIwIwIwIwIxJzJzJzJzKzKzJxJxJzJzIyIyIyIyIyIzJ{J{IzIyHxGuHvHuItHtHtGuGuGsHsLwOzKwGtFtFsGsFrFrFpErErDqDqDqDqDpDoDoEpEpDoCnCnBnBmBmBmAlAkAkAkAkAkAkAk@j@j@j@iAh@h>f=e=e=e<d<d;c:c9b9b9`8_8_7^6]6]5]5\5[4[3Z3Y3X3W3W3X3W2W3X2W2W2W2W1V.T.T.T.T.T.R/R.Q.Q.Q/R.Q.Q.P.P-N-L-L-L,L,L-L-L-L-L,K,K-L-K-K-L-L-L-K-L-L-L-L-L-K.J-K-L-K.J.J.J/K.K.L.M/N/N/P/P/P/P/R/R/Q/P/R/Q2Q2Q3S3S3Q4Q3Q3Q4R4R4R4R5R5R4S4T4T8U7T7T7T7T7T8U;XC^F`A];X8W8W9X9V:V:V;W<Y<Y<Y<X<W<W<W;V;W<ZFd%Sr(Wu"QoHeB_A^=Z<X>Y>Y=X=X<X<X<X<X<X<X<Z;Y;X<Y;X:W:W;W;W;Y;X;W:V:V:V:V:V:V:V9U8U8U8U8U8U8U8U8U8U8U8U8U8V8W8W7V6T6S6S5T5U5S4Q3O3O4Q4Q3P3P3P3P3P3P3P3N2N1M1M1N2N2N1M1N3N3N2N2O3N3N3O3P2P3P2P2R2R2R2S2T4V;]?`8[3V1S/R0Q0Q1Q2P2P1O1N0N0O2O3P5R6T4R1O/M/M0L/K/K.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.K.K.K-J-J-J-J-J-J-J-J-J-I-J-I-I-I+H+I,H-H-I-I-I-I-I-I-I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H)I)I)I)I)I)I)I)I)I(H(H(H(H(H+J0O/N+J)I)I)H)H)I)I)I)I)I)I)I)I)I(H(H(H(H(H(I(I(H(H(H(H(H(I(J)K(J(J(I(I(I)J*K+K+K+K+M+L+K+K+K+K+K+K+K+K-L1R1S.N-L,L,N+M3U;\6Z1V.T.T.T.T.T.T.T0V0V0T1T2V2W0V1W2X2W3X3Y3Y3Y3Y3Y2Y3Y3Y3Y2Z2[2[2[2[2[2[3^3^4^4^3_3_2_3`4a6a:d=f8d5b3a3a3a3a3`3`3a4b3a1a1b3c3c2b2`2`2`1a1a1b0a2b2b3e3d1c.a-a.b.c-d-d-d-e.f.g.g.g.g-f-h-i-j-j.k.l.m,l+k,l,l,k-j-j-j-j-j-j-j-j-j-j-j-j-j-j-j-k-m,l,l,l,l,l,l+k
,k
,k	+k	+k	+j
,j2n5p/l+g
*e
*d*c	)b	)b	)a	)`
)_
)_
)_)_(_(_(](]'\'Z(Z(Z(Z)[)[(Z(Z)[(Z.K.K.K.K-J-J-I-I.J.I.I.I.I.I-I-I-I-H-H,I+G+G+H+H+H+H*F+G+G+G+G+G+G+G+G+G+E+E+G*F)F)F(F(F)G)G)G)G)G)G)G)G)G)G)G)G)G)G+H+H+H+H+H+H+H*H+H+I+H+I/M2P5S0N-L,K,K,K,K,K,K,K,L,L-L-L-N-N-L-L-L-L-N-M-M-N-O-O-P.Q.R-T-T-S-S-S-R-R-S-S-S.T.T.T.T.T/T/T/T/T0U2V3V2V2V2V3U4U5W5Y5Y5Y4X4X4V4W4X4X3X3X2X4Y5Y5Z6Z8\:_8_7^7]7^7]8^8_8_8_8_8_8_8`8_8_8`8a8a9d9d9c8b9c:d:d:a9a7a7a8a;d?h>h;e9b8b9b9b9b9`9b9c9c9c:c9c9c9d:d:d:d9c9c9d7c7b7b7c7c7c7c7d6c6c6c6c7c7c6c6b6b7c:e9d8c7c7c7c7c7c8c8c8d8d:d9d:e:f:f:f;g:i;i;i;h;h;i;i;i;i<h=i>i>i>k=j=j=j>k=k=l=l=n<n<m<m=m=n?oCrCrCqCrCrCqBqBrBsCtDuDuCtCtCtCtCtCtCtCtCtDuCuCuCuCuDvDvDxDwDvDvDvDvDvDvDwDxCxBwBwBwBwBwBuBuAtAtAtAt@s@s@s@sArAr@r@r@r?q?q?q?q?q?q>q>r>r>q?q?q?q?q@q?q?q?q?q?q?q@q?q?q?q?pApBrBsCsCtDuDuDtFtFtGuGuGvHwHwIwIwIxIwIxJxIxIxIxIxIxHvHvHxHxHxHwIwHwHxHxJyJzIyGwGvGuFtFsGrGtGsGsFrHsLwNyLwFrErErDqEqDqDpDpCpCpDqDqDoDoCoCoCnCmCmClClClBkBlBmAlAlAkAkAkAk?j?j?j?j?i?i?h@g?g=e=e=e<d;c:c9b8a8a8a6_6_6_5]5]5]5]4[4Z3Y3X3X3X3W3W2W2W2W2W1V0V0T0T/S.R.S/S.S.R/R.Q.Q.Q.Q/P.O.O-N-M-L-L-L-L-L-L-L-L-L-L,K,K-L-L-L-L-L-L-L-L-L-L-L-K.J.J-J-J-J.J.J.J.J.J.J.K/M/N/N/N/N/P/Q/R/R/Q/R/Q0P0P2S3T3R3Q3R3R4R5R4Q4Q4Q4R4Q4T5U7T6T5T5T7T7T;WB]E_@\:X8V8V8W8W8V9V:V:V<Y<Y<Y<X;V;V;V;V<XA_!Mk)Wv&TrJhC`@]?\;Y;W<X<X<X<X<X<X<X<X<X<X;Z;Y;X<Y;X;W;W;W;W;W:V:V:V:V:V9U9U:V9U8U8U8U8U8U8U8U8U8U8U8U8U8U8V8W8W7V6U7T7T4S4S5R5R3O3O4Q3P3P3P3P3N2N1N2N1M1M1M0L0L0M0N/M/L1L1M2N1M1M1M2N1N2O3P2P1Q1Q1Q0R0S2S7X>_:]4W0S/R/Q0Q0Q0P0P/N/N0N1O4P7Q6R2O.M.L.M.M.K/K.K.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K.K-J-J-J-J-J-J,I,I,I+J+J
+I-I-I,H+H,H-H-I-I-I-I+H,H,I,I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H)I)I)I)I)I)I)I(I(I(H(H'H'H)I.M0O,K)I)I)I(H(H)I)I)I)I)I)I)I)I(H(H(H(H(H(H(I(I(H(H(H(H(H(I(J)K(J(J(I(I(I(I*J+K+K+K+K+L+K+K+K+K+K+K+K,L0P3S/P,M,L-L-N-N6X9]3X/T.R.S.T.T.T.T.T/U/U0T1T1V0V0V1X2X2W3X3Y3Y3Y3Y3Y3Y3Y3Y3Y2Y2Z2[2[2[2[2[3^3^4^4^3_3`3`4a5a8c;f:d5a4a3a3a3a3a3a3a3a4b3a2a2a1b1a2`2`2`2`1`1`1a0a1a3c4d2b0b.a.a.b.b-c-c-d.e.f.g.g.g.g,f+f+f+g-i-j-j-k,j+k+k+j+i+h,h,h,h,h,h,h,h,h,h-h-h-h,h,h,i
,j,j,j,j+i+j+k+j
+i	+j	*j
*j
+i.k4n2l,h*f
*e
*d*c
)b
)a
)a)`)_)_)_)^(](](](]'[(Z(Z(Z(Z)Y)Y(Y(Y(Y(X.K.K.K-J-J.J-I-I.I.I.I.I.I-H-H-I-I-H,H+H*H*H+H+H+H*G*F*F+F+E+G+G+G+G+G+G+E+E*F)F)F)G(F(F)G)G)G)G*G*G)G)G)G)G)G)G)G)G)G)G*G+H+H+H+H*H*H*H,H1M4Q2Q/N+J+H,I,I,I,K,K,K,K,K,K,K,K,K-L-L-L-L-L-L-L-L-N,P,Q,Q-Q.Q-T,S,R,R-S-R-R-Q-Q-S-S.T.T.T.T.T/T0U0U1U2V2U2U2V2V3U4U5Y5Z4X4X4W4V4V4V4W3X3X3X4X5Z5Z6Z7[8\8^8\7\7\7\8]8]8^8_8_8_8_8_8_8_8_8_8`8a8a9d9d9c9c:d9c9b9c7`7_;d?h?h;e7a6`6`6`6`8b9`9`9`9`9`9`9`9`9`9`:a9`9`8a6`4a4a5b5b5b6a6a6a5a4b4b4b5b5b5b5a5b4a7b6b5b5b5b5b5b5b5b5b5b5b6c6c7c7c7c:c;d;g;g;i;h;h;i;g;h:h;g<g=h=h>j=j=j=j=j=j<k<l=n<n<m<m<n<n=o?oApCqCpDqBqBpBpBsCtCtDuCtCtCtCtCtCtCtCtCtCtCtCtCtCuDvDvDvDvDvDvBuBvBvBvCwBuBuBwBwBwBuBuBuAtAt@s@rAr@r@r@r@rAr@q?q?q?q?q?q?q?q?q?q>q>q>q>q?p?o?o?o?o>o>p?q?q?q?q?q?q?q>r@qAqBsCsCsCtDuDuDtDtErGsGuGuGuGuIvHtHwIwJxJxIwHvHvIwIwHvHvHvHvHwHvHvGuGuHxIyIyGvFuFuFtFrFrFsFsFrEpGrMxOzKvFrDoDqDqDqDoDpDpCpCpCnDnDoDnDnCoCpCoCmCmClClClBkBlBlAkAkAkAkAj@j?j>h>h>h>f>g>f>f>f=e<d<d;d9b9b8a7`6_6^5^5_4\5]4\4[3Z3X4X3X3X4X2W2W1W1W1U0T0T/S/S/R/R/R.R.R/R.R.R/R.Q.P.O.O.O.O-M-L-L,K,K,K,K,K,K,K,K,K,K,K*J*K,K-L+J*J*J,K-L-L-L-L-K-J.J.J.J.J.J.J.J.J.J.J.J/K/L/L/L/L/N/P/Q/R/R/R/Q/P0P1S3U3S2Q3R3R4R4Q4Q4Q4Q4R4Q6U7V7T5R5U5T5R8U@[EaB^;X7V7V8V8W8W8V9V:V9U:X:X;Y:W:V:V:V=X@]Ih&Us(Wu NlEb?]=[<Z;Y;W<X<X<X<X<X<X<X<X<X<X;Y;X;X;X<X<W<W<W<W;W:V:V:V:V:V9U8U9U9U8U8U8U8U8U8U8U8U8U8U8U8U8U8V8W8W7V5T7T6S5S4R5R5R4O4O4O3P3P3P3P3N2M1M1M1M1M2N0M/M/M.M.M.L.L/M1M1M1M1M2N1M1O2P1P1Q0P0P/Q/R1R3U;\;^5X/S.Q.Q.Q.Q.O.O/O0O2P4P5Q4O2N/L-L-L.M-L-K-K.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K.K.K.K-J-J-J-J-J-J-J-I,I,I,I+J+I
,I-I-I-I,I,H-H.I-I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H)I)I)I)I)I)I)I(I(I(H'H'H(H,K0O-L)I)I)I)I(H(H)I)I)I)I)I)I(H(H(H(H(H(H(H)I(I(H(H(H(H(H(H(I(J)K(J(I(H(I(I(I)I*I+I+K+K+K+K+K+K+K+K+K,L0O3S1P-L,M,M-K-L2R:[7[3W/T.R.S.T.T.T.T.T/U/U/T0T0U0V0V1X2W2W2W3Y3Y3Y3Y3Y3Y3Y3Y3Y3Y2Z2[2[2[2[2[3^3^4^3^3_3`3`4_8b;e<g8c5a4a3`3`3a3a3a3a3a3a3a3a3a1`1`1`1`2`2`2`2`1`0a2b4d4d1`._._.`.a.a-a-c-c.d-d-e-f.g.d,d+f+f,g-h-h-i-j,i+h*h*h*g*f*f+f*f*f,e+e*f*f+g,g,g,g+f+f,g,h+i+i+i+h*h*h+i+h
+h
*h)h+i0l5n.i*f*e*c
)c)b(`(`)_)_(_(](](])])])]([([)[(X(X(X(X(X(X(X(X(X.J.J-J-J-J.J-I-I-H-H.I.I.I-H-H-I,I+H+H*G)F(F)G)G)G)G)F*F+F+D+G+G+G+G+G*F*E*E*F)F)F)G)G(F(F)G)G)G)F*F)F)G)G)G)G)G)G)G)G)G*G*G*G+H*H*H*H+H1M3P0O-N,K+J+I*H,I,J,K,K,K,K,K,K,K,K,K-L-L-L-L-L-L-L-M-N,N,O,P-P,Q-P,P-Q-Q-R-S-S-R-R-S-S-S-S.T.T.T.T/T1U1U2V1U1U2T2V3W5X6Z5Y4V4V4V5V5V5V4W3X3X3X5X5Y5Z7[;^8\7\7\7\7\7\7\7\7]7^8_8_8_8_8_8_8_8_8_8`8a8a9b:d:d:d9c9c8c8a<b?e>f:c7`6`6`6`6`6`6`6`8`9`9`9`9`9`9`9`9a8a8`9a5a3`4`4`5a5a5b5a5a5a5a4b4a5a5a5b5b4b5b4a5b5b5b5b4b4c4c4c4c4c4c4b5b5b5c5c6c:d;e:e;e;g;g;i;i;g;g:g;g;g<g=h=h=i=j=j=j=j<k<k=l<m<m<m<n<o<o<n>nAoAnCpBqBqCpBqBqBqCrCtCtBsBsCtCtCtCtCtCtCtCtCtCtCtCtBsBsBuBuBuAtAvAvBvBuBuBuBuBuBtBtAtAsAsAsArArArArArAr@q?q?q?q?q?q?q?q?q?o?q?p?o?o?o?o?o?p?o?o>n>o?q?q?q?q?o@o?o?oArArBqCrBsCtDuDuDuDtErFsFtGuGuGuHvHuHvIwJxIwHvHvHvHvHvHvHvHvHvHvGuGuGuGuHvIxHvFtGtGsEqFrFrFrFsEqEqMxOzHtDqDpDoDoDoDoDoDoDpCpDnDnDnDnDnCmCmCmClClClClClClBlBlAkAk?i?i?i?i?i>h>h>f>f>d>f>f>f=e<e;d;c:c9b8a7`6^6]6]5]5]4\4\3[3Y3Y3X4X4X3W2W/U/U/T0S/R/R/R/R/R/R/R.Q.Q.Q.Q.Q.Q.O.O-N-N-M,K,K-L-L-L,K,K,K,K,K,K,K,K*K)K*K*K*K*K+J*J)K*K*I,K,K,K-L-L-K-K-I-I.J.J.J.J.J.J.J.J/K/K/K/K/L/N/O/P/Q/R/Q.P.P0Q1S2T2S2P3R3Q4Q4Q4Q4Q4Q4Q6S8V8U5R5R5U5T7U>ZDaB_;Y8V7V7V8V9W8W8U8U9U9U:W:V9U9U:V:W<Z@[Eb$Rp*Yw#RoGdA]>\=[<Z<Y<X<X<X<X<X;W;W;W<X<X<X<Y;X;X;X;W;W;W<W;W;W:V;U:U:V:V8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8V8W7V5T6S6S6S5R4Q4Q4O4O4O3P3P3P3P2N2N1M1M1M1M1M0M/N/N.M.M.M.M/M0L/K/K/K0L0L0N1O1O0P/P/P/Q.Q.Q/T4X:]6Y/T.Q.Q.Q.Q.O.O0P2R4R4Q2P/N.K.L.M.M.M-L-L-L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.K.K.K.K.K-J-J-J-J-J-J-J,I,I,I-I-I-I-I,I,I,I-I-I-I-I-I-H-H,I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H)I)I)I)I(H(H)I'H'H(H(H(H*J-L.M,K)I)I)I)I)I)I)I)I)I)I)I)I(H(H(H(H(H(H(H)I(H(H(H(H(H(H(H(H(J)K(J(I(H(I(I(I(I*I+I+K+K+K+K+K*J*J+K+K-L2P2R.N-L-M-N-L-N5U:[4X0T.R.R.R.S.T.T.T.T/U/U/U0T0U0V0V2X2W2W2W3X3X3Y3Y3Y3Y3Y3Y3Y3Y2Y2Z2[2[2[2[3\4^4^3^3_3`3^5_9b=f;e5a4a4a3`3`3a3a3a3a3`3`3`3`3`/^/^0_1`2`2`2`2_1_0`3c4d2b/_._/`._.`.a-a-a-c-c-c-d-d-d-d-d,e,e-f-f-g-h-h+f*f*f*f*e*d*d+d*d*d+d+d*d*d+d+d+d+d+d+d,e,g*f*f+g+g*f*f+g+i*h)h(g+h1l3l.g*c)c)b)a(`(`)`)_(](](](](])])[)[(Z(Z(X(X(X(X(X(X(X(X(X(X.J-J-J-I-I-I.J-H-H-H.I.I.I-I,I,I+H+H+H*G)F(F)G)G)G)G)G+G+F+F+G+G+G+G*F*F)E)E)E*F)F)G)G(F(F)G)G)G)F)F)F)G)G)G)G)G)G)G)G)G*G)G*G+H*H*H,I1M2N.K-K,K,K+J*I*H,I,K,K,K,K,K,K,K,K,K,K,K,K,K-L-L-L-L-L-M-N-O-O-N,O-N-N.O.O-P-Q-R-S-S-S-S-S-S.T.T-S-S.T0U1V1V1V1V2T3V4X5Y4X4W5V4U4U5V5V5W4W3X3X3X3X4X5Z8\:^8\6[6[6Z6Z7[7\7\7\7\7\8]8]8_8_8_8_8_8_8_7^7^8a8a9b8a6`6`8a=e?d>d:b6`5^5\6]6^6^6`5_5_6`6`6`6`7`9`9`9`9a8a8a7b5`3`4`4`4`4`4`4`5a5a4`5a5a5a5a5a5a4a5a5`5`4`4a5a4a4a4a4a4a4a4a4a5a5b4b4b5b6c7d8c9d:d;d:e:g;h;g;g:f:f;g;g=h<h<h=h=h=h=h=k=k<k<k=k<l<m<m<n?oAoAoBpBoAoApBqBqBqBqBqBrBsBsCtCtCtCtCtCtCtCtCtCtCtCtBsBsBsBsBtBtAtAtBtBsBsBuAtAtAtAtAtArArBsBsArArArAr@r?q?q?q>q>q?q?q?q?o?o?o?o?o?o?p?p>p>p>o?o>n>o?o?q?q?q>o>n@oArBsArBqBrBsBsDsDsDsDsEsDrDrEsFtFtGuHvHvIwHvGuGuGuGuGuGuGuGuGuGuGuGuGuGuGuHvGuGuFsEqEqEqEqFsErDqEqLwNyHtDpDnEpEoDnDnDnDnDnDnCnCmCmDnCmBmBmBmCmClBlBlAlAlAjAj?j?j?j?i>h>f>h=f<d<d<e=d<c=e=e<d;c;d:d:b9b8a7`6_6]5]5]4\4\4\3Y3Y3X3X3X4X3X1V/U/U.T.S/R/R/R/R/R/R.Q.Q.Q.Q-P-O.O-N-N,M,M-N-M,K,K-L,K,L*K*K+J+J+J+J+J+J*I)J)K)K)J)I)I)I)J)I)I*I+J+J+J+J+J+J,I-I.J.J.J.J.J-J-K-J.J.J/K/K/L.M/N/O/P/Q/Q.P.P0Q1S2T2R2P2Q3Q3R4R4R4Q4Q4Q7T9V7T5R5R4S5S;XA^B_<Z8W7V8V8V8V7V7V8U8U8U8U9V8U8U8V9V;YA^A^Ji)Xv(WtJfB^?\<Z;Y;Y;Y;W;W<X<X<X;W;W;W<W<X<X<X<X<X<X;W;W;W;W;W;W;V:U:U9V8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U8U7U7V7V5U5S6S5R4Q3Q3Q4O4O4P3P3P3P3P1M1M0L0M0M0M0L0M1N0M0N.M/L/L/L/M/M/K/K0L/L/N0N1O0P/P/P/Q.Q,Q.T0U7Z7Z1V.R-Q-Q-O.O0P2Q3Q2P0N/N.M.L.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.K.K.K.K.K.K.K-J-J-J-J-J-J-J-J,I,I,I-I-I-I-I-I,H-H-H-H-I-I-I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H)H)I)I)I(H(H)I'H'H(H(H*I.M/N+K)I)I)I)I)I(H(H)I)I)I)I)I)I(H(H(H(H(H(H(H)I(H(H(H(H(H(H(I(H(H)J(J(I(H(I(I(I(I)H*H+K+K+K+K+K*J*J+K+K0O3R.O+L,L-L-N-M0Q8Z9Z1T.R.R.R.R.R.S.T.T.T/U/U0V0U/U/U/U2W2X2X2X3X3X3X3Y3Y3Y3Y3Y3Y3Y3Y2Y2Z2[2[2[3\3^4^3]3]3^3^6_;d<e8c5a3`3`3`3`3a3a3a3`3`3`3`3`3`/^/^0_1`1`2`2`2_2_1`3c3c0`/_/^/_._._.`.a-`,`-c-c-d-d-d-d,c,e,e,e,e,e,e-f+d*f*f*e*d+c+b+c+d+b+b+b+b+d+d+d+d+d+d+d+d*d*f*f*f*f*f*f+g+g*f)f(e,h1k/h+d(b(b(`(`(_)_)_)_(](](](\)[)[)[(Z(Z(X(X(X(X(X'W'W'W(W(W'V-I-J-J-I-I.J.I-H-H-H-I-I,H+H+G+G+H+H+G*G*F+G+G+G+G+G+G+G+G+G+G+G+G*F*F(E)E)E)E)F)G(F(F(F)G)G)G)G)G)F)F)F)G)G)G)G)G)G)G)G)G)G)G)G+H/K1N0M.J+H*H*I*I+J+H+H+H+I,K,K,K,K,K,K,K,J,J,K,K,K,K,L,L,K-J-L-N-O,N,N,K,N,N,N,N-N.P.Q-R-S-Q.Q.Q.Q.S.T.T.T.T/T/T/T1U2V3W5Y4X4W3U4U4V3U3U4U3V3W2W1W1W2X4Y7[9]9]6Z6Z5Y5Y5Y6Z6Z6[7[7[7[7[7[7\7]8_8_8_8_8_8_7^7^7_6`7_7^6]7a=e>g;c8_5\5\4]4\5]6]4\4^5_5_5_5_5_5_6_7_7_7_7^7^7^5_5_5`4`4`4`4`4`4`4`4`4`4`4`4`4`4`5`5a5a5`5a5a5`5`5`5a5a5a5a5a5a5a4a4a5a5a5a5a5a4b5a6a8b9d:e:f:e:f:f:h9h9g9f9f:f<g=h=h=h=h=i<h=j=k=l<l<k=k>l>n?n@n@nApBpBpBpAoAoBpBqApBqBqBrBrBrBrAqArAsAsBsBsBsBsBsBsBsBsBsBsBrBrBrArArArArAr@r@r@qAr@r@r@r?q?q?q?q?q?q?q?q?q?q?q?q?o=n=n=n=n=n=p=p>o>o?o>n>n>n?o?o>n=m=o?p?p>p?q?q@p@p?p@pApCqDsDrCqCrDrDrDrEtIwIwGuFtEtEtEtFuFtFtFtFtFtFtFtEtFtGuFtGuGuGuFtDrEsFtEsCqCqCqCpJvMyGsCpDnEoDnEoDnDnDnDnDnDnDnDnCmCmBlBlBlAkAk@j?j@j?i?i?h>h=g=f=g=e=e<d<e=d>d>d=d;d:c;c;c:b9b9b9a:a9a6_6]6]5]4\4\3Y3Y3Y2W2W2W2V1V1V0V/U/U/S/R/R/R.Q.Q/R/R/R.Q.Q-Q,O,N,N,M,K*K*L)K*L)K)K)K)K)K(J)K)J)I)I)I)I)I)I)I)H(G(G)H(G(G)H)I)H)H)I)I*I*I*J*J*I*I+J,J,I.J.J.J.J.J.J.J.J.J/K.K.K/K/M/O/Q/Q/P/R/R/R0S1R2P3R2R2R3R4Q4Q4Q6S7T6S4Q4P4Q5R8U@\@];Y9V7T6S7T7T5U5U5U6U7U8U7T8U8U8U9V;Y@]A^Da&Sr*Yw!OmDa?[<Y<Y<Y<Y<Y<W<W<W;W;W;W<W<W<W<W;W;W;W:W:W;W;W;W:V:V:V9U8U8U8U8U8U7T7T7T7T7T8U8U8U8U8U8U8U8U8U8U7T7T6U6V6U6U6T6S5R5R5R4Q3N3N3P3P3P3P3P1M0L/N/N/N0N1M0M/L/L/L/L/L.K.K.M.M.M.K/K/M.M/N/N/P.O.O.P.Q-Q-Q.T3X7[5X/U-Q-Q.P1O1P1P/N-M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.K.K.K.J.J.J.J.J.J-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-H-H-H-H-H-I-I.J.J+H+H+H+H+H+H+H*H*H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)I)I(H(H)I)I(I(H(H,K-L,K)H)H)I)I)I(H(H)I)I)I)I)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(I(J(H(H)J(J(H(H(I(I'I'I'I(I+K+K+K+K+K+K+K+K.M2P0Q,K,L,M,L-L-N4W8Z4V.Q.Q.R.R.R.R.S.T.T.T.T.T/U/U/U/U/U0V2W2X3X3X3X3X3X3Y3Y3Y3Y3Y3Y3Y3Y2Z2[2[2[3\3\3^3^4^4^4^9b<e8b5`4_3`3`3`3`3`3`3`3`3`3`2_2_1_0_0_0_0_0_0_1_2_1_4d3c0a.`._/^._-^-^.`-a-a,a+a,b-c,b,b-c,b+b+b,b+b+b,d+d+d+d+d*c)b)a*a)a)a)`*`*`)`)a)a)a)a*a*a*a*a*a*c*c*c*c*c*c+c*c*c*d*d0h1h,d)a)a)`(_(_)_(^(^(](\
(Z)[(Z(Z(Y(Y(X(X(X(X'W'V'V'V'V&U&U'V&U-I.J.J.J.I.I.I.I.I-I-I,I+H+G+G+G+G+H+G+G+G+G+G+G+G+G+G+G+G+G+G*F*F*F)F(F)F*F)F)F)G)G)G)G)G)G)G)G)G)G)F)F)G)G)G)G)G)G)G)G)G)G)G*G/L2N0M,J+H+H+H+I*I+I+I,I+H+I,J,J,K,K,K,K,K,J+I+K,K,K,K,L,M,M-M,M,M,M,M,M+N,O,O,N,N-N-P-Q-Q-R.Q-Q-Q.Q.R.S.S-S-S.S/S/S1U4W5Y4X3U4U3U4U4W3V3V4U3U3V1W1W1W2X5Z7\9]6[5Y5Y5Y5Y5Y6Z6Z6Z6Z6Z7[7[7[7\7\8^8^8^7^7^7^8^8^7^6`7^7^8^=c>e;e7a6^5\5\4]5]4]4\4\4]5^5^5^6_6_6_6_6_6_6^6^5^4]4_4_4_4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`4`5`5`5a6a6a5`5a4a4a5a5a5a5a5a4b4a5a6b8d9d9d:d:e:f9g9g9g9f9f:g;g<g=h=h=i=i=i=i<i<l<l=k=l<m@mAm>m?n@pBoBoAoAoAoAoApAoApApArAqAqArAqAqArAsBsBsBsBrBrBsBsBsBsBrBqApAqApApApAqAq@q@q@pAq@q@q?q?q>q>q?q?q?p?p>p>p?p?p?p>n=n=n=m=m=n=o=o>n>o>l>n>n>m?n?n>m=l=n>n>o>o?o?o@o@p?p@pApBqCrCqCqCrDrCrDrEtIvHvFtEsEsEuEuEuEtDsDsDsDsDsEtEtFtFtFtGuGuFtErDqDsEsDrBqBpDrIwLvGrCoCoDnDnDnDnDnDnDnDnCmCmDnCmBmBmAlAlAl@k@k?i?h@h@f?f?g>g=f=f>f=c=d<e<d<d=d>d<d;c;c:b:b:b9b9b9`9`8`6^5]5]5]4\3[2Y3Y3X3W2W2W1V0U/U/U/T/T/R/R/R/R.Q.Q.Q.Q.Q.Q-Q,P,N,M,M,M+K)K*L*L*L)K)K)K(J(J(J)J)I)I)I)I)I)H)H)H)G)G)G)G)G)G)G)H)G*H)I)I)I)I*J*J)I)I*J,K,J.J.J-I-I.J.J.J.J-J.K.K.K.K.M/O/P/Q/P/R.Q.Q0S2R2P3Q3R2Q3Q3P4P5R9S7T4Q3P3P4P8T=YA]=Z8V8T7S6S6S5S5U5U5U5U7U8U8U8U9U8V:X?]@^B^ Ml*Xw%SqEc@]>[;Y<X<Y<X<X<W<W<W;W;W;W<W<W<X<X;W;W;W:W:W;W:V;V:V:V9U9U8U8U8U8U8U7T7T8U7T7T8U8U8U8U7T7T8U7U7U8U8U7T6T6U6U6T6S6S5R4Q4R3Q3O3O3P3P3P2O2O1M0L/N/N/N0M1M/L/M/M/M.L.M.M.M.M.M.M.K.K.L.M/N.N.O.O.O.P.Q-Q,P-S0V6[6[0U-R.R/Q1Q0P/P-O-M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.L.K.K.K.J.J.J.J.J.J-J-J-I-I-I-I-I-I-I-I-I-I-I-I-H-H-H-H-H-H-H-I-I-I-I.J-I,H+H+H+H+H+H*H*H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H(H(H(H(H)I(H'H(I*I.L,K*I)G)H)I)I)I(H(H)I)I)I)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(I'H(H(I(I(H(H(I'I'I'I'I'I+K+K+L+K+K+K+K-L0O0O+M+K,M,M,L-L0S7Z7Y0S.Q.P.Q.Q.R.R.S.S.T.T.T.T.T/U/U0U/U0V1W2W2W3X2W2W3X3Y3Y3Y3Y3Y3Y3Y3Y2Y2Z2[2[2[3\3]3]3^4^7a=f;d5a4_4^3_3_3_3`3`2_2_3`2_2_2_1^0^1`0_0_0_0_0^1^1_1_5d2b/`/`/^/^.^-],]-_-`-`,`+`,a,b+a,b-b,a+a+a+a+a+a,b+c+c*c*c)b(a(`)`)`)`)_*_*`)`)`)`)`)`*`*`*`*`)`(a)b*b*b*b*b*b)a)b*c+e0h/f*b)a)`)_(_(^)_(](](\([)[(Z(Z(Y(X(X(X(X(W'W'V'V'V'V&U&T&T&U&U.J.J-I-I.I.I.I.I.I-H-I,H+H+G+G+G+G+H+G+G+G+G+G+G+G+G+G+G*F*F*F*F*F)F)F(F)F*F*F)F)G)G)G)G)G)G)G)G)G)G)G*G*G)F)F)F)G)G*G)G)G*G-I0L/M-L+I*H*H+I+I+I+I+H+H,I,I,I,I,J,K,K,K,K,K,K+K+K,K,K+K-L-L-L-L,K+K+K+K,M+M,N-N-N-N-O-P,Q-Q-R.S-S-R.Q.Q.Q.Q-R-S.S/R0S3W3Y4X2U3U3U4U4U4U3U3V5V3U3V2W2V2X5Y7\7]5[5Z5Y5Y5Y5Y5Y5Y5Y5Y5Y6Z6Z6Z6Z6[6[7[8\7^7^7^7^7^7]6\6\7]8_>c=a9`6]5\6]5\5\5\5\5\5\5\5\5\5\5]6^6^6^6^5_6_6_5_4^3]3]4^3^3_4_4_4_4_4_4_3_3_3_3`3`4`4`4`4`4`3_4`4`4`4`4`4`4`5`5`6a5_5`4`4`4`5`5`5`5`4a5b4b5b5b6b7c9c:d8e8e9f9f9f9f9f9f;f<g=g<h<h<g<h<i<j<j<k<m<l?k@l=m<n?oAnApAoAoAoApAoAnApArAqAp@pAqAqAqAqArArBrBrBqBqBsBsBsBsApApApApApApApApApAp@p@p@p@p?o?p?q>q>q?q?p?o>n>n>n>m?m>n<m=n=n=m>l>l=l=m>m?n>l=m=m>m?l?l?l?l>m>n>n>n>n>n?nApApBpBpApApBqBpBpCqCrEtHvHuGsDrDrDsDrErEsEsCrCrDsDtCtDuEuErFrGtGtFsEqDpDpCqBqBqBpDrJwMwHqBnBnBmBmBlBlBmBmCmAlAlBmAlAl@l@l@l@k@k@k@j@j?h?f?f@e?f?f>f>f>e>e<d<d<e;d:c;d=e;c;c:c9a9a:b:b9a9a8`7^5]5]4\4\3[2[2X2X3X2W2W2W0V/U/U/U/S0S/R/R.Q.Q.Q.Q.Q.Q.P-P,P+M+L-L,M+M)K)K*L)K)K(J(J(J)K)J)J)I)I)I)I)I)I(G(F(F(F(F(F)G(F(F(F)G)G)G)I)I)I*I*I*I*I)I*I+J,I-I-J-I-I.J-I-I.J-J-K.L/K.K.M/N/O/Q/Q.Q.Q0S1S1Q2P3P3Q2Q4Q3P4O9S9R4P3P3P3P6Q>XA\<X8U7S7R6S6S6S5S5U5U5U7U8U8U8V8U9U;W?\A_@]Ic(Vw(VvJi@^>\=Y<X<W<W<W<W<W<W<W<W<W<W<W<W<X;Y;X;W;W;W;W;W:V:V:V9U8U8U8U8U8U8U8U8U8U8U8U8U8U8U7T7T7T7T8U7T7U7T7T7T6S5T5U5T5S5S4R4Q3R3S3N3N3P3P3P2N1M0L0M0N0M1M0L0L/L/L/L/K.K.M.M.M.M.M.M.M.M.M.M.M.M.N.O.O.O.P-Q-Q-Q/T5Y7[2V/R-R-Q.O-N-P-P-N.M.M.M.M.M.M.M.M.M.M.M.M.M.M.L.L.L.L.L.L.K-J.K.K-J-J-J-I-I-I-I-J-J-J-J-I-I-I-I-I-I-I-I-I-I-H-H-H-H-I-H-H,H,I,I,I-I-H-H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)I(H(H(H)I)I'H'H*I/L.K+J(H)I)I)I)I)I)I)I)I)I)I)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H'H'H(H(H(H(H(I'I'I(I*I+J+K+K+M+L+K,K-L/O0Q+L+K+M+L-L-L.M4S:Z3T/Q-P.P.P.Q.R.R.R.S.T/U/U.T.T/U0V1T0T0V0V2W2W3X2W2W3X3Y3Y3Y3Y3Y3Y3Y3Y3Y2Z2[2[2[3\3\3\3^5`:c<e7c4`4^4^5_4^3^3_3`2_2_3`2_2_3`1^1^1_/^/^0_0^1^1^0`4c5b0_/]/].]/^/^.]+]-^-^-^-_,_-`,a+a+a,_,`+a+a+a+a+a+a+a+a)`)a(`(`(_)_)_)_)])])_)_)_)_*`*`*`*`*`*`*`*`*`*a)`)a*a)a)a(a*a/e1f-c
)`)`)`)_)_(](]'\'\'Y(Z)[(Y(Y(X(X(X'W'W(W'V'V'V'V'U&S&S&S&U&U.J.J-I-I.I.I.I.I-H-H-I,H+H+H+H+H+H+H*G*F*F*F*F*F*F*F*F*F)F)F)F)F)F(F)G)G)F)F)F)F)F)F)F)F)F)F)F)F)F)F)E)E)E)E(E(E(F(F(F(E)F+H/K.L+J*H*H)G)G*H*H*H*H*G*G+H+H+H+H+I,J+J+K+K+K+K,K,K,K,K+L,N,M,M-N,M+L+L+M,N,N-N-N.O.O.P.Q-R-S-S.S.S.S.S.T.R.S-S-S.T1V4X5Y3X2V2V3V3V4V4U4U3V3V4V4V2V2W2W4Y9\9]6[5[5Y5Y5Y5Y5Y5Y5Y5Y5Y5Y6Z6Z6Z6Z6Z6Z5Z5[6\7^7^7^7_7]7\8^:_<b=c7]6]5\5\5\5\5\5\5[5[5\5]5]5]5]5\5\5\5\5\5^5^4^4^3]3^3]3]3^2^3^3^3^3^3^3_3_3]3^3_3_4`3_3_3_3`3_4`3`3_3_3_3_3_3_3_4`3_3_3`3`3`4`4^4^4^4_5`4a4a4a4a5b6b7c9e:f9g9g:h9f9f9f:f;g;g;g<g<g<g<h<i<j<j<k<k<j=k<l<n=n@mAmAnAnAnAoAp@o@nAoAoAo@oAoAo@p@p@p@pApApApApAqArArArApApApApApApApApApAp@p?o?o?o>n>o?p?p?p?p>n>n=l>m=m=n=n<m<m=n=m=l>l>l=k=k>k?l=k<l<l>l?l?l?l?l>l>m>m=m=m=m?m@n@oAp@oApApBpApAnCpFsGtFtDqCpBpBpCqCpDpDpDpCoCpCpCqCrDqDqDqEqGrFqEpCoCoCoCnAmAmDpKvKvFpBlAkAk?j?j@k@k@k@kAj@j?j@k?j?i?i@i@h@h@i@h@h?h?f?f?f?f>f>f?f>e=e<d;d;f;e;d:c:c:b:b:b9b8a9b9b9a7`6^6]6]5]5]4\4\3[2[2X2W2W2W1V0V/U/U/T/S/R/R.Q.Q.Q.O-Q-S-P-P-O-N*N)L*K+L+L*L)K)K)K)J)J(I(I(I(I(H(H(H(H(H(H(H(H(F(F(F(F(F(F(F(F(F(F)G)G)G)I)H)H)H)G)G)G)H)H*G*G+H+J,K,J.J-I-I.J.J.J.K.J.J.K/M/N/O/P.Q.Q/R/R/P1P2P3P3P3P4Q8R8S5P3O3P3P4Q;V?[>Y8T5R5R6S6S6S5S5S5U6U6U7U8U8U7U8T:V?\A^@]C`"Qn*Wx!NmDa?[<X;W<W<W<W<W<W<W<W<W<W<W<W<W<W<W;X;X;W:V:V;W:V9U:V9U8U8U8U8U8U7T7T8U8U8U8U8U8U7T7T7T7T7T7T7T7T7T7T7T6S5S4U4U4U4T4S4R4R3Q3R3P3P3P3P3P2P1M0L/M0M0L0L0L0L.L.M.L.K.M.M.L.L.L.M.M.L.L.L.M.M.M.M.N.N.O.O-P-O-O/R2V7[5Y0T-R,P.O-M-N-N.N.N.N.M.M.M.M.M.M.M.M.M.M.M.L.K/K.K.K.K.K.J-J-J-J-J-J-J-I-I-I-I-J-I-I-I-I-I-I-I-I-I-I-I-H-H-H-H-H,I,H,H,H+H+H+H+H,H,H,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H*G*G)I(H(H(H(H(H(H(H)I,K.M,K)I(H)I)I)I)I)I)I)I)I)I)I)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H'H'H(H(H(H(H(I'I'I(I*I+J+K+K+L+K*J,K.M0O/O+K+K+M+L-L-M0Q7W7X0S-O-O.O.P.Q.R.R.R.S.T.T.T/U/U/U/U0T/T0V0V1V1V3X3X3X3X3Y3Y3Y3Y3Y3Y3Y3Y3Y2Z2[2[3\3\3\4^4^9b<e9b5_4_4^4^4^4^4^3_3`2_2_3`2_2_3`3`3`2_/^/^0^/]0]0]2a6c4a0^/]/\.\/]/^.]+\,]-^-^,^+^+_,`+`+`+_,`+`*`+a+a+a+a+a+a)`)`)`)_)^)^)^)])])])])])])]*_*_*_*_*_*_*_*`*`)_)_)`)`)`)`(`+b0e/c*`
(_
)_)_)^)^(](\'['Z'Y(Y(Y(Y(X(W(W(W'V'V'V&U&U&U&U&T&S&S%T%U%U.J.J.I.I.I.I.I.I-H-H,H+H+H+H*G*G*G*G)G)F*F*F*F*F*F*F*F*F)F)G)G)F(F(F)F)F)F)F)E)E(E(E(E(E)E)E(E(E(E(E(D(D(E(E(E(E(E(E(D
(D*F-I-I*H)F)F)F(F(F(F(F)F(F(F(F)G)G)G)G)F*G*G*H*I*I*I*I*I*I*I*I*K)J)J+K*J*I+J+K+L+L,L,L-M,M,N,O,Q-R-R-R-R-Q-Q-R-R-R.R.R0T4X5Y3W2U1U1U3V4W4W4V4V4W4W4W4X2X2X4Z7\;^:]6[5Z5Y5Y5Y5Y6Z6Z6Z6Z6Z6Z6Z6Z6Z6Z7[6Z5Z5[6[7]7^7^8^7]7];^>a;a7]4Z4\5\5\5\5\5[5[5Z5Z5[5\5\5\5\5\5\5\5\5\4]3^2]2]2]2_2]2]3_3_3_2^1^1^2^2_3_3]3_3_3^3^2^2_2_3_3_3_3_2_2_2^2^2^2_2_2_2_2_2_3_3_3_3`4`3`4^5_5a4`4`5`5a4a5a6c8d:e:e9f9e9f:f:f:f:f:f<g<g<g<g<h;h<j<j<j<j<j<k>m=l>l@m@nAnAnAnAoBoBn@mAn@n@n@n@n@o@p@p@p@p@p@p@pApApAqAqApAp@oApApAp@o@o@o@p@p?o?o?o>n>n?o?n?n?n=l=l=k>l=l<l=l<l<l=m=l=k=k>l=k=k=k=k=k=k=k>k>k>k>k>k>k>l>l=l<m=l?l?l?m@n?m@oAoApApAnDpHtFrCpBoAnAnAnBoBoBoCnCnCmBmBmBoBoBoBoBoBoDpDpCoAnBnBoAm@jCmKuKuDnAkAjAj@j?j?j@j@j@j@j?i?i?i?i>h>h?i?i?g?g@g?g@g?f>f>f>f>e=e=e>e=e;e;e;e;e:d:c:c:c:b:b9a7`7`8a7a6`5^6]6]6]4\4\4\3[3Z2Z2X2W1V1V0U/U/U/T/R/R/R/R.Q-Q-Q-Q-Q-Q,O,N,N+M(M(L)K*L*L*L)K)K)K(I)I)I(H(H(H(H(H(H(H
'G
'G
'G
'G
'E
'E
'E
'E
'E
'E
'E(F(F(F(F(F)G)H)G)G)G)G)G)G)G)G)G)G+J+J+J,J.J-I-I.J.J.J.J.J.J.J.K.M.M/O/Q/R/R/R/P0P1P2P3P2P7T9U5Q2O3N4P4Q7T>Z<X8T5R4R4R5R6S6S5S5U5U5U6U6U7T7U7U9V?\A^?\@\Lh(Vu%RqGe@]=Y;W;W;W;W<W<W<W<W<W<W<W<W<W<W<W;W;W;W;W:V9V:V8U8U9U8U8U8U8U8U8U7T7T8U8U8U8U8U8U7T7T7T7T8T8T7T7T7T7T6S6S4S3T3U4U4S4R4R4R4P4P3P3P3P3P3O2O1M0N/M0L0L0L/L/L.L.M.M.M.M.L.K.K.K.L.L.K.K.K.L.L.L.M.M.M.N.N-N-M-M.P0T4Y6Z2V.S-Q-M-L.M.L.L.L.L.L.L.L.L.L.L.L.L.L.L.L.K.K.K.K.K-J-J-J-J-J-J-J-J-J-J-J-I-I-I-I-I-I-H-H-H-H-H-H-H-H-H-H-H-I-I,I+H+H+H+H+H+H+H+H,H,H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H*I*I)I)G(G)I(H(H(H(H(H(H(H+J.M,K*I)I)I)I)I(H(H)I)I)I)I)I)I)I)I)I)I)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(H(I'I(I)J*I+J+K+K+L+K*J,K0O0O.M+K+K+L+L,K-N2T8Z2T.R-O.N.N.P.R.R.R.R.R.T.T.T.T.T/U/U0V0V/U/U0V1V3X3X3X2W2X2X3Y3Y3Y3Y3Y3Y3Y2Y2[2[2[2[2\4^6`;c<d5_3]4^4_4^4^4^4^3^3_2^2_2_2_3`3`3`3`2_1_0_0^/]/]0^4b5b1_0]0]0]/]/]/]/],[,]-],]+]+]+^,_+_+_+_+_+_*_+_+_+_+_*`*_)^)_)_)^)])])])])\)\)\)])])])])])])])\)])])^)^(^(^)^)^)^)_)_,b1e-a(^
(^
)^)^)])\(\(Z(Z(Z(Y(X(X(X(W(W(W(W'V'V'V&U&U%T%S&S&S&S%S%T%U-I-I-H-H.I-H-H-H-H,H+H+H+H*G)G)G)G)G)G)F*F*F*F*F*F*F*F*F)E)E)E)F)E)E)E)E)E(E(E(E(E(E(E(E)E)E(E(E(E(E'D'D(E(E'D&C&C'C*F+G,H*F)F(E(E(E'D'D(E(E(E(E'D'D'D'D'D'D'D'C'D(E(E(E(E(E(F(F(F(F(F(G(F(F(G(F(F(F(G(G(G)G)G)G)I)I)J)K)K*L*L*L*L*L*L*L*L,N/O2S3T0R-O.O/O/P1Q1R1R1R1R1R1R2S2T2T3V6[7[7Y6Y4W3V3V3V4W5W5W5W5W5W4W5X5Y5Y5Z5Z5Z6Z6Z6[7\7]7]7]7^9]<`=c;b8`4\4\4\5\5]5]5]5[5[5[5[5\5]5]5]5]5]5\5\6]6^5_3_2^2_2_2_2_2_3_3_3_2_1^1^2_2_2^2^2_2_2^2]2]2_2_2_1^1]1^1^0]0]2^2^2_2]2]2]2]2]3]3_3_3_4`3`3`3`4`4`4`4`4`4`4`4a5a8c9c8d8e8e8e9f9f9f9f;g<g<g<g<g;g<h<h<h<k;k<j=i=j=m=m=m@mAn@m@m@m@m@mAn@m@m@m@m@o@o?o?o@p@p@p@o@o@p@p@p@p?o?o?o?o?o?o?o?o?o?o?o?o?o?o?o?m?m@m>l=k=l=l=m=l<k=k=k>l=k=j=j=k>l=k=k=k=k=k=k=k>k>k>k>k>k>j=k=k<k<l=k>k>k>k>k?l?l?m@nAnDqFrDqBo@mAn@m@m@m@m@mBmBlBlAlBmBmBmAlAlBmAnAnBoBn@mAnAn@m?lCmIsIsCm@jAjAj@j@j@j@i@i@j@j?i?i>i>i>i=g>i>h>h>h>h>g=g>g>g=f=f=f=e<d<d<d;c;e;e;d;d:c:b:c:c9a8`6`5_5_6`5_5]5]6]6\5\4\4[3Z3Y3Y3Y0V0V1V.T.T/U/U/S/R/R/R/R-Q-Q-Q-Q-Q-O,N+M+N)M(M(L)K)K)K)K)K)K)K(H(H(H(H(H(H(H(H
'G	&F	&F	&F	&E	&E	&D	&D	&D	&D
'E
'E
'E
'E
'E
'E(F(F(F)G(F(F)G)G)G)G)G)G)G)G*H*H+J,I-I-I-I.J.J.J.J.J.J.J.J.J.M/N.N.P/R0Q0Q0O0O2P2P5R9U5R2P2P3O3P5R;W<X7T4Q4Q4R4R5R5R6S5R4S4T5U5U5U5T6U7V>\C`?]>ZFb%Tq'TtIh@]=Z<X;W;W:W;W<W<W<W<W<W<W<W<W<W<W;W;W;W:V9V8U8U9V8U8U8U8U8U7T7T8U8U7T7T8U8U8U8U8U8U8U8U7T7T8R7R7T6S6S5T5S5R4R3T3S3R4Q5R4Q4Q4P4P3P3O3N3N3N2N1M0M0L0L0L/L.L-L-L.M.M.M.L.K.K.K.K.K.K.K.K.K-J-J-J.K-K-K-K.K.L-L-L-O.Q2U6Y5V/R.P-L-K.M.L.K.K/K.K.K.K.K.K.K.K.K.K.K.K.K.K.K.K-J-J-J-J-J-J-J,I,I,I-J-I-I-I-I-I-I-I-H-H-H-H-H-H-H-H-H-H-H-I-I,I+H+H+H+H+H+H+H+H,I,I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)I)I)I)I(H)I)I)I)I)I)I)I*I,K-L)I)I)I)I)I(H(H(H(H)I)I)I)I)I)I)I)I)I)I)I)I)I)I)I(H(F(G(H(H(H(H(H(H(H(H(H(H(H(H(I'H'H)I*I+J+K+K+L+K,K.M0O-L,L+K+L+K+K,K.O4V5W/P-P-N.N.N.P.R.R.R.R.R.R.T.T.T.T/U/U0V0V/U/U0V0V1V2W3X2W2W2X3Y3Y3Y3Y3Y3Y3Y3Y2Y2Y2Y2[2\4^9a=c9b3]3\3]3_4^4^4^4^3^3^2]2]2]2]3_2_2_3`2_2_1_/^/^0_3a6d2`/]0]0]/]/]/]/]/]-\-\-\,\,^+]+]+]+]+^+_+_*^*^*^*^*^*^*^*^)](](](])])]([([)[(Z(Z)[([([)])])])[)[)[)[)])](]'\'\(](](]
)^-b.b*^(](](](](\(Z(Z(Z(Z(Y(X(X(W(W(W(W(W'V'U'T'T'T%S%T%S&S&S&S%S%S%S-I-I-H-H.I-H-H-H,H,H+H*G)G(F(F)G)G)G)G(F(E)E)F)F)F)F)F)F(E(E(E(E(E(E(E(E(E(E(E(E(E(E(E(E(E(E'D&C&C&C&C'D(E'D&C
%B
'C)E,H,I*F'D'D(E'D&C&C&C'D&C&C&C&C&C&C&C&C&C&C&B&C&C'D'D(E(E(F(F(F(F(F(F(E(E(F(F(F(F(F(F(F(F(F(F)G(F(G(H(F'G'H'H'H'H(H(H)I-M0N0L-K+K+I+I+I,J-J-J-J-J-J-J-J-L-M.N0P2S1R/O.N.N.N.N.N/O/O/O0P0P0P0P0Q1R1S1S1S1S1S3T3U3V3W2V2V4X8Z9[7[4Y2X2X2W2W2Y2Y3Y3Y3Y3Y3Y3Y3Z3Z3Z3Z3Z4Z5Z4Z4Z4[3\3]3]3]2]1^1\2\2^2_1_1_1_1_1_1_1^1^1_1_2_3_3_2^1_1_0^0_1`1`0_0_2_2_2_2_1^0^0^1^1^2_3_3_4`4`5`5`5`4`4`4`4`4`4`4`4`5b6b8d8e8e8e9f9f9f9f;g<h<g<g<g<g;g;g<h<j;j<j<i<i;k?m?m?l>k=j<k=m?m@m@m@m@m@m@m@m@m?m?m@m@m@m@m@m?n?o?o?o?o?m?o?o?o?o?o?o?o>n?o?o?o?o?m?l?m=m=m=m=m=k=l=k=i<h<h=i=i=i=i=k=k=k=k=k=k=k=k=k=k=k=k>k>k=i=k<j<j<k=k>k>k>k>k>k?l?l@mCpGsDq@m@m@mAm@m@m@m@m@mAkAkAkAmAmAm@m@l@l@m@mAmAn@m?l?l>k>jCnJsHr@k>i@i?i?i?j?j?i>h>i=h=g?i>h>h=h=h=g=g=g=g=g=g<f<f;e;e<f<f<e<d<d;c;c:c:c:c:c:b:a9a9b8a6`5_5_5_5_5^5]5]5]5]6\5\4[4Z3Y3Y3Y2X0V0V/U.T.T/U.T.S/R/R/R.Q-Q-Q-P,N+N*N)M(M)L)K)K)K)K)K)K(K(K'H'H'H(H(H(H(H(H
'G
'G
'G	&F	&E	&D	&D
&D
&D
&D
&D
&D
&D
&D	&D	&D	&D	&D	&D
'E
'E
'E
'E
'E
'E(F)G)G(G(H)G)G)G*G+H*G*G*I+I,J-I.J-J-J.J.J.J.J-L.L.L.N/R.P.O/O0O1O3Q9W6T1P2P2P2O5R8U;Y6S4Q3P3P3Q4Q5R5R6S5R4R4T4T4T4T5T7V=[A_?\<Y@]!Ok'Vs!NmCa=Z;Y;W;W;X:X;W<W<W<W<W<W<W<W<X;W;W:V9U9U8U8U8U8U8U8U8U8U7T7T7T7T8U8U8U7T7T7T8U8U8U8U7T7T7T7T7S6R6S5S5T4T4R4R3Q4R3R3S4S3R3R2Q2Q3R3N3N3N3N3N2N1M0L0L/K.K.L.M-L-L.K.K.K.K.K.J.J.J.K.K.J.J.J-J-I-I.K-J-J-J.K.K-J-L-M,N/R4V5V0R.O.L-K-L-L-K.L.L.K.K.K.K.J.J.J.J.J.J.J-I-I-I-I-I-I-I-J-J-J-I,I,I,I.J-I-I-I-I-I-H-H-H-I-I-I-I-I-I-H-H-H-H-I-I,I+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)I)I)I)I(H)I)I(H(H(H(H(H+K,K*I(H(H(H(H(H(H(H(H(H)I)I)I)I)I)I)I)I)I)I)I)I)I)I)G(G(F(G(H(H(H(H(H(H(H(H(H(H(H(H(I'H(I)J*I+J+K+K+L+K.M/N-L+K+K+K+L+K+K,L1R7Y4V.N-N-M/N.N.P.R.R.R.R.R.R.T.T.T.T.T/U/U/U0V0V0V0V0V1V2W2W2W2X2X2X3Y3Y3Y3Y3Y3Y3Y3Y2Y2[3\7_;b:a5_3]3\3]3^4^4^3^3^3^3^2]1\2]2]2]2]2]2^2_0^0^/^/^2`5b6b0]/]/]/]/]/]/]/]/],[,[-\,\,],\+\+]+]+]+^+^*\*\*^*^*\*\*]*^)]'\'\'\'\(](Z(Z)[(Z(Z)[(Z([)[)[)[)[)[)[)[)[)[(\'\'\(](](]+^.a+_)])](](](](Z(Z(Z(Y(X(X(X'V'V(W'V'U'T&U&T'T&S&S%S%S&R&S&S%S%S%S%S-I-I.I.I.I-H-H-I,I*G)G)G)G(F(F)G)G)F)F)F)E)E)E)E)E)E)E)E(E(E(E(E'D'D(E(E(E(E(E(E(E(E(E(E(E(E'D&C&C&C&C&C'D&C
%B
'C*F+G+G)E'C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C&C'D'E'E(F(F(F(F(F(F(F'E'E(F(F(F(F(F(F(F(F(F(F(F(F(F(F(G'H'H'H'H(H(H-L/N.M-J
)F
)G+I+H+H+H,I-I-I-I,H,H,I,J-L0N1O0N-L-J-I-I-I-J-J-J-J-J-J-J-J-J-K-K-K-K-K-K-K.L.M.N-M-M.N2P2P.O-M-M+M+J,L,L,L,L,L-M-M-M-N-N-O.O.O-O,O-Q/R/R/R/R.T.T.T.T-T-U-U-U.V-U,W-W-Z-Z-Z-Z-Z-Z.Z.Z/[0[1[2Z1Z1[0[0\0]0\1\1\1\2\2\2\1]/]/^0^0^1^2_2_2_2_5`5`6a5`4`4`4`4a4a4`4a4a4a6b8d9e:f9f9f:f:f;g;g;g<g<g<g<g;g<h;g;g<j<j<j;j<j=k?l>k=k;l:m>m@m@m@l@k@m@m@m@m@m@m@m@m@m@m@m?m?m?l?l?l?l?l?m?m?m?m?m?m>l?m?l?l?m?l?l=m=n=l=k<j<j=k=j=h<h<h<h<h<h<h=i=i=i<i<j=k=j=i=i=i<h<h=i=i=i<h<j<j=k=k=k>k>k>k>k?l?lCoGsDqAm@m@m@mAmAkAkAkAkAkAkAkAkAk@j?j?l@k@k@j@lAmAm?l?l?k>iBmIsHqAj>i>h=g?i?i?i>g>g>g=g=g=g?i>h>h=g=g=g=g=g<f<e<d<d<d;c;c<d;c;c;c:c:c9b8a6`6`7a9b:a9`7_6`6`5_5_5_6^5]5]5\5[5[5\4\3[4Z3Y3Y2X0W/U/U/U/U/T/R.R.Q.Q.Q.Q.Q-Q-Q-P,N*M(M(M(M)L)K)K)K)K)K(I'H'H'H'H'G
'F
'G	&F	&F	&F	&F	&D	&D	&D	&D
&D
&D&D&D&D&D&D&C
&C
&D
&D	&D	&D	&D	&D
'E
'E
'E
'E
'E
'E(F(F(F(G)G)G)G*G*G*G*G*I*I*I*I-I-J-J.J.J.J.J-J.J-I.N/R.Q.O/P/P2O7T6T2P1P2O2O4Q9V:W7U3P3P3P3P3P4Q5R5R6S5R4R4T4T4T4T5T=[Eb@^;X>ZHf'Tr%RoHf?]<Y;X:W:W;Y:X:W;X;X;X;X;X;X;X;Y:V:V9U8U8U8U8U8U8U8U8U8U7T7T7T7T7T7T7T8U7T7T7T7T8U8U8U7T7T6S6S6S6S5R5R5R4Q4Q4R3Q5R4R3S3S3S3Q2P2P3Q3N3N3N3M3M2N1M0L0L/K.L.M.M.M.K.K.K.K.K.K.J.J.J.J.K.J.J.J.J-I-I.K.K.K.K.L.K-J.M-M-M/O3T5V2T.O.L-J,K,K,K,K,K,K,K-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I.J-J-I-I-I-I-I.I-I-I-I-I-I-H-H-H-I-I-I-I-I-I-I-H-H-H-H-H,I,H+H+H+H+H+H+H+H+H+H+H+H*G*G+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)H)I)I)I)I)I)I(H(H(H(H+J,J,J(H(H(H(H(H(H(H(H(H)I)I)I)I)I)I)I)I)I)I)H)G)G)I)I)H)H(G(G(H(H(H(H(H(H(H(H(H(H(H(H'I'H(I)J*I*I+K+K+L,L.M.M,K+K+K+K+K+K+K.O4U6V2R.M-L-L-N-N.N.P.Q.R.R.R.R.T.T.T.T.T/U/U/U1V0V0V0V0V1V2W2W2W1X2X2X3Y3Y3Y3Y3Y3Y3Y3Y2Y2Z4]8`9b5_4\3]3]3^3^3^3^2]2]3^2]2]1\2]2]2]1\0[0[2^0^/]/]0^5a7c4`0]/]/]/]/]/\/\/]/],[,[-\,\,\-\+[+\+]+]+]*\)[)[*^*\*\*\*\*\)['Z'Z'Z'Z(Z(Z(X(X)Y(X(X(X(X(X)Z(Z(X)Y(Y(Z)[)[([([(Z(Z(Z)\,_,_)])[)[([(Z(Z(Z(Y(X(X(X(X(X'V'V&U&U'U'T&T&S&S&S&S%S%R%Q%S%S$R$R%S%S.I.I.J-I,I+H+G+G+H*G)G)G)F)E)E)F)F)F*F*F)F(E)E)E)E)E)E)E(E'D(E(E'D'D(E(E(E(E(E(E(E)E)E(E&C&C&C
&C	&C	&C
&C&C&C&C
%B*F+G
+F)E'C&C&C&C&C&C&C&C&C&C&C&C&C	&C	&C	&C&C&C
%B
%B	&C
&C&C&C&C&C
&C
'C(D'D'D'D(F(F'E&E'E(F(F(F(F(F(F(F(F(F(F(F(F(F)G(I(H(H(H(H-K0N/N+J)I)H*I+J+I+H+H,I-I-I-I-H-H-I-J/O1P0N,M-L-J-I-I,J,J-J-J-I-J-J-J-J-J-J-J-J-J-J-J,J,K,L-L-L-L/N2O-L,K+J+J*J+J+I+J
+J+J+J+J+J+J+J+J+J+I*J)I)I)I*I)I)I)I)I(J(I(H'H'J'J'J'J&I&I&I&I&I&I'K'L%I%K&K&K'K)K*J*J*K*L)N*O*O+O+O,P,N-O-P,Q+S+S,T-V-V-V.W/X.X/X0Y1Z1Z2\3]3]3[3\2_3_4`4`4a5a7d8e8e9f9f9f9f:f:f;g;g;g<g<g<g;g;g<i<j<j<j<k<j<j=k>l>m<m=m=m@m@m@m@m@n@n@o@o@o@o@m@m@l@l@m@m?l?l?l?l?l?l>k>k?l?l?l?l?l?l?l?l>l=l=m=n=l=k<j<h=i=h=h=h<h<h<i<i<h<h<h<h<i<i=i=i=i=i<h<h<h<h<h<h<h=i=i=i=i=i=j=k=k=k?jCoGrEqAn@m@m@m?l@l@jAkAkAkAkAkAkAk@j@j?l?l@l@k@j@lAm@m?l>k>iBlIrGp@j?h=g=g=g=h=h=g=g=g=g<f<f@g?g>g<f<f<f<f<d=g<f<e<e<d;c;c;c;a;a;a:a9b9b8a7a6_6_6^7^7^7^6_5_5_5_5_6_6]6]6\5[4Z4Z2Z2[2[3Z3Y2X0W/V/U.U.U/U/T/R.Q.Q-Q-Q-Q-Q-Q-P,O)N(M(L(K(K)L)K(K'J'J'J(I'H'H'F'F
'E	&D	&D	&F	&F	&F	&D	&D
&D
&D
&C&C
&C
&D	&D	&D	&D	&D	&C	&C&D&D
&D
&D
&D
&D
&D
(D
'D
'E
'E
'E(F(F(F(F(F)G)G*G*G)G)H*I*I*I*I,I-I.J.J.J-I-I.J-J-I.N.R.R.P.O/Q4T8W1P.M1O2O2O6S:W8U2P1P3P3P3P3P3Q3Q4Q6S6S5S4T4T4T4T;ZC`A^:X:VC_"Pm&TtKiC^=Y:V;X:X:X;Y:X:X;Y;Y;Y;Y;Y;Y;Y:X:W9U8U8U8U8U8U8U7T7T7T8U7T6T6S7T7T7T7T7T7T7T7T7T8U8U8U7T7T6S6S6S6S5R5R5R4Q4Q4R4R4Q3Q3S3S3R3Q3O3O4O3N2N2N3M2M2N1M0L0L/L.M.M.M.M.L.K.K.K.K.K.K.J.J.J.K.J.J.J-J-I-I.J.J-K-L-L-I-K,K-L-L.N0R4V3W.P.L-J,K,K,K,K,K,K,J-I-I-I-I-I-I-I-I-I-I-I-I-J-J-J-J-J-I-I-I.J.J-J-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-I-H-H-H-I-I+H+H+H+H+H+H+H+H+H+H+H*G*G+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H+H*H)H)I)I)I)I)I(H(H(H(H)I,K+I)I(H(H'H'H(H'H'H(H(H)I)I)I)I)I)I)I)I)I)I)H)H)H)I)I)I)I(H(H(H(H(H(H(H(H(H(H(H(H'H'H'I'H(I)J*J*J+K+K+L-L.M-M,K+K+K*K+K,K,L/P5V4T/P,M-L-L,N,M-M-N-P.R.R.R.R.T.T.T.T.T.T/U/U/U/U0V0V0V0V1W2W2W1X1X2X2X2X2X3Y3Y3Y3Y3Y3Y3Z5^9a9b4^4\4]3]3^3^3^3^2]2]3^2]2]2]2]2]2]1\0[0\3]1]0^/]2_7c5a0\0\0].\/].\.Z/\/].\,Z,[-\-\-\-\,[+\+]+]+]*\)[)[*\*\*\)[)[)[)[(Z(Z(Z(Z(Z(X(X(X(X(X(X(X(X(X)Y(X(X)Y(Y(Z(Z)[)[)[(Z&Y&Y*\+^)^(\(Z(Z(Z(Z(Z(Y(X(X(X(X'W&W&V'V&U&U'U'T&U&S&S&S%S%S%R%R%S$S$S$S%S%S       FourTexDieEffectÛ' Shader "Custom/FourTexDieEffect" {
Properties {
 _tex1 ("Base (RGB)", 2D) = "white" {}
 _tex2 ("Base (RGB)", 2D) = "white" {}
 _tex3 ("Base (RGB)", 2D) = "white" {}
 _tex4 ("Base (RGB)", 2D) = "white" {}
 _MainLight ("MainLight", Float) = 1.2
 _MainAlpha ("MainAlpha", Range(0,0.9)) = 0
 _Color ("Main Color", Color) = (1,1,0,1)
 _MaskMap ("MaskMap", 2D) = "white" {}
 _MaskRp ("MaskRp", Float) = 1
 _Amount ("Amount", Range(0,2)) = 0
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_18.w = tmpvar_5;
  c_1.w = c_18.w;
  c_1.xyz = (c_18.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_18.w = tmpvar_5;
  c_1.w = c_18.w;
  c_1.xyz = (c_18.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  c_1.xyz = (tmpvar_3 * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD3).xyz));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  c_1.xyz = (tmpvar_3 * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD3).xyz));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  mediump vec3 lm_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD3).xyz);
  lm_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_3 * lm_18);
  c_1.xyz = tmpvar_20;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  mediump vec3 lm_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD3).xyz);
  lm_18 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_3 * lm_18);
  c_1.xyz = tmpvar_20;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float tmpvar_18;
  mediump float lightShadowDataX_19;
  highp float dist_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((dist_20 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), lightShadowDataX_19);
  tmpvar_18 = tmpvar_23;
  lowp vec4 c_24;
  c_24.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz))
   * tmpvar_18) * 2.0));
  c_24.w = tmpvar_5;
  c_1.w = c_24.w;
  c_1.xyz = (c_24.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float tmpvar_18;
  mediump float lightShadowDataX_19;
  highp float dist_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((dist_20 > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), lightShadowDataX_19);
  tmpvar_18 = tmpvar_23;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD3).xyz), vec3((tmpvar_18 * 2.0))));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float tmpvar_18;
  mediump float lightShadowDataX_19;
  highp float dist_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((dist_20 > 
    (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w)
  )), lightShadowDataX_19);
  tmpvar_18 = tmpvar_23;
  mediump vec3 lm_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD3).xyz);
  lm_24 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = vec3((tmpvar_18 * 2.0));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_3 * min (lm_24, tmpvar_26));
  c_1.xyz = tmpvar_27;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosX0 - tmpvar_24.x);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosY0 - tmpvar_24.y);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosZ0 - tmpvar_24.z);
  highp vec4 tmpvar_28;
  tmpvar_28 = (((tmpvar_25 * tmpvar_25) + (tmpvar_26 * tmpvar_26)) + (tmpvar_27 * tmpvar_27));
  highp vec4 tmpvar_29;
  tmpvar_29 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_25 * tmpvar_7.x) + (tmpvar_26 * tmpvar_7.y)) + (tmpvar_27 * tmpvar_7.z))
   * 
    inversesqrt(tmpvar_28)
  )) * (1.0/((1.0 + 
    (tmpvar_28 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_5 + ((
    ((unity_LightColor[0].xyz * tmpvar_29.x) + (unity_LightColor[1].xyz * tmpvar_29.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_29.z)
  ) + (unity_LightColor[3].xyz * tmpvar_29.w)));
  tmpvar_5 = tmpvar_30;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_18.w = tmpvar_5;
  c_1.w = c_18.w;
  c_1.xyz = (c_18.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  highp vec3 tmpvar_24;
  tmpvar_24 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosX0 - tmpvar_24.x);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosY0 - tmpvar_24.y);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosZ0 - tmpvar_24.z);
  highp vec4 tmpvar_28;
  tmpvar_28 = (((tmpvar_25 * tmpvar_25) + (tmpvar_26 * tmpvar_26)) + (tmpvar_27 * tmpvar_27));
  highp vec4 tmpvar_29;
  tmpvar_29 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_25 * tmpvar_7.x) + (tmpvar_26 * tmpvar_7.y)) + (tmpvar_27 * tmpvar_7.z))
   * 
    inversesqrt(tmpvar_28)
  )) * (1.0/((1.0 + 
    (tmpvar_28 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_5 + ((
    ((unity_LightColor[0].xyz * tmpvar_29.x) + (unity_LightColor[1].xyz * tmpvar_29.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_29.z)
  ) + (unity_LightColor[3].xyz * tmpvar_29.w)));
  tmpvar_5 = tmpvar_30;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_18.w = tmpvar_5;
  c_1.w = c_18.w;
  c_1.xyz = (c_18.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  highp vec4 cse_24;
  cse_24 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosX0 - cse_24.x);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosY0 - cse_24.y);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosZ0 - cse_24.z);
  highp vec4 tmpvar_28;
  tmpvar_28 = (((tmpvar_25 * tmpvar_25) + (tmpvar_26 * tmpvar_26)) + (tmpvar_27 * tmpvar_27));
  highp vec4 tmpvar_29;
  tmpvar_29 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_25 * tmpvar_7.x) + (tmpvar_26 * tmpvar_7.y)) + (tmpvar_27 * tmpvar_7.z))
   * 
    inversesqrt(tmpvar_28)
  )) * (1.0/((1.0 + 
    (tmpvar_28 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_5 + ((
    ((unity_LightColor[0].xyz * tmpvar_29.x) + (unity_LightColor[1].xyz * tmpvar_29.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_29.z)
  ) + (unity_LightColor[3].xyz * tmpvar_29.w)));
  tmpvar_5 = tmpvar_30;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * cse_24);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float tmpvar_18;
  mediump float lightShadowDataX_19;
  highp float dist_20;
  lowp float tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x;
  dist_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = _LightShadowData.x;
  lightShadowDataX_19 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = max (float((dist_20 > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), lightShadowDataX_19);
  tmpvar_18 = tmpvar_23;
  lowp vec4 c_24;
  c_24.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz))
   * tmpvar_18) * 2.0));
  c_24.w = tmpvar_5;
  c_1.w = c_24.w;
  c_1.xyz = (c_24.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  highp float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  lowp vec4 c_21;
  c_21.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz))
   * shadow_18) * 2.0));
  c_21.w = tmpvar_5;
  c_1.w = c_21.w;
  c_1.xyz = (c_21.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  lowp vec4 c_22;
  c_22.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz))
   * shadow_18) * 2.0));
  c_22.w = tmpvar_5;
  c_1.w = c_22.w;
  c_1.xyz = (c_22.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD3).xyz), vec3((shadow_18 * 2.0))));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD3).xyz), vec3((shadow_18 * 2.0))));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  mediump vec3 lm_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD3).xyz);
  lm_21 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = vec3((shadow_18 * 2.0));
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_3 * min (lm_21, tmpvar_23));
  c_1.xyz = tmpvar_24;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  mediump vec3 lm_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD3).xyz);
  lm_22 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = vec3((shadow_18 * 2.0));
  mediump vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * min (lm_22, tmpvar_24));
  c_1.xyz = tmpvar_25;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  highp vec4 cse_24;
  cse_24 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosX0 - cse_24.x);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosY0 - cse_24.y);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosZ0 - cse_24.z);
  highp vec4 tmpvar_28;
  tmpvar_28 = (((tmpvar_25 * tmpvar_25) + (tmpvar_26 * tmpvar_26)) + (tmpvar_27 * tmpvar_27));
  highp vec4 tmpvar_29;
  tmpvar_29 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_25 * tmpvar_7.x) + (tmpvar_26 * tmpvar_7.y)) + (tmpvar_27 * tmpvar_7.z))
   * 
    inversesqrt(tmpvar_28)
  )) * (1.0/((1.0 + 
    (tmpvar_28 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_5 + ((
    ((unity_LightColor[0].xyz * tmpvar_29.x) + (unity_LightColor[1].xyz * tmpvar_29.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_29.z)
  ) + (unity_LightColor[3].xyz * tmpvar_29.w)));
  tmpvar_5 = tmpvar_30;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * cse_24);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  lowp float tmpvar_19;
  tmpvar_19 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  highp float tmpvar_20;
  tmpvar_20 = (_LightShadowData.x + (tmpvar_19 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_20;
  lowp vec4 c_21;
  c_21.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz))
   * shadow_18) * 2.0));
  c_21.w = tmpvar_5;
  c_1.w = c_21.w;
  c_1.xyz = (c_21.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_3.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_3.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_4 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = tmpvar_7;
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  shlight_1 = tmpvar_9;
  tmpvar_5 = shlight_1;
  highp vec4 cse_24;
  cse_24 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosX0 - cse_24.x);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosY0 - cse_24.y);
  highp vec4 tmpvar_27;
  tmpvar_27 = (unity_4LightPosZ0 - cse_24.z);
  highp vec4 tmpvar_28;
  tmpvar_28 = (((tmpvar_25 * tmpvar_25) + (tmpvar_26 * tmpvar_26)) + (tmpvar_27 * tmpvar_27));
  highp vec4 tmpvar_29;
  tmpvar_29 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_25 * tmpvar_7.x) + (tmpvar_26 * tmpvar_7.y)) + (tmpvar_27 * tmpvar_7.z))
   * 
    inversesqrt(tmpvar_28)
  )) * (1.0/((1.0 + 
    (tmpvar_28 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_5 + ((
    ((unity_LightColor[0].xyz * tmpvar_29.x) + (unity_LightColor[1].xyz * tmpvar_29.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_29.z)
  ) + (unity_LightColor[3].xyz * tmpvar_29.w)));
  tmpvar_5 = tmpvar_30;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = (unity_World2Shadow[0] * cse_24);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.25)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    if ((tmpvar_2.x < 0.5)) {
      lowp vec4 tmpvar_10;
      tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_8 = tmpvar_10;
    } else {
      if ((tmpvar_2.x < 0.75)) {
        lowp vec4 tmpvar_11;
        tmpvar_11 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_8 = tmpvar_11;
      } else {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_8 = tmpvar_12;
      };
    };
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_7 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_15;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_17;
  lowp float shadow_18;
  mediump float tmpvar_19;
  tmpvar_19 = texture (_ShadowMapTexture, xlv_TEXCOORD5.xyz);
  lowp float tmpvar_20;
  tmpvar_20 = tmpvar_19;
  highp float tmpvar_21;
  tmpvar_21 = (_LightShadowData.x + (tmpvar_20 * (1.0 - _LightShadowData.x)));
  shadow_18 = tmpvar_21;
  lowp vec4 c_22;
  c_22.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD3, _WorldSpaceLightPos0.xyz))
   * shadow_18) * 2.0));
  c_22.w = tmpvar_5;
  c_1.w = c_22.w;
  c_1.xyz = (c_22.xyz + (tmpvar_3 * xlv_TEXCOORD4));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  tmpvar_7 = (_WorldSpaceLightPos0.xyz - cse_8.xyz);
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * cse_8).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD3);
  lightDir_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * texture2D (_LightTexture0, vec2(tmpvar_19)).w) * 2.0));
  c_20.w = tmpvar_6;
  c_1.xyz = c_20.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  tmpvar_7 = (_WorldSpaceLightPos0.xyz - cse_8.xyz);
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * cse_8).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD3);
  lightDir_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * texture (_LightTexture0, vec2(tmpvar_19)).w) * 2.0));
  c_20.w = tmpvar_6;
  c_1.xyz = c_20.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  lightDir_2 = xlv_TEXCOORD3;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD2, lightDir_2)
  ) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  lightDir_2 = xlv_TEXCOORD3;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD2, lightDir_2)
  ) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  tmpvar_7 = (_WorldSpaceLightPos0.xyz - cse_8.xyz);
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * cse_8);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD3);
  lightDir_2 = tmpvar_18;
  highp vec2 P_19;
  P_19 = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5);
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz);
  lowp float atten_21;
  atten_21 = ((float(
    (xlv_TEXCOORD4.z > 0.0)
  ) * texture2D (_LightTexture0, P_19).w) * texture2D (_LightTextureB0, vec2(tmpvar_20)).w);
  lowp vec4 c_22;
  c_22.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * atten_21) * 2.0));
  c_22.w = tmpvar_6;
  c_1.xyz = c_22.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  tmpvar_7 = (_WorldSpaceLightPos0.xyz - cse_8.xyz);
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * cse_8);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD3);
  lightDir_2 = tmpvar_18;
  highp vec2 P_19;
  P_19 = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) + 0.5);
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD4.xyz, xlv_TEXCOORD4.xyz);
  lowp float atten_21;
  atten_21 = ((float(
    (xlv_TEXCOORD4.z > 0.0)
  ) * texture (_LightTexture0, P_19).w) * texture (_LightTextureB0, vec2(tmpvar_20)).w);
  lowp vec4 c_22;
  c_22.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * atten_21) * 2.0));
  c_22.w = tmpvar_6;
  c_1.xyz = c_22.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  tmpvar_7 = (_WorldSpaceLightPos0.xyz - cse_8.xyz);
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * cse_8).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD3);
  lightDir_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * 
    (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, xlv_TEXCOORD4).w)
  ) * 2.0));
  c_20.w = tmpvar_6;
  c_1.xyz = c_20.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  tmpvar_7 = (_WorldSpaceLightPos0.xyz - cse_8.xyz);
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * cse_8).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD3);
  lightDir_2 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD4, xlv_TEXCOORD4);
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * 
    (texture (_LightTextureB0, vec2(tmpvar_19)).w * texture (_LightTexture0, xlv_TEXCOORD4).w)
  ) * 2.0));
  c_20.w = tmpvar_6;
  c_1.xyz = c_20.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  lightDir_2 = xlv_TEXCOORD3;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * texture2D (_LightTexture0, xlv_TEXCOORD4).w) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  tmpvar_4 = tmpvar_7;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.25)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_9 = tmpvar_10;
  } else {
    if ((tmpvar_3.x < 0.5)) {
      lowp vec4 tmpvar_11;
      tmpvar_11 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_9 = tmpvar_11;
    } else {
      if ((tmpvar_3.x < 0.75)) {
        lowp vec4 tmpvar_12;
        tmpvar_12 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_9 = tmpvar_12;
      } else {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_9 = tmpvar_13;
      };
    };
  };
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (tmpvar_4 * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_8 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_16;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_17;
  lightDir_2 = xlv_TEXCOORD3;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD2, lightDir_2))
   * texture (_LightTexture0, xlv_TEXCOORD4).w) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (tmpvar_8 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_10;
  mediump vec4 normal_11;
  normal_11 = tmpvar_9;
  highp float vC_12;
  mediump vec3 x3_13;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAr, normal_11);
  x1_15.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAg, normal_11);
  x1_15.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAb, normal_11);
  x1_15.z = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_11.xyzz * normal_11.yzzx);
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBr, tmpvar_19);
  x2_14.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBg, tmpvar_19);
  x2_14.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBb, tmpvar_19);
  x2_14.z = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y));
  vC_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (unity_SHC.xyz * vC_12);
  x3_13 = tmpvar_24;
  tmpvar_10 = ((x1_15 + x2_14) + x3_13);
  tmpvar_3 = tmpvar_10;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture2D (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_21.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xyz + xlv_TEXCOORD4);
  light_3.xyz = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * light_3.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (tmpvar_8 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_10;
  mediump vec4 normal_11;
  normal_11 = tmpvar_9;
  highp float vC_12;
  mediump vec3 x3_13;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAr, normal_11);
  x1_15.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAg, normal_11);
  x1_15.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAb, normal_11);
  x1_15.z = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_11.xyzz * normal_11.yzzx);
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBr, tmpvar_19);
  x2_14.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBg, tmpvar_19);
  x2_14.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBb, tmpvar_19);
  x2_14.z = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y));
  vC_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (unity_SHC.xyz * vC_12);
  x3_13 = tmpvar_24;
  tmpvar_10 = ((x1_15 + x2_14) + x3_13);
  tmpvar_3 = tmpvar_10;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_21.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xyz + xlv_TEXCOORD4);
  light_3.xyz = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * light_3.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.25)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    if ((tmpvar_7.x < 0.5)) {
      lowp vec4 tmpvar_15;
      tmpvar_15 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_13 = tmpvar_15;
    } else {
      if ((tmpvar_7.x < 0.75)) {
        lowp vec4 tmpvar_16;
        tmpvar_16 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_13 = tmpvar_16;
      } else {
        lowp vec4 tmpvar_17;
        tmpvar_17 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_13 = tmpvar_17;
      };
    };
  };
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_18 = texture2D (_MaskMap, P_19);
  h_12 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_20;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_6 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = ((sqrt(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lmFull_4 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  lmIndirect_3 = tmpvar_27;
  light_6.xyz = (tmpvar_24.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * light_6.xyz);
  c_28.xyz = tmpvar_29;
  c_28.w = tmpvar_10;
  c_2 = c_28;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.25)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    if ((tmpvar_7.x < 0.5)) {
      lowp vec4 tmpvar_15;
      tmpvar_15 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_13 = tmpvar_15;
    } else {
      if ((tmpvar_7.x < 0.75)) {
        lowp vec4 tmpvar_16;
        tmpvar_16 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_13 = tmpvar_16;
      } else {
        lowp vec4 tmpvar_17;
        tmpvar_17 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_13 = tmpvar_17;
      };
    };
  };
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_18 = texture (_MaskMap, P_19);
  h_12 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_20;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_6 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = ((sqrt(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lmFull_4 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  lmIndirect_3 = tmpvar_27;
  light_6.xyz = (tmpvar_24.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * light_6.xyz);
  c_28.xyz = tmpvar_29;
  c_28.w = tmpvar_10;
  c_2 = c_28;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture2D (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec3 lm_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_21 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = lm_21;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_23);
  light_3 = tmpvar_24;
  lowp vec4 c_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_5 * tmpvar_24.xyz);
  c_25.xyz = tmpvar_26;
  c_25.w = tmpvar_7;
  c_2 = c_25;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec3 lm_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_21 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = lm_21;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_23);
  light_3 = tmpvar_24;
  lowp vec4 c_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_5 * tmpvar_24.xyz);
  c_25.xyz = tmpvar_26;
  c_25.w = tmpvar_7;
  c_2 = c_25;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (tmpvar_8 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_10;
  mediump vec4 normal_11;
  normal_11 = tmpvar_9;
  highp float vC_12;
  mediump vec3 x3_13;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAr, normal_11);
  x1_15.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAg, normal_11);
  x1_15.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAb, normal_11);
  x1_15.z = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_11.xyzz * normal_11.yzzx);
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBr, tmpvar_19);
  x2_14.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBg, tmpvar_19);
  x2_14.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBb, tmpvar_19);
  x2_14.z = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y));
  vC_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (unity_SHC.xyz * vC_12);
  x3_13 = tmpvar_24;
  tmpvar_10 = ((x1_15 + x2_14) + x3_13);
  tmpvar_3 = tmpvar_10;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture2D (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xyz + xlv_TEXCOORD4);
  light_3.xyz = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * light_3.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = _Object2World[0].xyz;
  tmpvar_8[1] = _Object2World[1].xyz;
  tmpvar_8[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = (tmpvar_8 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_10;
  mediump vec4 normal_11;
  normal_11 = tmpvar_9;
  highp float vC_12;
  mediump vec3 x3_13;
  mediump vec3 x2_14;
  mediump vec3 x1_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAr, normal_11);
  x1_15.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAg, normal_11);
  x1_15.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHAb, normal_11);
  x1_15.z = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = (normal_11.xyzz * normal_11.yzzx);
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBr, tmpvar_19);
  x2_14.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBg, tmpvar_19);
  x2_14.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (unity_SHBb, tmpvar_19);
  x2_14.z = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((normal_11.x * normal_11.x) - (normal_11.y * normal_11.y));
  vC_12 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (unity_SHC.xyz * vC_12);
  x3_13 = tmpvar_24;
  tmpvar_10 = ((x1_15 + x2_14) + x3_13);
  tmpvar_3 = tmpvar_10;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_21.w;
  highp vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xyz + xlv_TEXCOORD4);
  light_3.xyz = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * light_3.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.25)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    if ((tmpvar_7.x < 0.5)) {
      lowp vec4 tmpvar_15;
      tmpvar_15 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_13 = tmpvar_15;
    } else {
      if ((tmpvar_7.x < 0.75)) {
        lowp vec4 tmpvar_16;
        tmpvar_16 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_13 = tmpvar_16;
      } else {
        lowp vec4 tmpvar_17;
        tmpvar_17 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_13 = tmpvar_17;
      };
    };
  };
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_18 = texture2D (_MaskMap, P_19);
  h_12 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_20;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_6 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = ((sqrt(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lmFull_4 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  lmIndirect_3 = tmpvar_27;
  light_6.xyz = (tmpvar_24.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * light_6.xyz);
  c_28.xyz = tmpvar_29;
  c_28.w = tmpvar_10;
  c_2 = c_28;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_4.zw;
  tmpvar_3.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_3.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD5 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.25)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    if ((tmpvar_7.x < 0.5)) {
      lowp vec4 tmpvar_15;
      tmpvar_15 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_13 = tmpvar_15;
    } else {
      if ((tmpvar_7.x < 0.75)) {
        lowp vec4 tmpvar_16;
        tmpvar_16 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_13 = tmpvar_16;
      } else {
        lowp vec4 tmpvar_17;
        tmpvar_17 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_13 = tmpvar_17;
      };
    };
  };
  lowp vec4 tmpvar_18;
  highp vec2 P_19;
  P_19 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_18 = texture (_MaskMap, P_19);
  h_12 = tmpvar_18;
  mediump float tmpvar_20;
  tmpvar_20 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_20;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_21;
  tmpvar_21 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_6 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_24.w;
  highp float tmpvar_25;
  tmpvar_25 = ((sqrt(
    dot (xlv_TEXCOORD5, xlv_TEXCOORD5)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lmFull_4 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD4).xyz);
  lmIndirect_3 = tmpvar_27;
  light_6.xyz = (tmpvar_24.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * light_6.xyz);
  c_28.xyz = tmpvar_29;
  c_28.w = tmpvar_10;
  c_2 = c_28;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture2D (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture2D (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture2D (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec3 lm_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_21 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = lm_21;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_23);
  light_3 = tmpvar_24;
  lowp vec4 c_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_5 * tmpvar_24.xyz);
  c_25.xyz = tmpvar_26;
  c_25.w = tmpvar_7;
  c_2 = c_25;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _tex2_ST;
uniform highp vec4 _tex3_ST;
uniform highp vec4 _tex4_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD3;
out highp vec2 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _tex2_ST.xy) + _tex2_ST.zw);
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex3_ST.xy) + _tex3_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _tex4_ST.xy) + _tex4_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD4 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD3;
in highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.25)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    if ((tmpvar_4.x < 0.5)) {
      lowp vec4 tmpvar_12;
      tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.zw);
      c_10 = tmpvar_12;
    } else {
      if ((tmpvar_4.x < 0.75)) {
        lowp vec4 tmpvar_13;
        tmpvar_13 = texture (_tex3, xlv_TEXCOORD1.xy);
        c_10 = tmpvar_13;
      } else {
        lowp vec4 tmpvar_14;
        tmpvar_14 = texture (_tex4, xlv_TEXCOORD1.zw);
        c_10 = tmpvar_14;
      };
    };
  };
  lowp vec4 tmpvar_15;
  highp vec2 P_16;
  P_16 = (xlv_TEXCOORD2 * _MaskRp);
  tmpvar_15 = texture (_MaskMap, P_16);
  h_9 = tmpvar_15;
  mediump float tmpvar_17;
  tmpvar_17 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_17;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = textureProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_20;
  mediump vec3 lm_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD4).xyz);
  lm_21 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 0.0;
  tmpvar_23.xyz = lm_21;
  mediump vec4 tmpvar_24;
  tmpvar_24 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_23);
  light_3 = tmpvar_24;
  lowp vec4 c_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_5 * tmpvar_24.xyz);
  c_25.xyz = tmpvar_26;
  c_25.w = tmpvar_7;
  c_2 = c_25;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                          UITextureGray    	  Shader "Custom/UITextureGray" {
Properties {
 _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" {}
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
  Offset -1, -1
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying mediump vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump vec2 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
varying mediump vec2 xlv_TEXCOORD0;
void main ()
{
  highp float gray_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  col_2.w = tmpvar_3.w;
  lowp float tmpvar_4;
  tmpvar_4 = dot (tmpvar_3.xyz, vec3(0.299, 0.587, 0.114));
  gray_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5.x = gray_1;
  tmpvar_5.y = gray_1;
  tmpvar_5.z = gray_1;
  col_2.xyz = tmpvar_5;
  gl_FragData[0] = col_2;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out mediump vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump vec2 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
in mediump vec2 xlv_TEXCOORD0;
void main ()
{
  highp float gray_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0);
  col_2.w = tmpvar_3.w;
  lowp float tmpvar_4;
  tmpvar_4 = dot (tmpvar_3.xyz, vec3(0.299, 0.587, 0.114));
  gray_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5.x = gray_1;
  tmpvar_5.y = gray_1;
  tmpvar_5.z = gray_1;
  col_2.xyz = tmpvar_5;
  _glesFragData[0] = col_2;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}                  OneTexDieEffect ` Shader "Custom/OneTexDieEffect" {
Properties {
 _tex1 ("Base (RGB)", 2D) = "white" {}
 _MainLight ("MainLight", Float) = 1.2
 _MainAlpha ("MainAlpha", Range(0,0.9)) = 0
 _Color ("Main Color", Color) = (1,1,0,1)
 _MaskMap ("MaskMap", 2D) = "white" {}
 _MaskRp ("MaskRp", Float) = 1
 _Amount ("Amount", Range(0,2)) = 0
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_2 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_14.w = tmpvar_4;
  c_1.w = c_14.w;
  c_1.xyz = (c_14.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_2 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_14.w = tmpvar_4;
  c_1.w = c_14.w;
  c_1.xyz = (c_14.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  c_1.xyz = (tmpvar_2 * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  c_1.xyz = (tmpvar_2 * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  mediump vec3 lm_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_14 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * lm_14);
  c_1.xyz = tmpvar_16;
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  mediump vec3 lm_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_14 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * lm_14);
  c_1.xyz = tmpvar_16;
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float tmpvar_14;
  mediump float lightShadowDataX_15;
  highp float dist_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((dist_16 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_15);
  tmpvar_14 = tmpvar_19;
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_2 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_14) * 2.0));
  c_20.w = tmpvar_4;
  c_1.w = c_20.w;
  c_1.xyz = (c_20.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float tmpvar_14;
  mediump float lightShadowDataX_15;
  highp float dist_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((dist_16 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_15);
  tmpvar_14 = tmpvar_19;
  c_1.xyz = (tmpvar_2 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_14 * 2.0))));
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float tmpvar_14;
  mediump float lightShadowDataX_15;
  highp float dist_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((dist_16 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_15);
  tmpvar_14 = tmpvar_19;
  mediump vec3 lm_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_20 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = vec3((tmpvar_14 * 2.0));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_2 * min (lm_20, tmpvar_22));
  c_1.xyz = tmpvar_23;
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_2 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_14.w = tmpvar_4;
  c_1.w = c_14.w;
  c_1.xyz = (c_14.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_2 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_14.w = tmpvar_4;
  c_1.w = c_14.w;
  c_1.xyz = (c_14.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec4 cse_23;
  cse_23 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - cse_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - cse_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - cse_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_23);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float tmpvar_14;
  mediump float lightShadowDataX_15;
  highp float dist_16;
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _LightShadowData.x;
  lightShadowDataX_15 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((dist_16 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_15);
  tmpvar_14 = tmpvar_19;
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_2 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_14) * 2.0));
  c_20.w = tmpvar_4;
  c_1.w = c_20.w;
  c_1.xyz = (c_20.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  lowp float tmpvar_15;
  tmpvar_15 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_16;
  tmpvar_16 = (_LightShadowData.x + (tmpvar_15 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_16;
  lowp vec4 c_17;
  c_17.xyz = ((tmpvar_2 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_14) * 2.0));
  c_17.w = tmpvar_4;
  c_1.w = c_17.w;
  c_1.xyz = (c_17.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  mediump float tmpvar_15;
  tmpvar_15 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = (_LightShadowData.x + (tmpvar_16 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_17;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_2 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_14) * 2.0));
  c_18.w = tmpvar_4;
  c_1.w = c_18.w;
  c_1.xyz = (c_18.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  lowp float tmpvar_15;
  tmpvar_15 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_16;
  tmpvar_16 = (_LightShadowData.x + (tmpvar_15 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_16;
  c_1.xyz = (tmpvar_2 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_14 * 2.0))));
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  mediump float tmpvar_15;
  tmpvar_15 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = (_LightShadowData.x + (tmpvar_16 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_17;
  c_1.xyz = (tmpvar_2 * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_14 * 2.0))));
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  lowp float tmpvar_15;
  tmpvar_15 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_16;
  tmpvar_16 = (_LightShadowData.x + (tmpvar_15 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_16;
  mediump vec3 lm_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_17 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = vec3((shadow_14 * 2.0));
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * min (lm_17, tmpvar_19));
  c_1.xyz = tmpvar_20;
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  mediump float tmpvar_15;
  tmpvar_15 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = (_LightShadowData.x + (tmpvar_16 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_17;
  mediump vec3 lm_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_18 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = vec3((shadow_14 * 2.0));
  mediump vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_2 * min (lm_18, tmpvar_20));
  c_1.xyz = tmpvar_21;
  c_1.w = tmpvar_4;
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec4 cse_23;
  cse_23 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - cse_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - cse_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - cse_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_23);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture2D (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  lowp float tmpvar_15;
  tmpvar_15 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_16;
  tmpvar_16 = (_LightShadowData.x + (tmpvar_15 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_16;
  lowp vec4 c_17;
  c_17.xyz = ((tmpvar_2 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_14) * 2.0));
  c_17.w = tmpvar_4;
  c_1.w = c_17.w;
  c_1.xyz = (c_17.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec4 cse_23;
  cse_23 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - cse_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - cse_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - cse_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_23);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp float tmpvar_4;
  tmpvar_2 = vec3(0.0, 0.0, 0.0);
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_5;
  mediump vec4 h_6;
  mediump vec4 c_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  highp vec2 P_10;
  P_10 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_9 = texture (_MaskMap, P_10);
  h_6 = tmpvar_9;
  mediump float tmpvar_11;
  tmpvar_11 = ((1.0 + h_6.x) - _Amount);
  ClipAmount_5 = tmpvar_11;
  tmpvar_4 = 1.0;
  if ((ClipAmount_5 < 0.0)) {
    tmpvar_4 = 0.0;
  };
  mediump vec3 tmpvar_12;
  tmpvar_12 = (c_7.xyz * _MainLight);
  tmpvar_2 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = (_Color * _MainAlpha);
  tmpvar_3 = tmpvar_13;
  lowp float shadow_14;
  mediump float tmpvar_15;
  tmpvar_15 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_15;
  highp float tmpvar_17;
  tmpvar_17 = (_LightShadowData.x + (tmpvar_16 * (1.0 - _LightShadowData.x)));
  shadow_14 = tmpvar_17;
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_2 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_14) * 2.0));
  c_18.w = tmpvar_4;
  c_1.w = c_18.w;
  c_1.xyz = (c_18.xyz + (tmpvar_2 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_3);
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture2D (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, vec2(tmpvar_15)).w) * 2.0));
  c_16.w = tmpvar_5;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, vec2(tmpvar_15)).w) * 2.0));
  c_16.w = tmpvar_5;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture2D (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_4 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_14.w = tmpvar_5;
  c_1.xyz = c_14.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_4 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_14.w = tmpvar_5;
  c_1.xyz = c_14.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture2D (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_14;
  highp vec2 P_15;
  P_15 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_17;
  atten_17 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture2D (_LightTexture0, P_15).w) * texture2D (_LightTextureB0, vec2(tmpvar_16)).w);
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_17) * 2.0));
  c_18.w = tmpvar_5;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_14;
  highp vec2 P_15;
  P_15 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_17;
  atten_17 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture (_LightTexture0, P_15).w) * texture (_LightTextureB0, vec2(tmpvar_16)).w);
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_17) * 2.0));
  c_18.w = tmpvar_5;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture2D (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_16.w = tmpvar_5;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture (_LightTextureB0, vec2(tmpvar_15)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_16.w = tmpvar_5;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture2D (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_14.w = tmpvar_5;
  c_1.xyz = c_14.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec2 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_tex1, xlv_TEXCOORD0);
  c_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = (tmpvar_3 * _MaskRp);
  tmpvar_10 = texture (_MaskMap, P_11);
  h_7 = tmpvar_10;
  mediump float tmpvar_12;
  tmpvar_12 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_12;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = (c_8.xyz * _MainLight);
  tmpvar_4 = tmpvar_13;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_14;
  c_14.xyz = ((tmpvar_4 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_14.w = tmpvar_5;
  c_1.xyz = c_14.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_17.w;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_18;
  lowp vec4 c_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * light_3.xyz);
  c_19.xyz = tmpvar_20;
  c_19.w = tmpvar_6;
  c_2 = c_19;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_17.w;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_18;
  lowp vec4 c_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * light_3.xyz);
  c_19.xyz = tmpvar_20;
  c_19.w = tmpvar_6;
  c_2 = c_19;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_10;
  mediump vec4 h_11;
  mediump vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_12 = tmpvar_13;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_11 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_11.x) - _Amount);
  ClipAmount_10 = tmpvar_16;
  tmpvar_9 = 1.0;
  if ((ClipAmount_10 < 0.0)) {
    tmpvar_9 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_12.xyz * _MainLight);
  tmpvar_7 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (_Color * _MainAlpha);
  tmpvar_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_20.w;
  highp float tmpvar_21;
  tmpvar_21 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_23;
  light_6.xyz = (tmpvar_20.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * light_6.xyz);
  c_24.xyz = tmpvar_25;
  c_24.w = tmpvar_9;
  c_2 = c_24;
  c_2.xyz = (c_2.xyz + tmpvar_8);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_10;
  mediump vec4 h_11;
  mediump vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_12 = tmpvar_13;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_11 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_11.x) - _Amount);
  ClipAmount_10 = tmpvar_16;
  tmpvar_9 = 1.0;
  if ((ClipAmount_10 < 0.0)) {
    tmpvar_9 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_12.xyz * _MainLight);
  tmpvar_7 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (_Color * _MainAlpha);
  tmpvar_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_20.w;
  highp float tmpvar_21;
  tmpvar_21 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_23;
  light_6.xyz = (tmpvar_20.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * light_6.xyz);
  c_24.xyz = tmpvar_25;
  c_24.w = tmpvar_9;
  c_2 = c_24;
  c_2.xyz = (c_2.xyz + tmpvar_8);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec3 lm_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_17 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = lm_17;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_19);
  light_3 = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * tmpvar_20.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec3 lm_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_17 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = lm_17;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_19);
  light_3 = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * tmpvar_20.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_17.w;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_18;
  lowp vec4 c_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * light_3.xyz);
  c_19.xyz = tmpvar_20;
  c_19.w = tmpvar_6;
  c_2 = c_19;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_17.w;
  highp vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_17.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_18;
  lowp vec4 c_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * light_3.xyz);
  c_19.xyz = tmpvar_20;
  c_19.w = tmpvar_6;
  c_2 = c_19;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_10;
  mediump vec4 h_11;
  mediump vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_12 = tmpvar_13;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_14 = texture2D (_MaskMap, P_15);
  h_11 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_11.x) - _Amount);
  ClipAmount_10 = tmpvar_16;
  tmpvar_9 = 1.0;
  if ((ClipAmount_10 < 0.0)) {
    tmpvar_9 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_12.xyz * _MainLight);
  tmpvar_7 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (_Color * _MainAlpha);
  tmpvar_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_20.w;
  highp float tmpvar_21;
  tmpvar_21 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_23;
  light_6.xyz = (tmpvar_20.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * light_6.xyz);
  c_24.xyz = tmpvar_25;
  c_24.w = tmpvar_9;
  c_2 = c_24;
  c_2.xyz = (c_2.xyz + tmpvar_8);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec3 tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_7 = vec3(0.0, 0.0, 0.0);
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_10;
  mediump vec4 h_11;
  mediump vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_12 = tmpvar_13;
  lowp vec4 tmpvar_14;
  highp vec2 P_15;
  P_15 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_14 = texture (_MaskMap, P_15);
  h_11 = tmpvar_14;
  mediump float tmpvar_16;
  tmpvar_16 = ((1.0 + h_11.x) - _Amount);
  ClipAmount_10 = tmpvar_16;
  tmpvar_9 = 1.0;
  if ((ClipAmount_10 < 0.0)) {
    tmpvar_9 = 0.0;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = (c_12.xyz * _MainLight);
  tmpvar_7 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (_Color * _MainAlpha);
  tmpvar_8 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_20.w;
  highp float tmpvar_21;
  tmpvar_21 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_23;
  light_6.xyz = (tmpvar_20.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_7 * light_6.xyz);
  c_24.xyz = tmpvar_25;
  c_24.w = tmpvar_9;
  c_2 = c_24;
  c_2.xyz = (c_2.xyz + tmpvar_8);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec3 lm_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_17 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = lm_17;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_19);
  light_3 = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * tmpvar_20.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_tex1, xlv_TEXCOORD0.xy);
  c_9 = tmpvar_10;
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_8 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_13;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_9.xyz * _MainLight);
  tmpvar_4 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_16;
  mediump vec3 lm_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_17 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = lm_17;
  mediump vec4 tmpvar_20;
  tmpvar_20 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_19);
  light_3 = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * tmpvar_20.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_6;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_5);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                             SceneUI o	  Shader "Custom/SceneUI" {
Properties {
 _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" {}
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZTest False
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
  Offset -1, -1
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying mediump vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump vec2 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR = _glesColor;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
varying mediump vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = (texture2D (_MainTex, xlv_TEXCOORD0) * xlv_COLOR);
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out mediump vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  mediump vec2 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR = _glesColor;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
in mediump vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = (texture (_MainTex, xlv_TEXCOORD0) * xlv_COLOR);
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 100
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
  ColorMask RGB
  ColorMaterial AmbientAndDiffuse
  Offset -1, -1
  SetTexture [_MainTex] { combine texture * primary }
 }
}
}                   TwoTexDiffuse   DÁ Shader "Custom/TwoTexDiffuse" {
Properties {
 _tex1 ("Base (RGB)", 2D) = "white" {}
 _tex2 ("Base (RGB)", 2D) = "white" {}
 _light ("light", Range(0,1)) = 0
}
SubShader { 
 LOD 200
 Tags { "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  c_1.xyz = ((c_2.xyz + vec3(_light)) * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  c_1.xyz = ((c_2.xyz + vec3(_light)) * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_4) * 2.0));
  c_10.w = c_2.w;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = ((c_2.xyz + vec3(_light)) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_3 * min (lm_10, tmpvar_12));
  c_1.xyz = tmpvar_13;
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_4) * 2.0));
  c_10.w = c_2.w;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_7.w = c_2.w;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_8.w = c_2.w;
  c_1.w = c_8.w;
  c_1.xyz = (c_8.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = ((c_2.xyz + vec3(_light)) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_6;
  c_1.xyz = ((c_2.xyz + vec3(_light)) * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_3 * min (lm_7, tmpvar_9));
  c_1.xyz = tmpvar_10;
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  mediump vec3 lm_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_8 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_3 * min (lm_8, tmpvar_10));
  c_1.xyz = tmpvar_11;
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_7.w = c_2.w;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.5)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_2 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_8.w = c_2.w;
  c_1.w = c_8.w;
  c_1.xyz = (c_8.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture (_tex2, xlv_TEXCOORD0);
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture (_tex2, xlv_TEXCOORD0);
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture2D (_LightTexture0, P_5).w) * texture2D (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_7) * 2.0));
  c_8.w = c_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture (_tex2, xlv_TEXCOORD0);
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture (_LightTexture0, P_5).w) * texture (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_7) * 2.0));
  c_8.w = c_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture2D (_LightTextureB0, vec2(tmpvar_5)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture (_tex2, xlv_TEXCOORD0);
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture (_LightTextureB0, vec2(tmpvar_5)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.5)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_3 = texture (_tex2, xlv_TEXCOORD0);
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.5)) {
    c_7 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_7 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.5)) {
    c_7 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_7 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.5)) {
    c_7 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_7 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.5)) {
    c_7 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_7 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture2D (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.5)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    c_4 = texture (_tex2, xlv_TEXCOORD0);
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                         OneTexDiffuse   ’≈ Shader "Custom/OneTexDiffuse" {
Properties {
 _tex1 ("Base (RGB)", 2D) = "white" {}
 _light ("light", Range(0,1)) = 0
}
SubShader { 
 LOD 200
 Tags { "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = tmpvar_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = tmpvar_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  c_1.xyz = ((tmpvar_2.xyz + vec3(_light)) * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  c_1.xyz = ((tmpvar_2.xyz + vec3(_light)) * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_4) * 2.0));
  c_10.w = tmpvar_2.w;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = ((tmpvar_2.xyz + vec3(_light)) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_3 * min (lm_10, tmpvar_12));
  c_1.xyz = tmpvar_13;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = tmpvar_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = tmpvar_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_4) * 2.0));
  c_10.w = tmpvar_2.w;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_7.w = tmpvar_2.w;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_8.w = tmpvar_2.w;
  c_1.w = c_8.w;
  c_1.xyz = (c_8.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = ((tmpvar_2.xyz + vec3(_light)) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_6;
  c_1.xyz = ((tmpvar_2.xyz + vec3(_light)) * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_3 * min (lm_7, tmpvar_9));
  c_1.xyz = tmpvar_10;
  c_1.w = tmpvar_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  mediump vec3 lm_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_8 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_3 * min (lm_8, tmpvar_10));
  c_1.xyz = tmpvar_11;
  c_1.w = tmpvar_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_7.w = tmpvar_2.w;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_8.w = tmpvar_2.w;
  c_1.w = c_8.w;
  c_1.xyz = (c_8.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_tex1, xlv_TEXCOORD0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_tex1, xlv_TEXCOORD0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_tex1, xlv_TEXCOORD0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_tex1, xlv_TEXCOORD0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_tex1, xlv_TEXCOORD0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture2D (_LightTexture0, P_5).w) * texture2D (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_7) * 2.0));
  c_8.w = tmpvar_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_tex1, xlv_TEXCOORD0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture (_LightTexture0, P_5).w) * texture (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_7) * 2.0));
  c_8.w = tmpvar_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_tex1, xlv_TEXCOORD0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture2D (_LightTextureB0, vec2(tmpvar_5)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_tex1, xlv_TEXCOORD0);
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture (_LightTextureB0, vec2(tmpvar_5)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_6.w = tmpvar_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_tex1, xlv_TEXCOORD0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_tex1, xlv_TEXCOORD0);
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((tmpvar_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = tmpvar_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = tmpvar_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = tmpvar_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = tmpvar_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = tmpvar_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = tmpvar_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = tmpvar_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = tmpvar_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = tmpvar_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = tmpvar_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = tmpvar_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = tmpvar_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_tex1, xlv_TEXCOORD0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = tmpvar_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                                TwoTexDieEffect õô Shader "Custom/TwoTexDieEffect" {
Properties {
 _tex1 ("Base (RGB)", 2D) = "white" {}
 _tex2 ("Base (RGB)", 2D) = "white" {}
 _MainLight ("MainLight", Float) = 1.2
 _MainAlpha ("MainAlpha", Range(0,0.9)) = 0
 _Color ("Main Color", Color) = (1,1,0,1)
 _MaskMap ("MaskMap", 2D) = "white" {}
 _MaskRp ("MaskRp", Float) = 1
 _Amount ("Amount", Range(0,2)) = 0
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_16.w = tmpvar_5;
  c_1.w = c_16.w;
  c_1.xyz = (c_16.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_16.w = tmpvar_5;
  c_1.w = c_16.w;
  c_1.xyz = (c_16.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  c_1.xyz = (tmpvar_3 * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  c_1.xyz = (tmpvar_3 * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  mediump vec3 lm_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_16 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_3 * lm_16);
  c_1.xyz = tmpvar_18;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  mediump vec3 lm_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_16 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_3 * lm_16);
  c_1.xyz = tmpvar_18;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float lightShadowDataX_17;
  highp float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((dist_18 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_17);
  tmpvar_16 = tmpvar_21;
  lowp vec4 c_22;
  c_22.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_16) * 2.0));
  c_22.w = tmpvar_5;
  c_1.w = c_22.w;
  c_1.xyz = (c_22.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float lightShadowDataX_17;
  highp float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((dist_18 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_17);
  tmpvar_16 = tmpvar_21;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_16 * 2.0))));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float lightShadowDataX_17;
  highp float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((dist_18 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_17);
  tmpvar_16 = tmpvar_21;
  mediump vec3 lm_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_22 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = vec3((tmpvar_16 * 2.0));
  mediump vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * min (lm_22, tmpvar_24));
  c_1.xyz = tmpvar_25;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_16.w = tmpvar_5;
  c_1.w = c_16.w;
  c_1.xyz = (c_16.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec3 tmpvar_23;
  tmpvar_23 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - tmpvar_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - tmpvar_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - tmpvar_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_16.w = tmpvar_5;
  c_1.w = c_16.w;
  c_1.xyz = (c_16.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec4 cse_23;
  cse_23 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - cse_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - cse_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - cse_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_23);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float tmpvar_16;
  mediump float lightShadowDataX_17;
  highp float dist_18;
  lowp float tmpvar_19;
  tmpvar_19 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = _LightShadowData.x;
  lightShadowDataX_17 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((dist_18 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_17);
  tmpvar_16 = tmpvar_21;
  lowp vec4 c_22;
  c_22.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_16) * 2.0));
  c_22.w = tmpvar_5;
  c_1.w = c_22.w;
  c_1.xyz = (c_22.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec4 c_19;
  c_19.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_16) * 2.0));
  c_19.w = tmpvar_5;
  c_1.w = c_19.w;
  c_1.xyz = (c_19.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_16) * 2.0));
  c_20.w = tmpvar_5;
  c_1.w = c_20.w;
  c_1.xyz = (c_20.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_16 * 2.0))));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  c_1.xyz = (tmpvar_3 * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_16 * 2.0))));
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  mediump vec3 lm_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_19 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = vec3((shadow_16 * 2.0));
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_3 * min (lm_19, tmpvar_21));
  c_1.xyz = tmpvar_22;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  mediump vec3 lm_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_20 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = vec3((shadow_16 * 2.0));
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_3 * min (lm_20, tmpvar_22));
  c_1.xyz = tmpvar_23;
  c_1.w = tmpvar_5;
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec4 cse_23;
  cse_23 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - cse_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - cse_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - cse_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_23);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture2D (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  lowp float tmpvar_17;
  tmpvar_17 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_18;
  tmpvar_18 = (_LightShadowData.x + (tmpvar_17 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_18;
  lowp vec4 c_19;
  c_19.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_16) * 2.0));
  c_19.w = tmpvar_5;
  c_1.w = c_19.w;
  c_1.xyz = (c_19.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  highp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  tmpvar_2.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_2.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp mat3 tmpvar_5;
  tmpvar_5[0] = _Object2World[0].xyz;
  tmpvar_5[1] = _Object2World[1].xyz;
  tmpvar_5[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_3 = tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  shlight_1 = tmpvar_8;
  tmpvar_4 = shlight_1;
  highp vec4 cse_23;
  cse_23 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosX0 - cse_23.x);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosY0 - cse_23.y);
  highp vec4 tmpvar_26;
  tmpvar_26 = (unity_4LightPosZ0 - cse_23.z);
  highp vec4 tmpvar_27;
  tmpvar_27 = (((tmpvar_24 * tmpvar_24) + (tmpvar_25 * tmpvar_25)) + (tmpvar_26 * tmpvar_26));
  highp vec4 tmpvar_28;
  tmpvar_28 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_24 * tmpvar_6.x) + (tmpvar_25 * tmpvar_6.y)) + (tmpvar_26 * tmpvar_6.z))
   * 
    inversesqrt(tmpvar_27)
  )) * (1.0/((1.0 + 
    (tmpvar_27 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_4 + ((
    ((unity_LightColor[0].xyz * tmpvar_28.x) + (unity_LightColor[1].xyz * tmpvar_28.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_28.z)
  ) + (unity_LightColor[3].xyz * tmpvar_28.w)));
  tmpvar_4 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_23);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = xlv_COLOR0;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  tmpvar_3 = vec3(0.0, 0.0, 0.0);
  tmpvar_4 = vec3(0.0, 0.0, 0.0);
  tmpvar_5 = 0.0;
  highp float ClipAmount_6;
  mediump vec4 h_7;
  mediump vec4 c_8;
  if ((tmpvar_2.x < 0.49)) {
    lowp vec4 tmpvar_9;
    tmpvar_9 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_9;
  } else {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_8 = tmpvar_10;
  };
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_11 = texture (_MaskMap, P_12);
  h_7 = tmpvar_11;
  mediump float tmpvar_13;
  tmpvar_13 = ((1.0 + h_7.x) - _Amount);
  ClipAmount_6 = tmpvar_13;
  tmpvar_5 = 1.0;
  if ((ClipAmount_6 < 0.0)) {
    tmpvar_5 = 0.0;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = (c_8.xyz * _MainLight);
  tmpvar_3 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (_Color * _MainAlpha);
  tmpvar_4 = tmpvar_15;
  lowp float shadow_16;
  mediump float tmpvar_17;
  tmpvar_17 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_17;
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_16 = tmpvar_19;
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_16) * 2.0));
  c_20.w = tmpvar_5;
  c_1.w = c_20.w;
  c_1.xyz = (c_20.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_4);
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture2D (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, vec2(tmpvar_17)).w) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, vec2(tmpvar_17)).w) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture2D (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_5 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_16.w = tmpvar_6;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_5 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_16.w = tmpvar_6;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture2D (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_16;
  highp vec2 P_17;
  P_17 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_19;
  atten_19 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture2D (_LightTexture0, P_17).w) * texture2D (_LightTextureB0, vec2(tmpvar_18)).w);
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_19) * 2.0));
  c_20.w = tmpvar_6;
  c_1.xyz = c_20.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_16;
  highp vec2 P_17;
  P_17 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_19;
  atten_19 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture (_LightTexture0, P_17).w) * texture (_LightTextureB0, vec2(tmpvar_18)).w);
  lowp vec4 c_20;
  c_20.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_19) * 2.0));
  c_20.w = tmpvar_6;
  c_1.xyz = c_20.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture2D (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_18;
  c_18.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture (_LightTextureB0, vec2(tmpvar_17)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_18.w = tmpvar_6;
  c_1.xyz = c_18.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture2D (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture2D (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_16.w = tmpvar_6;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  highp vec4 tmpvar_3;
  highp vec2 tmpvar_4;
  tmpvar_3 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = 0.0;
  highp float ClipAmount_7;
  mediump vec4 h_8;
  mediump vec4 c_9;
  if ((tmpvar_3.x < 0.49)) {
    lowp vec4 tmpvar_10;
    tmpvar_10 = texture (_tex1, xlv_TEXCOORD0);
    c_9 = tmpvar_10;
  } else {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex2, xlv_TEXCOORD0);
    c_9 = tmpvar_11;
  };
  lowp vec4 tmpvar_12;
  highp vec2 P_13;
  P_13 = (tmpvar_4 * _MaskRp);
  tmpvar_12 = texture (_MaskMap, P_13);
  h_8 = tmpvar_12;
  mediump float tmpvar_14;
  tmpvar_14 = ((1.0 + h_8.x) - _Amount);
  ClipAmount_7 = tmpvar_14;
  tmpvar_6 = 1.0;
  if ((ClipAmount_7 < 0.0)) {
    tmpvar_6 = 0.0;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = (c_9.xyz * _MainLight);
  tmpvar_5 = tmpvar_15;
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_16;
  c_16.xyz = ((tmpvar_5 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_16.w = tmpvar_6;
  c_1.xyz = c_16.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_7;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_7;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.49)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_15;
  };
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_16 = texture2D (_MaskMap, P_17);
  h_12 = tmpvar_16;
  mediump float tmpvar_18;
  tmpvar_18 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_18;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_25;
  light_6.xyz = (tmpvar_22.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * light_6.xyz);
  c_26.xyz = tmpvar_27;
  c_26.w = tmpvar_10;
  c_2 = c_26;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.49)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_15;
  };
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_16 = texture (_MaskMap, P_17);
  h_12 = tmpvar_16;
  mediump float tmpvar_18;
  tmpvar_18 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_18;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_25;
  light_6.xyz = (tmpvar_22.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * light_6.xyz);
  c_26.xyz = tmpvar_27;
  c_26.w = tmpvar_10;
  c_2 = c_26;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec3 lm_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_19 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = lm_19;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_21);
  light_3 = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * tmpvar_22.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec3 lm_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_19 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = lm_19;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_21);
  light_3 = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * tmpvar_22.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_7;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = _Object2World[0].xyz;
  tmpvar_7[1] = _Object2World[1].xyz;
  tmpvar_7[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = (tmpvar_7 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_9;
  mediump vec4 normal_10;
  normal_10 = tmpvar_8;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  tmpvar_9 = ((x1_14 + x2_13) + x3_12);
  tmpvar_2 = tmpvar_9;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_19.w;
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_20;
  lowp vec4 c_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_5 * light_3.xyz);
  c_21.xyz = tmpvar_22;
  c_21.w = tmpvar_7;
  c_2 = c_21;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.49)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_15;
  };
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_16 = texture2D (_MaskMap, P_17);
  h_12 = tmpvar_16;
  mediump float tmpvar_18;
  tmpvar_18 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_18;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_25;
  light_6.xyz = (tmpvar_22.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * light_6.xyz);
  c_26.xyz = tmpvar_27;
  c_26.w = tmpvar_10;
  c_2 = c_26;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_3.zw;
  tmpvar_2.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_2.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_4;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = xlv_COLOR0;
  lowp vec3 tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_8 = vec3(0.0, 0.0, 0.0);
  tmpvar_9 = vec3(0.0, 0.0, 0.0);
  tmpvar_10 = 0.0;
  highp float ClipAmount_11;
  mediump vec4 h_12;
  mediump vec4 c_13;
  if ((tmpvar_7.x < 0.49)) {
    lowp vec4 tmpvar_14;
    tmpvar_14 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_14;
  } else {
    lowp vec4 tmpvar_15;
    tmpvar_15 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_13 = tmpvar_15;
  };
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_16 = texture (_MaskMap, P_17);
  h_12 = tmpvar_16;
  mediump float tmpvar_18;
  tmpvar_18 = ((1.0 + h_12.x) - _Amount);
  ClipAmount_11 = tmpvar_18;
  tmpvar_10 = 1.0;
  if ((ClipAmount_11 < 0.0)) {
    tmpvar_10 = 0.0;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = (c_13.xyz * _MainLight);
  tmpvar_8 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (_Color * _MainAlpha);
  tmpvar_9 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_22.w;
  highp float tmpvar_23;
  tmpvar_23 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_23;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_25;
  light_6.xyz = (tmpvar_22.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_8 * light_6.xyz);
  c_26.xyz = tmpvar_27;
  c_26.w = tmpvar_10;
  c_2 = c_26;
  c_2.xyz = (c_2.xyz + tmpvar_9);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec4 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture2D (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture2D (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture2D (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec3 lm_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_19 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = lm_19;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_21);
  light_3 = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * tmpvar_22.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
uniform highp vec4 _MaskMap_ST;
out highp vec4 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_1.xy = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  tmpvar_1.zw = ((_glesMultiTexCoord0.xy * _MaskMap_ST.xy) + _MaskMap_ST.zw);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform mediump float _MainLight;
uniform sampler2D _MaskMap;
uniform mediump float _MainAlpha;
uniform mediump vec3 _Color;
uniform mediump float _Amount;
uniform mediump float _MaskRp;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec4 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = xlv_COLOR0;
  lowp vec3 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp float tmpvar_7;
  tmpvar_5 = vec3(0.0, 0.0, 0.0);
  tmpvar_6 = vec3(0.0, 0.0, 0.0);
  tmpvar_7 = 0.0;
  highp float ClipAmount_8;
  mediump vec4 h_9;
  mediump vec4 c_10;
  if ((tmpvar_4.x < 0.49)) {
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (_tex1, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_11;
  } else {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture (_tex2, xlv_TEXCOORD0.xy);
    c_10 = tmpvar_12;
  };
  lowp vec4 tmpvar_13;
  highp vec2 P_14;
  P_14 = (xlv_TEXCOORD0.zw * _MaskRp);
  tmpvar_13 = texture (_MaskMap, P_14);
  h_9 = tmpvar_13;
  mediump float tmpvar_15;
  tmpvar_15 = ((1.0 + h_9.x) - _Amount);
  ClipAmount_8 = tmpvar_15;
  tmpvar_7 = 1.0;
  if ((ClipAmount_8 < 0.0)) {
    tmpvar_7 = 0.0;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = (c_10.xyz * _MainLight);
  tmpvar_5 = tmpvar_16;
  mediump vec3 tmpvar_17;
  tmpvar_17 = (_Color * _MainAlpha);
  tmpvar_6 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_18;
  mediump vec3 lm_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_19 = tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = lm_19;
  mediump vec4 tmpvar_22;
  tmpvar_22 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_21);
  light_3 = tmpvar_22;
  lowp vec4 c_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_5 * tmpvar_22.xyz);
  c_23.xyz = tmpvar_24;
  c_23.w = tmpvar_7;
  c_2 = c_23;
  c_2.xyz = (c_2.xyz + tmpvar_6);
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                          FourTexDiffuse  Ô Shader "Custom/FourTexDiffuse" {
Properties {
 _tex1 ("Base (RGB)", 2D) = "white" {}
 _tex2 ("Base (RGB)", 2D) = "white" {}
 _tex3 ("Base (RGB)", 2D) = "white" {}
 _tex4 ("Base (RGB)", 2D) = "white" {}
 _light ("light", Range(0,1)) = 0
}
SubShader { 
 LOD 200
 Tags { "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  c_1.xyz = ((c_2.xyz + vec3(_light)) * (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  c_1.xyz = ((c_2.xyz + vec3(_light)) * (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz));
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  mediump vec3 lm_4;
  lowp vec3 tmpvar_5;
  tmpvar_5 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * lm_4);
  c_1.xyz = tmpvar_6;
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_4) * 2.0));
  c_10.w = c_2.w;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp float tmpvar_3;
  mediump float lightShadowDataX_4;
  highp float dist_5;
  lowp float tmpvar_6;
  tmpvar_6 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_5 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _LightShadowData.x;
  lightShadowDataX_4 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = max (float((dist_5 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_4);
  tmpvar_3 = tmpvar_8;
  c_1.xyz = ((c_2.xyz + vec3(_light)) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((tmpvar_3 * 2.0))));
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  mediump vec3 lm_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_10 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = vec3((tmpvar_4 * 2.0));
  mediump vec3 tmpvar_13;
  tmpvar_13 = (tmpvar_3 * min (lm_10, tmpvar_12));
  c_1.xyz = tmpvar_13;
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec3 tmpvar_22;
  tmpvar_22 = (_Object2World * _glesVertex).xyz;
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - tmpvar_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - tmpvar_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - tmpvar_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp vec4 c_4;
  c_4.xyz = ((tmpvar_3 * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz)
  ) * 2.0));
  c_4.w = c_2.w;
  c_1.w = c_4.w;
  c_1.xyz = (c_4.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float tmpvar_4;
  mediump float lightShadowDataX_5;
  highp float dist_6;
  lowp float tmpvar_7;
  tmpvar_7 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_6 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _LightShadowData.x;
  lightShadowDataX_5 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = max (float((dist_6 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_5);
  tmpvar_4 = tmpvar_9;
  lowp vec4 c_10;
  c_10.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * tmpvar_4) * 2.0));
  c_10.w = c_2.w;
  c_1.w = c_10.w;
  c_1.xyz = (c_10.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_7.w = c_2.w;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_8.w = c_2.w;
  c_1.w = c_8.w;
  c_1.xyz = (c_8.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp float shadow_3;
  lowp float tmpvar_4;
  tmpvar_4 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_5;
  tmpvar_5 = (_LightShadowData.x + (tmpvar_4 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_5;
  c_1.xyz = ((c_2.xyz + vec3(_light)) * min ((2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp float shadow_3;
  mediump float tmpvar_4;
  tmpvar_4 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_5;
  tmpvar_5 = tmpvar_4;
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_6;
  c_1.xyz = ((c_2.xyz + vec3(_light)) * min ((2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz), vec3((shadow_3 * 2.0))));
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_3 * min (lm_7, tmpvar_9));
  c_1.xyz = tmpvar_10;
  c_1.w = c_2.w;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec2 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main ()
{
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec2 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  mediump vec3 lm_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD1).xyz);
  lm_8 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = vec3((shadow_4 * 2.0));
  mediump vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_3 * min (lm_8, tmpvar_10));
  c_1.xyz = tmpvar_11;
  c_1.w = c_2.w;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  lowp float tmpvar_5;
  tmpvar_5 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_6;
  tmpvar_6 = (_LightShadowData.x + (tmpvar_5 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_6;
  lowp vec4 c_7;
  c_7.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_7.w = c_2.w;
  c_1.w = c_7.w;
  c_1.xyz = (c_7.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec3 shlight_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = _Object2World[0].xyz;
  tmpvar_4[1] = _Object2World[1].xyz;
  tmpvar_4[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_2 = tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = tmpvar_5;
  mediump vec3 tmpvar_7;
  mediump vec4 normal_8;
  normal_8 = tmpvar_6;
  highp float vC_9;
  mediump vec3 x3_10;
  mediump vec3 x2_11;
  mediump vec3 x1_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (unity_SHAr, normal_8);
  x1_12.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAg, normal_8);
  x1_12.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAb, normal_8);
  x1_12.z = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = (normal_8.xyzz * normal_8.yzzx);
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHBr, tmpvar_16);
  x2_11.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBg, tmpvar_16);
  x2_11.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBb, tmpvar_16);
  x2_11.z = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((normal_8.x * normal_8.x) - (normal_8.y * normal_8.y));
  vC_9 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (unity_SHC.xyz * vC_9);
  x3_10 = tmpvar_21;
  tmpvar_7 = ((x1_12 + x2_11) + x3_10);
  shlight_1 = tmpvar_7;
  tmpvar_3 = shlight_1;
  highp vec4 cse_22;
  cse_22 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_23;
  tmpvar_23 = (unity_4LightPosX0 - cse_22.x);
  highp vec4 tmpvar_24;
  tmpvar_24 = (unity_4LightPosY0 - cse_22.y);
  highp vec4 tmpvar_25;
  tmpvar_25 = (unity_4LightPosZ0 - cse_22.z);
  highp vec4 tmpvar_26;
  tmpvar_26 = (((tmpvar_23 * tmpvar_23) + (tmpvar_24 * tmpvar_24)) + (tmpvar_25 * tmpvar_25));
  highp vec4 tmpvar_27;
  tmpvar_27 = (max (vec4(0.0, 0.0, 0.0, 0.0), (
    (((tmpvar_23 * tmpvar_5.x) + (tmpvar_24 * tmpvar_5.y)) + (tmpvar_25 * tmpvar_5.z))
   * 
    inversesqrt(tmpvar_26)
  )) * (1.0/((1.0 + 
    (tmpvar_26 * unity_4LightAtten0)
  ))));
  highp vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_3 + ((
    ((unity_LightColor[0].xyz * tmpvar_27.x) + (unity_LightColor[1].xyz * tmpvar_27.y))
   + 
    (unity_LightColor[2].xyz * tmpvar_27.z)
  ) + (unity_LightColor[3].xyz * tmpvar_27.w)));
  tmpvar_3 = tmpvar_28;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_22);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 c_2;
  if ((xlv_COLOR0.x < 0.25)) {
    c_2 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_2 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_2 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_2 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_3;
  tmpvar_3 = (c_2.xyz + vec3(_light));
  lowp float shadow_4;
  mediump float tmpvar_5;
  tmpvar_5 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_6;
  tmpvar_6 = tmpvar_5;
  highp float tmpvar_7;
  tmpvar_7 = (_LightShadowData.x + (tmpvar_6 * (1.0 - _LightShadowData.x)));
  shadow_4 = tmpvar_7;
  lowp vec4 c_8;
  c_8.xyz = ((tmpvar_3 * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, _WorldSpaceLightPos0.xyz))
   * shadow_4) * 2.0));
  c_8.w = c_2.w;
  c_1.w = c_8.w;
  c_1.xyz = (c_8.xyz + (tmpvar_3 * xlv_TEXCOORD2));
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_ON" "DIRLIGHTMAP_ON" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
  Fog {
   Color (0,0,0,0)
  }
  Blend One One
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, vec2(tmpvar_5)).w) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * (max (0.0, 
    dot (xlv_TEXCOORD1, lightDir_2)
  ) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture2D (_LightTexture0, P_5).w) * texture2D (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_7) * 2.0));
  c_8.w = c_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp vec2 P_5;
  P_5 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  highp float tmpvar_6;
  tmpvar_6 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp float atten_7;
  atten_7 = ((float(
    (xlv_TEXCOORD3.z > 0.0)
  ) * texture (_LightTexture0, P_5).w) * texture (_LightTextureB0, vec2(tmpvar_6)).w);
  lowp vec4 c_8;
  c_8.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * atten_7) * 2.0));
  c_8.w = c_3.w;
  c_1.xyz = c_8.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture2D (_LightTextureB0, vec2(tmpvar_5)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 cse_6;
  cse_6 = (_Object2World * _glesVertex);
  tmpvar_5 = (_WorldSpaceLightPos0.xyz - cse_6.xyz);
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * cse_6).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  mediump vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  lightDir_2 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 c_6;
  c_6.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * 
    (texture (_LightTextureB0, vec2(tmpvar_5)).w * texture (_LightTexture0, xlv_TEXCOORD3).w)
  ) * 2.0));
  c_6.w = c_3.w;
  c_1.xyz = c_6.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT

uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying lowp vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture2D (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  gl_FragData[0] = c_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp mat3 tmpvar_3;
  tmpvar_3[0] = _Object2World[0].xyz;
  tmpvar_3[1] = _Object2World[1].xyz;
  tmpvar_3[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  tmpvar_2 = tmpvar_5;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 c_3;
  if ((xlv_COLOR0.x < 0.25)) {
    c_3 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_3 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_3 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_3 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lightDir_2 = xlv_TEXCOORD2;
  lowp vec4 c_4;
  c_4.xyz = (((c_3.xyz + vec3(_light)) * _LightColor0.xyz) * ((
    max (0.0, dot (xlv_TEXCOORD1, lightDir_2))
   * texture (_LightTexture0, xlv_TEXCOORD3).w) * 2.0));
  c_4.w = c_3.w;
  c_1.xyz = c_4.xyz;
  c_1.w = 0.0;
  _glesFragData[0] = c_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

varying lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
out lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec3 tmpvar_1;
  highp mat3 tmpvar_2;
  tmpvar_2[0] = _Object2World[0].xyz;
  tmpvar_2[1] = _Object2World[1].xyz;
  tmpvar_2[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * (normalize(_glesNormal) * unity_Scale.w));
  tmpvar_1 = tmpvar_3;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
in lowp vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  res_1.xyz = ((xlv_TEXCOORD0 * 0.5) + 0.5);
  res_1.w = 0.0;
  _glesFragData[0] = res_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "IGNOREPROJECTOR"="true" "RenderType"="Opaque" }
  ZWrite Off
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.25)) {
    c_7 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_7 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_7 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_7 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.25)) {
    c_7 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_7 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_7 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_7 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = -(log2(max (light_6, vec4(0.001, 0.001, 0.001, 0.001))));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (-(log2(
    max (light_3, vec4(0.001, 0.001, 0.001, 0.001))
  )) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_Scale;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = _Object2World[0].xyz;
  tmpvar_6[1] = _Object2World[1].xyz;
  tmpvar_6[2] = _Object2World[2].xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (tmpvar_6 * (normalize(_glesNormal) * unity_Scale.w));
  mediump vec3 tmpvar_8;
  mediump vec4 normal_9;
  normal_9 = tmpvar_7;
  highp float vC_10;
  mediump vec3 x3_11;
  mediump vec3 x2_12;
  mediump vec3 x1_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (unity_SHAr, normal_9);
  x1_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAg, normal_9);
  x1_13.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAb, normal_9);
  x1_13.z = tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17 = (normal_9.xyzz * normal_9.yzzx);
  highp float tmpvar_18;
  tmpvar_18 = dot (unity_SHBr, tmpvar_17);
  x2_12.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBg, tmpvar_17);
  x2_12.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBb, tmpvar_17);
  x2_12.z = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((normal_9.x * normal_9.x) - (normal_9.y * normal_9.y));
  vC_10 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = (unity_SHC.xyz * vC_10);
  x3_11 = tmpvar_22;
  tmpvar_8 = ((x1_13 + x2_12) + x3_11);
  tmpvar_1 = tmpvar_8;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_7.w;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz + xlv_TEXCOORD2);
  light_3.xyz = tmpvar_8;
  lowp vec4 c_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_5 * light_3.xyz);
  c_9.xyz = tmpvar_10;
  c_9.w = c_4.w;
  c_2 = c_9;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.25)) {
    c_7 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_7 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_7 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_7 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture2D (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_5;
  tmpvar_5.x = tmpvar_4.x;
  tmpvar_5.y = (tmpvar_4.y * _ProjectionParams.x);
  o_3.xy = (tmpvar_5 + tmpvar_4.w);
  o_3.zw = tmpvar_2.zw;
  tmpvar_1.xyz = (((_Object2World * _glesVertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w);
  tmpvar_1.w = (-((glstate_matrix_modelview0 * _glesVertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w));
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_3;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
  xlv_TEXCOORD3 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
uniform sampler2D unity_LightmapInd;
uniform highp vec4 unity_LightmapFade;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec3 lmIndirect_3;
  mediump vec3 lmFull_4;
  mediump float lmFade_5;
  mediump vec4 light_6;
  lowp vec4 c_7;
  if ((xlv_COLOR0.x < 0.25)) {
    c_7 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_7 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_7 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_7 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_8;
  tmpvar_8 = (c_7.xyz + vec3(_light));
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_6 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_6, vec4(0.001, 0.001, 0.001, 0.001));
  light_6.w = tmpvar_10.w;
  highp float tmpvar_11;
  tmpvar_11 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * unity_LightmapFade.z) + unity_LightmapFade.w);
  lmFade_5 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lmFull_4 = tmpvar_12;
  lowp vec3 tmpvar_13;
  tmpvar_13 = (2.0 * texture (unity_LightmapInd, xlv_TEXCOORD2).xyz);
  lmIndirect_3 = tmpvar_13;
  light_6.xyz = (tmpvar_10.xyz + mix (lmIndirect_3, lmFull_4, vec3(clamp (lmFade_5, 0.0, 1.0))));
  lowp vec4 c_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_8 * light_6.xyz);
  c_14.xyz = tmpvar_15;
  c_14.w = c_7.w;
  c_2 = c_14;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
varying highp vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture2D (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture2D (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture2D (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture2D (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2DProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture2D (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightmapST;
uniform highp vec4 _tex1_ST;
out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 o_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_1 * 0.5);
  highp vec2 tmpvar_4;
  tmpvar_4.x = tmpvar_3.x;
  tmpvar_4.y = (tmpvar_3.y * _ProjectionParams.x);
  o_2.xy = (tmpvar_4 + tmpvar_3.w);
  o_2.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _tex1_ST.xy) + _tex1_ST.zw);
  xlv_COLOR0 = _glesColor;
  xlv_TEXCOORD1 = o_2;
  xlv_TEXCOORD2 = ((_glesMultiTexCoord1.xy * unity_LightmapST.xy) + unity_LightmapST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _tex1;
uniform sampler2D _tex2;
uniform sampler2D _tex3;
uniform sampler2D _tex4;
uniform lowp float _light;
uniform sampler2D _LightBuffer;
uniform sampler2D unity_Lightmap;
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 c_4;
  if ((xlv_COLOR0.x < 0.25)) {
    c_4 = texture (_tex1, xlv_TEXCOORD0);
  } else {
    if ((xlv_COLOR0.x < 0.5)) {
      c_4 = texture (_tex2, xlv_TEXCOORD0);
    } else {
      if ((xlv_COLOR0.x < 0.75)) {
        c_4 = texture (_tex3, xlv_TEXCOORD0);
      } else {
        c_4 = texture (_tex4, xlv_TEXCOORD0);
      };
    };
  };
  lowp vec3 tmpvar_5;
  tmpvar_5 = (c_4.xyz + vec3(_light));
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureProj (_LightBuffer, xlv_TEXCOORD1);
  light_3 = tmpvar_6;
  mediump vec3 lm_7;
  lowp vec3 tmpvar_8;
  tmpvar_8 = (2.0 * texture (unity_Lightmap, xlv_TEXCOORD2).xyz);
  lm_7 = tmpvar_8;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = lm_7;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (max (light_3, vec4(0.001, 0.001, 0.001, 0.001)) + tmpvar_9);
  light_3 = tmpvar_10;
  lowp vec4 c_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = (tmpvar_5 * tmpvar_10.xyz);
  c_11.xyz = tmpvar_12;
  c_11.w = c_4.w;
  c_2 = c_11;
  tmpvar_1 = c_2;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_ON" "DIRLIGHTMAP_ON" "HDR_LIGHT_PREPASS_ON" }
"!!GLES3"
}
}
 }
}
Fallback "Diffuse"
}                              Unlit - Transparent Colored 	  Shader "Unlit/Transparent Colored" {
Properties {
 _MainTex ("Base (RGB), Alpha (A)", 2D) = "black" {}
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
  Offset -1, -1
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
varying mediump vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
varying lowp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  lowp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  lowp vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3 = tmpvar_1;
  if ((((_glesColor.x < 0.0001) && (_glesColor.y < 0.0001)) && (_glesColor.z < 0.0001))) {
    tmpvar_4.x = 0.0;
  } else {
    tmpvar_4.x = 1.0;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
varying mediump vec2 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
varying lowp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  col_1 = tmpvar_2;
  if ((xlv_TEXCOORD1.x == 0.0)) {
    highp float grey_3;
    lowp float tmpvar_4;
    tmpvar_4 = dot (tmpvar_2.xyz, vec3(0.299, 0.587, 0.114));
    grey_3 = tmpvar_4;
    highp vec3 tmpvar_5;
    tmpvar_5.x = grey_3;
    tmpvar_5.y = grey_3;
    tmpvar_5.z = grey_3;
    col_1.xyz = tmpvar_5;
  } else {
    col_1 = (col_1 * xlv_COLOR);
  };
  gl_FragData[0] = col_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
out mediump vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR;
out lowp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec2 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0.xy;
  lowp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  lowp vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  tmpvar_3 = tmpvar_1;
  if ((((_glesColor.x < 0.0001) && (_glesColor.y < 0.0001)) && (_glesColor.z < 0.0001))) {
    tmpvar_4.x = 0.0;
  } else {
    tmpvar_4.x = 1.0;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_COLOR = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_4;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
in mediump vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR;
in lowp vec2 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (_MainTex, xlv_TEXCOORD0);
  col_1 = tmpvar_2;
  if ((xlv_TEXCOORD1.x == 0.0)) {
    highp float grey_3;
    lowp float tmpvar_4;
    tmpvar_4 = dot (tmpvar_2.xyz, vec3(0.299, 0.587, 0.114));
    grey_3 = tmpvar_4;
    highp vec3 tmpvar_5;
    tmpvar_5.x = grey_3;
    tmpvar_5.y = grey_3;
    tmpvar_5.z = grey_3;
    col_1.xyz = tmpvar_5;
  } else {
    col_1 = (col_1 * xlv_COLOR);
  };
  _glesFragData[0] = col_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 100
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Blend SrcAlpha OneMinusSrcAlpha
  ColorMask RGB
  ColorMaterial AmbientAndDiffuse
  Offset -1, -1
  SetTexture [_MainTex] { combine texture * primary }
 }
}
}                     GridLayoutGroup     8aV   GridLayoutGroup    UnityEngine.UI     UnityEngine.UI.dll      	   Scrollbar       Â∂0–	   Scrollbar      UnityEngine.UI     UnityEngine.UI.dll         EventTrigger    ≤d
   EventTrigger   UnityEngine.EventSystems   UnityEngine.UI.dll         BaseInputModule            BaseInputModule    UnityEngine.EventSystems   UnityEngine.UI.dll         Physics2DRaycaster      ïŒÇÉ   Physics2DRaycaster     UnityEngine.EventSystems   UnityEngine.UI.dll         MaskableGraphic            MaskableGraphic    UnityEngine.UI     UnityEngine.UI.dll         BaseRaycaster              BaseRaycaster      UnityEngine.EventSystems   UnityEngine.UI.dll         AspectRatioFitter       †úü   AspectRatioFitter      UnityEngine.UI     UnityEngine.UI.dll         PointerInputModule             PointerInputModule     UnityEngine.EventSystems   UnityEngine.UI.dll         Mask    ÒÎÆù   Mask   UnityEngine.UI     UnityEngine.UI.dll         ToggleGroup     WI2Z   ToggleGroup    UnityEngine.UI     UnityEngine.UI.dll         Outline     ÁòOŒ   Outline    UnityEngine.UI     UnityEngine.UI.dll         PhysicsRaycaster    ïŒÇÉ   PhysicsRaycaster   UnityEngine.EventSystems   UnityEngine.UI.dll         Image       M∑n   Image      UnityEngine.UI     UnityEngine.UI.dll         EventSystem ¸ˇˇ∑Nñ¯   EventSystem    UnityEngine.EventSystems   UnityEngine.UI.dll         LayoutGroup            LayoutGroup    UnityEngine.UI     UnityEngine.UI.dll         ThreadingCallbackHelper     ê˜   ThreadingCallbackHelper    Prime31    P31RestKit.dll             HorizontalLayoutGroup       (òê—   HorizontalLayoutGroup      UnityEngine.UI     UnityEngine.UI.dll         AbstractManager            AbstractManager    Prime31    P31RestKit.dll          
   Selectable      g√¢ú
   Selectable     UnityEngine.UI     UnityEngine.UI.dll         Slider      æºÿ   Slider     UnityEngine.UI     UnityEngine.UI.dll         RawImage    ∑„≥j   RawImage   UnityEngine.UI     UnityEngine.UI.dll         GTParamComponent    öjF   GTParamComponent       Assembly-CSharp.dll        TweenFOV    ÁKÛ   TweenFOV       Assembly-CSharp.dll        AstarSerializer3_05            AstarSerializer3_05        Assembly-CSharp.dll        GTLogoAndUpdater    ê˜   GTLogoAndUpdater       Assembly-CSharp.dll     
   UITextList      X"lC
   UITextList         Assembly-CSharp.dll     
   vdbeblob_c          
   vdbeblob_c         Assembly-CSharp.dll        AnimationOrTween           AnimationOrTween       Assembly-CSharp.dll        ScreenResolution           ScreenResolution       Assembly-CSharp.dll        MemberSpecifiedDecorator           MemberSpecifiedDecorator   ProtoBuf.Serializers   Assembly-CSharp.dll            TagDecorator           TagDecorator   ProtoBuf.Serializers   Assembly-CSharp.dll            UIToggledComponents     SÏ∂É   UIToggledComponents        Assembly-CSharp.dll        UIKeyBinding    ∑⁄˚   UIKeyBinding       Assembly-CSharp.dll        ImmutableCollectionDecorator           ImmutableCollectionDecorator   ProtoBuf.Serializers   Assembly-CSharp.dll            TweenRotation   ¢ˇˇˇà≥—   TweenRotation          Assembly-CSharp.dll        LuaHideAttribute           LuaHideAttribute   NLua   Assembly-CSharp.dll            GraphUpdateUtilities           GraphUpdateUtilities   Pathfinding    Assembly-CSharp.dll         
   JsonReader          
   JsonReader     LitJson    Assembly-CSharp.dll     
   References          
   References     NLua   Assembly-CSharp.dll         
   BetterList          
   BetterList         Assembly-CSharp.dll        BlobSerializer             BlobSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            AstarChecksum              AstarChecksum          Assembly-CSharp.dll        UIGrid      ®‹ØÃ   UIGrid         Assembly-CSharp.dll        ArrayDecorator             ArrayDecorator     ProtoBuf.Serializers   Assembly-CSharp.dll            LuaGlobalAttribute             LuaGlobalAttribute     NLua   Assembly-CSharp.dll            SByteSerializer            SByteSerializer    ProtoBuf.Serializers   Assembly-CSharp.dll            keywordhash_h              keywordhash_h          Assembly-CSharp.dll        MultithreadClasses             MultithreadClasses         Assembly-CSharp.dll     
   Metatables          
   Metatables         Assembly-CSharp.dll        UIFont      rπI¯   UIFont         Assembly-CSharp.dll        SerializationContext           SerializationContext   ProtoBuf   Assembly-CSharp.dll        Lua            Lua    KeraLua    Assembly-CSharp.dll        DebugHookEventArgs             DebugHookEventArgs  
   NLua.Event     Assembly-CSharp.dll            vacuum_c           vacuum_c       Assembly-CSharp.dll     	   ProxyType           	   ProxyType      NLua   Assembly-CSharp.dll            PointGenerator             PointGenerator         Assembly-CSharp.dll     
   TweenWidth  §ˇˇˇı¡~˜
   TweenWidth         Assembly-CSharp.dll        delete_c           delete_c       Assembly-CSharp.dll        GraphEditorBase            GraphEditorBase    Pathfinding    Assembly-CSharp.dll            UIButtonOffset      2k¶n   UIButtonOffset         Assembly-CSharp.dll        ProtoContractAttribute             ProtoContractAttribute     ProtoBuf   Assembly-CSharp.dll        HookExceptionEventArgs             HookExceptionEventArgs  
   NLua.Event     Assembly-CSharp.dll            parse_h            parse_h        Assembly-CSharp.dll        KeyValuePairDecorator              KeyValuePairDecorator          Assembly-CSharp.dll        TTTweenAlpha    ÁKÛ   TTTweenAlpha       Assembly-CSharp.dll        date_c             date_c         Assembly-CSharp.dll        UIBasicSprite              UIBasicSprite          Assembly-CSharp.dll        GraphModifier              GraphModifier      Pathfinding    Assembly-CSharp.dll            UIButtonColor       4DÅ   UIButtonColor          Assembly-CSharp.dll        auth_c             auth_c         Assembly-CSharp.dll        PropertyDecorator              PropertyDecorator      ProtoBuf.Serializers   Assembly-CSharp.dll            TweenVolume     ÁKÛ   TweenVolume        Assembly-CSharp.dll        rowset_c           rowset_c       Assembly-CSharp.dll        RealTimep˛ˇˇê˜   RealTime       Assembly-CSharp.dll     	   loadext_c           	   loadext_c          Assembly-CSharp.dll        update_c           update_c       Assembly-CSharp.dll        func_c             func_c         Assembly-CSharp.dll        AstarParallel              AstarParallel          Assembly-CSharp.dll        LuaClassHelper             LuaClassHelper     NLua.Method    Assembly-CSharp.dll            MeshNode           MeshNode   Pathfinding    Assembly-CSharp.dll         	   AstarPath       ∆ËY	   AstarPath          Assembly-CSharp.dll        UISprite    7≈êf   UISprite       Assembly-CSharp.dll        Vdbe_h             Vdbe_h         Assembly-CSharp.dll        WireType           WireType   ProtoBuf   Assembly-CSharp.dll        XmlProtoSerializer             XmlProtoSerializer     ProtoBuf.ServiceModel      Assembly-CSharp.dll        PropertyReference              PropertyReference          Assembly-CSharp.dll        SubType            SubType    ProtoBuf.Meta      Assembly-CSharp.dll        SQLiteQuery            SQLiteQuery        Assembly-CSharp.dll        pcache_h           pcache_h       Assembly-CSharp.dll     	   TaiwanSDK           	   TaiwanSDK          Assembly-CSharp.dll        TweenTransform      E¥H   TweenTransform         Assembly-CSharp.dll        AIPath      Öï0º   AIPath         Assembly-CSharp.dll     
   UIDrawCall      ê˜
   UIDrawCall         Assembly-CSharp.dll        UIButton    ﬁmù˜   UIButton       Assembly-CSharp.dll     	   ZSProduct           	   ZSProduct          Assembly-CSharp-firstpass.dll              LuaEventHandler            LuaEventHandler    NLua.Method    Assembly-CSharp.dll            os_h           os_h       Assembly-CSharp.dll     
   callback_c          
   callback_c         Assembly-CSharp.dll        memjournal_c           memjournal_c       Assembly-CSharp.dll     	   VdbeInt_h           	   VdbeInt_h          Assembly-CSharp.dll     
   JsonMapper          
   JsonMapper     LitJson    Assembly-CSharp.dll        vdbe_c             vdbe_c         Assembly-CSharp.dll        TypeSerializer             TypeSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            IProtoSerializer           IProtoSerializer   ProtoBuf.Serializers   Assembly-CSharp.dll            NGUIMath           NGUIMath       Assembly-CSharp.dll        LuaClassType           LuaClassType   NLua   Assembly-CSharp.dll            ProtoDecoratorBase             ProtoDecoratorBase     ProtoBuf.Serializers   Assembly-CSharp.dll            GTFileDownloader           GTFileDownloader       Assembly-CSharp.dll        pager_c            pager_c        Assembly-CSharp.dll        UInt16Serializer           UInt16Serializer   ProtoBuf.Serializers   Assembly-CSharp.dll            NGUIText           NGUIText       Assembly-CSharp.dll        UICamera¶ˇˇˇ‘øÛz   UICamera       Assembly-CSharp.dll        GlobalSuppressions             GlobalSuppressions         Assembly-CSharp.dll     
   IExtension          
   IExtension     ProtoBuf   Assembly-CSharp.dll        wal_h              wal_h          Assembly-CSharp.dll        LuaTypes           LuaTypes   NLua   Assembly-CSharp.dll            UIRoot  ˇˇˇe≈ÿo   UIRoot         Assembly-CSharp.dll        NetObjectCache             NetObjectCache     ProtoBuf   Assembly-CSharp.dll     	   analyze_c           	   analyze_c          Assembly-CSharp.dll        NavMeshRenderer     ê˜   NavMeshRenderer        Assembly-CSharp.dll        pcache_c           pcache_c       Assembly-CSharp.dll        UIButtonActivate    &‚   UIButtonActivate       Assembly-CSharp.dll        stream_h           stream_h       Assembly-CSharp.dll        GTUIEffectClip      Í%11   GTUIEffectClip         Assembly-CSharp.dll        ExtensibleUtil             ExtensibleUtil     ProtoBuf   Assembly-CSharp.dll        TupleSerializer            TupleSerializer    ProtoBuf.Serializers   Assembly-CSharp.dll            JsonConverters             JsonConverters         Assembly-CSharp.dll        attach_c           attach_c       Assembly-CSharp.dll        where_c            where_c        Assembly-CSharp.dll        UriDecorator           UriDecorator   ProtoBuf.Serializers   Assembly-CSharp.dll            UIButtonKeys    Ü,   UIButtonKeys       Assembly-CSharp.dll     	   Delegates           	   Delegates          Assembly-CSharp.dll     
   GTLauncher      ê˜
   GTLauncher         Assembly-CSharp.dll        os_common_h            os_common_h        Assembly-CSharp.dll        TweenOrthoSize      ÁKÛ   TweenOrthoSize         Assembly-CSharp.dll     
   NLuaConfig          
   NLuaConfig         Assembly-CSharp.dll        DoubleSerializer           DoubleSerializer   ProtoBuf.Serializers   Assembly-CSharp.dll            Node           Node   Pathfinding    Assembly-CSharp.dll            BooleanSerializer              BooleanSerializer      ProtoBuf.Serializers   Assembly-CSharp.dll            UIScrollBar    N,⁄±   UIScrollBar        Assembly-CSharp.dll        notify_c           notify_c       Assembly-CSharp.dll        TweenPosition   °ˇˇˇ7ï   TweenPosition          Assembly-CSharp.dll        ZSLoginData            ZSLoginData        Assembly-CSharp-firstpass.dll              LuaDebug           LuaDebug   KeraLua    Assembly-CSharp.dll        ResEncryptDecrypt              ResEncryptDecrypt          Assembly-CSharp.dll        GTWindowBase    ê˜   GTWindowBase       Assembly-CSharp.dll        UIPlayAnimation     Wç›   UIPlayAnimation        Assembly-CSharp.dll        UIButtonRotation    2k¶n   UIButtonRotation       Assembly-CSharp.dll        StartEndModifier           StartEndModifier       Assembly-CSharp.dll        random_c           random_c       Assembly-CSharp.dll     
   UIGeometry          
   UIGeometry         Assembly-CSharp.dll        LuaFunction            LuaFunction    NLua   Assembly-CSharp.dll         
   Serializer          
   Serializer     ProtoBuf   Assembly-CSharp.dll        JsonData           JsonData   LitJson    Assembly-CSharp.dll     	   journal_c           	   journal_c          Assembly-CSharp.dll        FunnelModifier      _∂ë   FunnelModifier         Assembly-CSharp.dll        UIImageButton       ≈¸5   UIImageButton          Assembly-CSharp.dll        BMGlyph            BMGlyph        Assembly-CSharp.dll        ABPath             ABPath     Pathfinding    Assembly-CSharp.dll            fault_c            fault_c        Assembly-CSharp.dll        UIToggle    Ì WÕ   UIToggle       Assembly-CSharp.dll        ProtoOperationBehavior             ProtoOperationBehavior     ProtoBuf.ServiceModel      Assembly-CSharp.dll        ProtoReader            ProtoReader    ProtoBuf   Assembly-CSharp.dll        malloc_c           malloc_c       Assembly-CSharp.dll        ValueMember            ValueMember    ProtoBuf.Meta      Assembly-CSharp.dll        ZSTalkingData              ZSTalkingData          Assembly-CSharp-firstpass.dll              EventHandlerContainer              EventHandlerContainer      NLua.Method    Assembly-CSharp.dll            ProtoException             ProtoException     ProtoBuf   Assembly-CSharp.dll        ObjectTranslatorPool           ObjectTranslatorPool   NLua   Assembly-CSharp.dll            UIForwardEvents      5Dﬂ   UIForwardEvents        Assembly-CSharp.dll        LuaTag             LuaTag     KeraLua    Assembly-CSharp.dll     	   opcodes_c           	   opcodes_c          Assembly-CSharp.dll        pager_h            pager_h        Assembly-CSharp.dll        GTUICameraResizer       ê˜   GTUICameraResizer          Assembly-CSharp.dll        UIAtlas     b‹»   UIAtlas        Assembly-CSharp.dll        CompilerDelegates              CompilerDelegates          Assembly-CSharp.dll        NodeLink    „ÁeC   NodeLink       Assembly-CSharp.dll        GTButtonMutiLabel       ù«\   GTButtonMutiLabel          Assembly-CSharp.dll        PropertyBinding     qv#   PropertyBinding        Assembly-CSharp.dll        hash_c             hash_c         Assembly-CSharp.dll        Language           Language       Assembly-CSharp.dll        AppFlyerInterface              AppFlyerInterface          Assembly-CSharp.dll        GeneralExtensions              GeneralExtensions          Assembly-CSharp.dll        KeyValuePairProxy              KeyValuePairProxy          Assembly-CSharp.dll        ZSInterface            ZSInterface        Assembly-CSharp-firstpass.dll              ProtoEnumAttribute             ProtoEnumAttribute     ProtoBuf   Assembly-CSharp.dll     
   EventCodes          
   EventCodes  
   NLua.Event     Assembly-CSharp.dll            NetObjectSerializer            NetObjectSerializer    ProtoBuf.Serializers   Assembly-CSharp.dll            ZeroIosNotification            ZeroIosNotification        Assembly-CSharp-firstpass.dll              NativeMethods              NativeMethods      KeraLua    Assembly-CSharp.dll        select_c           select_c       Assembly-CSharp.dll     
   DataFormat          
   DataFormat     ProtoBuf   Assembly-CSharp.dll        UInt64Serializer           UInt64Serializer   ProtoBuf.Serializers   Assembly-CSharp.dll            UIPopupList     \¸:Ã   UIPopupList        Assembly-CSharp.dll        GTHttpWebRequest           GTHttpWebRequest       Assembly-CSharp.dll        ISerializerProxy           ISerializerProxy   ProtoBuf.Serializers   Assembly-CSharp.dll            UIButtonScale       2k¶n   UIButtonScale          Assembly-CSharp.dll        sqliteInt_h            sqliteInt_h        Assembly-CSharp.dll        wal_c              wal_c          Assembly-CSharp.dll        DateTimeSerializer             DateTimeSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            UIDragResize    Áì∑   UIDragResize       Assembly-CSharp.dll        GridNode           GridNode   Pathfinding.Nodes      Assembly-CSharp.dll            FaceToTarget    >Å›   FaceToTarget       Assembly-CSharp.dll        ProtoIgnoreAttribute           ProtoIgnoreAttribute   ProtoBuf   Assembly-CSharp.dll        parse_c            parse_c        Assembly-CSharp.dll        utf_c              utf_c          Assembly-CSharp.dll        CharSerializer             CharSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            UIKeyNavigation     YB!   UIKeyNavigation        Assembly-CSharp.dll        CompiledSerializer             CompiledSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            table_c            table_c        Assembly-CSharp.dll        ActiveAnimation     $∂ù   ActiveAnimation        Assembly-CSharp.dll        SimpleSmoothModifier    m˙c3   SimpleSmoothModifier       Assembly-CSharp.dll        TweenHeight •ˇˇˇı¡~˜   TweenHeight        Assembly-CSharp.dll        UITable     úŒÊÈ   UITable        Assembly-CSharp.dll     	   btmutex_c           	   btmutex_c          Assembly-CSharp.dll        EnumSerializer             EnumSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll         
   ByteReader          
   ByteReader         Assembly-CSharp.dll        ProtoWriter            ProtoWriter    ProtoBuf   Assembly-CSharp.dll        MotionMoveSaver     ™Ï[   MotionMoveSaver        Assembly-CSharp.dll        AlternativePath     ò<*   AlternativePath        Assembly-CSharp.dll        UIDragCamera    ™ä5H   UIDragCamera       Assembly-CSharp.dll        UISlider   o…ÿº   UISlider       Assembly-CSharp.dll        BufferExtension            BufferExtension    ProtoBuf   Assembly-CSharp.dll        SubItemSerializer              SubItemSerializer      ProtoBuf.Serializers   Assembly-CSharp.dll            Lexer              Lexer      LitJson    Assembly-CSharp.dll        vdbetrace_c            vdbetrace_c        Assembly-CSharp.dll        AstarSerializer3_01            AstarSerializer3_01        Assembly-CSharp.dll        UI2DSpriteAnimation     .£)ÿ   UI2DSpriteAnimation        Assembly-CSharp.dll        AnimatedAlpha       “º‚[   AnimatedAlpha          Assembly-CSharp.dll        TypeFormatEventArgs            TypeFormatEventArgs    ProtoBuf.Meta      Assembly-CSharp.dll        alter_c            alter_c        Assembly-CSharp.dll        UIWrapContent       9Nü   UIWrapContent          Assembly-CSharp.dll        util_c             util_c         Assembly-CSharp.dll        UICenterOnClick     ê˜   UICenterOnClick        Assembly-CSharp.dll        LabelSetting    ·¨qı   LabelSetting       Assembly-CSharp.dll     	   StackPool           	   StackPool      Pathfinding.Util   Assembly-CSharp.dll        SystemTypeSerializer           SystemTypeSerializer   ProtoBuf.Serializers   Assembly-CSharp.dll            FaceToCamera    yF~   FaceToCamera       Assembly-CSharp.dll     
   TweenScale  £ˇˇˇFÁÚD
   TweenScale         Assembly-CSharp.dll        btree_c            btree_c        Assembly-CSharp.dll        RegisterEventHandler           RegisterEventHandler   NLua.Method    Assembly-CSharp.dll            mutex_h            mutex_h        Assembly-CSharp.dll        CodeGeneration             CodeGeneration     NLua   Assembly-CSharp.dll            bitvec_c           bitvec_c       Assembly-CSharp.dll        MetaType           MetaType   ProtoBuf.Meta      Assembly-CSharp.dll        UInt32Serializer           UInt32Serializer   ProtoBuf.Serializers   Assembly-CSharp.dll            astarclasses           astarclasses       Assembly-CSharp.dll        GTUIManagerBase            GTUIManagerBase        Assembly-CSharp.dll     	   trigger_c           	   trigger_c          Assembly-CSharp.dll        UIPlaySound     bÒ   UIPlaySound        Assembly-CSharp.dll        GTVRBGScaler    ê˜   GTVRBGScaler       Assembly-CSharp.dll        UISnapshotPoint     Ém/   UISnapshotPoint        Assembly-CSharp.dll        RuntimeTypeModel           RuntimeTypeModel   ProtoBuf.Meta      Assembly-CSharp.dll        TimeSpanSerializer             TimeSpanSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            AstarDebugger       T<∆t   AstarDebugger          Assembly-CSharp.dll        SQLiteDB           SQLiteDB       Assembly-CSharp.dll     
   tokenize_c          
   tokenize_c         Assembly-CSharp.dll     	   AstarMath           	   AstarMath          Assembly-CSharp.dll        AttributeMap           AttributeMap   ProtoBuf.Meta      Assembly-CSharp.dll        UIWidget    á&Êj   UIWidget       Assembly-CSharp.dll        ByteSerializer             ByteSerializer     ProtoBuf.Serializers   Assembly-CSharp.dll            Hosts              Hosts          Assembly-CSharp.dll        AstarProfiler              AstarProfiler          Assembly-CSharp.dll     
   EventMasks          
   EventMasks  
   NLua.Event     Assembly-CSharp.dll            stream_c           stream_c       Assembly-CSharp.dll        ProtoIncludeAttribute              ProtoIncludeAttribute      ProtoBuf   Assembly-CSharp.dll        RoundRotation       ç?ıª   RoundRotation          Assembly-CSharp.dll        LuaRegistrationHelper              LuaRegistrationHelper      NLua   Assembly-CSharp.dll            destroyEffect       ÕÏ,.   destroyEffect          Assembly-CSharp.dll        LuaScriptException             LuaScriptException     NLua.Exceptions    Assembly-CSharp.dll     	   sqlite3_h           	   sqlite3_h          Assembly-CSharp.dll        mutex_c            mutex_c        Assembly-CSharp.dll        pragma_c           pragma_c       Assembly-CSharp.dll        ObjectTranslator           ObjectTranslator   NLua   Assembly-CSharp.dll            Hash_h             Hash_h         Assembly-CSharp.dll        BMFont             BMFont         Assembly-CSharp.dll     
   complete_c          
   complete_c         Assembly-CSharp.dll        vtab_c             vtab_c         Assembly-CSharp.dll        ctime_c            ctime_c        Assembly-CSharp.dll        AstarSerialize             AstarSerialize         Assembly-CSharp.dll        PushInterface              PushInterface          Assembly-CSharp-firstpass.dll           	   UIStretch   Îˇˇˇ#wj]	   UIStretch          Assembly-CSharp.dll        ListDecorator              ListDecorator      ProtoBuf.Serializers   Assembly-CSharp.dll            Int32Serializer            Int32Serializer    ProtoBuf.Serializers   Assembly-CSharp.dll            fkey_c             fkey_c         Assembly-CSharp.dll     
   BufferPool          
   BufferPool     ProtoBuf   Assembly-CSharp.dll        CallbackAttributes             CallbackAttributes         Assembly-CSharp.dll        Helpers            Helpers    ProtoBuf   Assembly-CSharp.dll     
   AOTMethods          
   AOTMethods         Assembly-CSharp.dll        ProtoEndpointBehavior              ProtoEndpointBehavior      ProtoBuf.ServiceModel      Assembly-CSharp.dll        IJsonWrapper           IJsonWrapper   LitJson    Assembly-CSharp.dll     	   Modifiers           	   Modifiers          Assembly-CSharp.dll     
   UIViewport      u4™Ú
   UIViewport         Assembly-CSharp.dll        SpringPosition      =∫	˝   SpringPosition         Assembly-CSharp.dll        UIProgressBar       Á#0   UIProgressBar          Assembly-CSharp.dll        UIDraggableCamera       \˘Or   UIDraggableCamera          Assembly-CSharp.dll        ParseableSerializer            ParseableSerializer    ProtoBuf.Serializers   Assembly-CSharp.dll            LuaException           LuaException   NLua.Exceptions    Assembly-CSharp.dll        IProtoTypeSerializer           IProtoTypeSerializer   ProtoBuf.Serializers   Assembly-CSharp.dll            UIDragDropItem      ·˜Áœ   UIDragDropItem         Assembly-CSharp.dll     
   TweenAlpha      ÁKÛ
   TweenAlpha         Assembly-CSharp.dll     	   pcache1_c           	   pcache1_c          Assembly-CSharp.dll        status_c           status_c       Assembly-CSharp.dll        JsonSerializer             JsonSerializer         Assembly-CSharp.dll        LuaBase            LuaBase    NLua   Assembly-CSharp.dll            GraphUpdateShape           GraphUpdateShape   Pathfinding    Assembly-CSharp.dll            BattleUiPlug    h+ØÛ   BattleUiPlug       Assembly-CSharp.dll     	   resolve_c           	   resolve_c          Assembly-CSharp.dll        NullDecorator              NullDeco